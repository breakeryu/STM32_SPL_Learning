
SPL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e20  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f50  08000f50  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f50  08000f50  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000f50  08000f50  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f50  08000f50  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f50  08000f50  00010f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f54  08000f54  00010f54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000f58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  2000002c  08000f84  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08000f84  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005791  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001291  00000000  00000000  000257e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  00026a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000670  00000000  00000000  000271c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000031c7  00000000  00000000  00027830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000079b3  00000000  00000000  0002a9f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005472e  00000000  00000000  000323aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00086ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d38  00000000  00000000  00086b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f38 	.word	0x08000f38

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08000f38 	.word	0x08000f38

08000170 <BSP_DAC_init>:
#include "bsp_dac.h"


void BSP_DAC_init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0

    GPIO_InitTypeDef GPIO_InitStructure;
    DAC_InitTypeDef            DAC_InitStructure;

    /* DAC Periph clock enable */
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_DAC, ENABLE);
 8000176:	2101      	movs	r1, #1
 8000178:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800017c:	f000 fdca 	bl	8000d14 <RCC_APB1PeriphClockCmd>
 

    /* Once the DAC channel is enabled, the corresponding GPIO pin is automatically 
        connected to the DAC converter. In order to avoid parasitic consumption, 
        the GPIO pin should be configured in analog */
    GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_4;
 8000180:	2310      	movs	r3, #16
 8000182:	82bb      	strh	r3, [r7, #20]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 8000184:	2300      	movs	r3, #0
 8000186:	75fb      	strb	r3, [r7, #23]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000188:	f107 0314 	add.w	r3, r7, #20
 800018c:	4619      	mov	r1, r3
 800018e:	480b      	ldr	r0, [pc, #44]	; (80001bc <BSP_DAC_init+0x4c>)
 8000190:	f000 fb06 	bl	80007a0 <GPIO_Init>


    /* DAC channel1 Configuration */
    DAC_InitStructure.DAC_Trigger = DAC_Trigger_Software;
 8000194:	233c      	movs	r3, #60	; 0x3c
 8000196:	607b      	str	r3, [r7, #4]
    DAC_InitStructure.DAC_WaveGeneration = DAC_WaveGeneration_None;
 8000198:	2300      	movs	r3, #0
 800019a:	60bb      	str	r3, [r7, #8]
    DAC_InitStructure.DAC_OutputBuffer = DAC_OutputBuffer_Enable;
 800019c:	2300      	movs	r3, #0
 800019e:	613b      	str	r3, [r7, #16]
    DAC_Init(DAC_Channel_1, &DAC_InitStructure);
 80001a0:	1d3b      	adds	r3, r7, #4
 80001a2:	4619      	mov	r1, r3
 80001a4:	2000      	movs	r0, #0
 80001a6:	f000 fa65 	bl	8000674 <DAC_Init>

    /* Enable DAC Channel1: Once the DAC channel1 is enabled, PA.04 is 
    automatically connected to the DAC converter. */
    DAC_Cmd(DAC_Channel_1, ENABLE);
 80001aa:	2101      	movs	r1, #1
 80001ac:	2000      	movs	r0, #0
 80001ae:	f000 fa93 	bl	80006d8 <DAC_Cmd>

    

}
 80001b2:	bf00      	nop
 80001b4:	3718      	adds	r7, #24
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	40010800 	.word	0x40010800

080001c0 <BSP_DAC_SetChVal>:


uint16_t dac_Data = 100;

void BSP_DAC_SetChVal(void)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	af00      	add	r7, sp, #0
    /* Set DAC Channel1 DHR12L register */
    DAC_SetChannel1Data(DAC_Align_12b_R, dac_Data);
 80001c4:	4b05      	ldr	r3, [pc, #20]	; (80001dc <BSP_DAC_SetChVal+0x1c>)
 80001c6:	881b      	ldrh	r3, [r3, #0]
 80001c8:	4619      	mov	r1, r3
 80001ca:	2000      	movs	r0, #0
 80001cc:	f000 face 	bl	800076c <DAC_SetChannel1Data>

    /* Start DAC Channel1 conversion by software */
    DAC_SoftwareTriggerCmd(DAC_Channel_1, ENABLE);
 80001d0:	2101      	movs	r1, #1
 80001d2:	2000      	movs	r0, #0
 80001d4:	f000 faa4 	bl	8000720 <DAC_SoftwareTriggerCmd>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	20000000 	.word	0x20000000

080001e0 <BSP_RCC_Init>:




void BSP_RCC_Init(void)
{
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  SystemInit();
 80001e4:	f000 f8fe 	bl	80003e4 <SystemInit>

  /* Configure the System Peripheral clock prescalers */
  BSP_RCC_Periph_Clock_Init();
 80001e8:	f000 f80c 	bl	8000204 <BSP_RCC_Periph_Clock_Init>

  //Update SystemCoreClock variable according to Clock Register Values
  SystemCoreClockUpdate();
 80001ec:	f000 f92e 	bl	800044c <SystemCoreClockUpdate>

  /* This function fills the RCC_ClockFreq structure with the current
  frequencies of different on chip clocks (for debug purpose) */
  RCC_GetClocksFreq(&RCC_ClockFreq);
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <BSP_RCC_Init+0x20>)
 80001f2:	f000 fc9d 	bl	8000b30 <RCC_GetClocksFreq>

  /* NVIC configuration ------------------------------------------------------*/
  //BSP_RCC_NVIC_Configuration();

  delay_init(72);
 80001f6:	2048      	movs	r0, #72	; 0x48
 80001f8:	f000 f8a4 	bl	8000344 <delay_init>

  // _mcu_rev_id = DBGMCU_GetREVID();
  // _mcu_dev_id = DBGMCU_GetDEVID();

}
 80001fc:	bf00      	nop
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	20000048 	.word	0x20000048

08000204 <BSP_RCC_Periph_Clock_Init>:


void BSP_RCC_Periph_Clock_Init(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0



  //ADC CLK Prescaler, ADC CLK = 72 / 6 = 12 Mhz
  RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8000208:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800020c:	f000 fc32 	bl	8000a74 <RCC_ADCCLKConfig>
  //USB OTG CLK FS Prescaler, when PLL = 72Mhz, OTGFSPRE = 0
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8000210:	2000      	movs	r0, #0
 8000212:	f000 fc21 	bl	8000a58 <RCC_USBCLKConfig>
  //MCO 
  RCC_MCOConfig(RCC_MCO_NoClock);
 8000216:	2000      	movs	r0, #0
 8000218:	f000 fd9a 	bl	8000d50 <RCC_MCOConfig>


  //Clear Clock interrupt register
  RCC->CIR = 0;
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <BSP_RCC_Periph_Clock_Init+0x58>)
 800021e:	2200      	movs	r2, #0
 8000220:	609a      	str	r2, [r3, #8]

  //Reset APB2 and APB1 Peripheral
  RCC->APB2RSTR = 0;
 8000222:	4b0e      	ldr	r3, [pc, #56]	; (800025c <BSP_RCC_Periph_Clock_Init+0x58>)
 8000224:	2200      	movs	r2, #0
 8000226:	60da      	str	r2, [r3, #12]
  RCC->APB1RSTR = 0;
 8000228:	4b0c      	ldr	r3, [pc, #48]	; (800025c <BSP_RCC_Periph_Clock_Init+0x58>)
 800022a:	2200      	movs	r2, #0
 800022c:	611a      	str	r2, [r3, #16]

  //AHB Peripheral CLK Enable
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SRAM  | RCC_AHBPeriph_FLITF , ENABLE);
 800022e:	2101      	movs	r1, #1
 8000230:	2014      	movs	r0, #20
 8000232:	f000 fd33 	bl	8000c9c <RCC_AHBPeriphClockCmd>
  

  //APB2 Peripheral CLK Enable
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA  |
 8000236:	2101      	movs	r1, #1
 8000238:	201d      	movs	r0, #29
 800023a:	f000 fd4d 	bl	8000cd8 <RCC_APB2PeriphClockCmd>
                          RCC_APB2Periph_GPIOB  | RCC_APB2Periph_GPIOC,
                        ENABLE);

  //APB1 Peripheral CLK Enable
  RCC->APB1ENR = 0;
 800023e:	4b07      	ldr	r3, [pc, #28]	; (800025c <BSP_RCC_Periph_Clock_Init+0x58>)
 8000240:	2200      	movs	r2, #0
 8000242:	61da      	str	r2, [r3, #28]
  
  //RTC CLK
  RCC_LSEConfig(RCC_LSE_ON);
 8000244:	2001      	movs	r0, #1
 8000246:	f000 fc31 	bl	8000aac <RCC_LSEConfig>
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 800024a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800024e:	f000 fc4d 	bl	8000aec <RCC_RTCCLKConfig>
  RCC_RTCCLKCmd(ENABLE);
 8000252:	2001      	movs	r0, #1
 8000254:	f000 fc5c 	bl	8000b10 <RCC_RTCCLKCmd>




}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40021000 	.word	0x40021000

08000260 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM4, TIM_IT_CC1) != RESET)
 8000264:	2102      	movs	r1, #2
 8000266:	4815      	ldr	r0, [pc, #84]	; (80002bc <TIM4_IRQHandler+0x5c>)
 8000268:	f000 fda8 	bl	8000dbc <TIM_GetITStatus>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d021      	beq.n	80002b6 <TIM4_IRQHandler+0x56>
  {
    TIM_ClearITPendingBit(TIM4, TIM_IT_CC1);
 8000272:	2102      	movs	r1, #2
 8000274:	4811      	ldr	r0, [pc, #68]	; (80002bc <TIM4_IRQHandler+0x5c>)
 8000276:	f000 fdca 	bl	8000e0e <TIM_ClearITPendingBit>

    /* Pin PC.06 toggling with frequency = 500 Hz */
    GPIO_WriteBit(GPIOB, GPIO_Pin_6, (BitAction)(1 - GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_6)));
 800027a:	2140      	movs	r1, #64	; 0x40
 800027c:	4810      	ldr	r0, [pc, #64]	; (80002c0 <TIM4_IRQHandler+0x60>)
 800027e:	f000 fb4b 	bl	8000918 <GPIO_ReadOutputDataBit>
 8000282:	4603      	mov	r3, r0
 8000284:	f1c3 0301 	rsb	r3, r3, #1
 8000288:	b2db      	uxtb	r3, r3
 800028a:	461a      	mov	r2, r3
 800028c:	2140      	movs	r1, #64	; 0x40
 800028e:	480c      	ldr	r0, [pc, #48]	; (80002c0 <TIM4_IRQHandler+0x60>)
 8000290:	f000 fb5b 	bl	800094a <GPIO_WriteBit>

    
    capture = TIM_GetCapture1(TIM4);
 8000294:	4809      	ldr	r0, [pc, #36]	; (80002bc <TIM4_IRQHandler+0x5c>)
 8000296:	f000 fd79 	bl	8000d8c <TIM_GetCapture1>
 800029a:	4603      	mov	r3, r0
 800029c:	461a      	mov	r2, r3
 800029e:	4b09      	ldr	r3, [pc, #36]	; (80002c4 <TIM4_IRQHandler+0x64>)
 80002a0:	801a      	strh	r2, [r3, #0]
    TIM_SetCompare1(TIM4, capture + CCR1_Val);
 80002a2:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <TIM4_IRQHandler+0x64>)
 80002a4:	881a      	ldrh	r2, [r3, #0]
 80002a6:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <TIM4_IRQHandler+0x68>)
 80002a8:	881b      	ldrh	r3, [r3, #0]
 80002aa:	4413      	add	r3, r2
 80002ac:	b29b      	uxth	r3, r3
 80002ae:	4619      	mov	r1, r3
 80002b0:	4802      	ldr	r0, [pc, #8]	; (80002bc <TIM4_IRQHandler+0x5c>)
 80002b2:	f000 fd5d 	bl	8000d70 <TIM_SetCompare1>
  }

}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40000800 	.word	0x40000800
 80002c0:	40010c00 	.word	0x40010c00
 80002c4:	2000005c 	.word	0x2000005c
 80002c8:	20000002 	.word	0x20000002

080002cc <TIM5_IRQHandler>:
  * @brief  This function handles TIM5 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM5_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
 /* Clear TIM3 Capture compare interrupt pending bit */
  TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
 80002d0:	2102      	movs	r1, #2
 80002d2:	4817      	ldr	r0, [pc, #92]	; (8000330 <TIM5_IRQHandler+0x64>)
 80002d4:	f000 fd9b 	bl	8000e0e <TIM_ClearITPendingBit>

  /* Get the Input Capture value */
  IC1Value = TIM_GetCapture1(TIM5);
 80002d8:	4815      	ldr	r0, [pc, #84]	; (8000330 <TIM5_IRQHandler+0x64>)
 80002da:	f000 fd57 	bl	8000d8c <TIM_GetCapture1>
 80002de:	4603      	mov	r3, r0
 80002e0:	461a      	mov	r2, r3
 80002e2:	4b14      	ldr	r3, [pc, #80]	; (8000334 <TIM5_IRQHandler+0x68>)
 80002e4:	801a      	strh	r2, [r3, #0]

  if (IC1Value != 0)
 80002e6:	4b13      	ldr	r3, [pc, #76]	; (8000334 <TIM5_IRQHandler+0x68>)
 80002e8:	881b      	ldrh	r3, [r3, #0]
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d017      	beq.n	800031e <TIM5_IRQHandler+0x52>
  {
    /* Duty cycle computation */
    DutyCycle = ( TIM_GetCapture2(TIM5) * 100) / IC1Value;
 80002ee:	4810      	ldr	r0, [pc, #64]	; (8000330 <TIM5_IRQHandler+0x64>)
 80002f0:	f000 fd58 	bl	8000da4 <TIM_GetCapture2>
 80002f4:	4603      	mov	r3, r0
 80002f6:	461a      	mov	r2, r3
 80002f8:	2364      	movs	r3, #100	; 0x64
 80002fa:	fb02 f303 	mul.w	r3, r2, r3
 80002fe:	4a0d      	ldr	r2, [pc, #52]	; (8000334 <TIM5_IRQHandler+0x68>)
 8000300:	8812      	ldrh	r2, [r2, #0]
 8000302:	fb93 f3f2 	sdiv	r3, r3, r2
 8000306:	b29a      	uxth	r2, r3
 8000308:	4b0b      	ldr	r3, [pc, #44]	; (8000338 <TIM5_IRQHandler+0x6c>)
 800030a:	801a      	strh	r2, [r3, #0]

    /* Frequency computation */
    Frequency = SystemCoreClock / IC1Value;
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <TIM5_IRQHandler+0x70>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a08      	ldr	r2, [pc, #32]	; (8000334 <TIM5_IRQHandler+0x68>)
 8000312:	8812      	ldrh	r2, [r2, #0]
 8000314:	fbb3 f3f2 	udiv	r3, r3, r2
 8000318:	4a09      	ldr	r2, [pc, #36]	; (8000340 <TIM5_IRQHandler+0x74>)
 800031a:	6013      	str	r3, [r2, #0]
  {
    DutyCycle = 0;
    Frequency = 0;
  }

}
 800031c:	e005      	b.n	800032a <TIM5_IRQHandler+0x5e>
    DutyCycle = 0;
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <TIM5_IRQHandler+0x6c>)
 8000320:	2200      	movs	r2, #0
 8000322:	801a      	strh	r2, [r3, #0]
    Frequency = 0;
 8000324:	4b06      	ldr	r3, [pc, #24]	; (8000340 <TIM5_IRQHandler+0x74>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40000c00 	.word	0x40000c00
 8000334:	2000005e 	.word	0x2000005e
 8000338:	20000060 	.word	0x20000060
 800033c:	20000004 	.word	0x20000004
 8000340:	20000064 	.word	0x20000064

08000344 <delay_init>:
//初始化延迟函数
//当使用OS的时候,此函数会初始化OS的时钟节拍
//SYSTICK的时钟固定为AHB时钟的1/8
//SYSCLK:系统时钟频率
void delay_init(u8 SYSCLK)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
 800034e:	f06f 0004 	mvn.w	r0, #4
 8000352:	f000 f973 	bl	800063c <SysTick_CLKSourceConfig>
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	08db      	lsrs	r3, r3, #3
 800035a:	b2da      	uxtb	r2, r3
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <delay_init+0x3c>)
 800035e:	701a      	strb	r2, [r3, #0]
	fac_ms=1000/delay_ostickspersec;		//代表OS可以延时的最少单位	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; 	//开启SYSTICK    
#else
	fac_ms=(u16)fac_us*1000;				//非OS下,代表每个ms需要的systick时钟数   
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <delay_init+0x3c>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	b29b      	uxth	r3, r3
 8000366:	461a      	mov	r2, r3
 8000368:	0152      	lsls	r2, r2, #5
 800036a:	1ad2      	subs	r2, r2, r3
 800036c:	0092      	lsls	r2, r2, #2
 800036e:	4413      	add	r3, r2
 8000370:	00db      	lsls	r3, r3, #3
 8000372:	b29a      	uxth	r2, r3
 8000374:	4b03      	ldr	r3, [pc, #12]	; (8000384 <delay_init+0x40>)
 8000376:	801a      	strh	r2, [r3, #0]
#endif
}								    
 8000378:	bf00      	nop
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	20000068 	.word	0x20000068
 8000384:	2000006a 	.word	0x2000006a

08000388 <sys_SWJ_REMAP_Config>:
  *     @arg SWJ_NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  *     @arg SWJ_DISABLE: Full SWJ Disabled (JTAG-DP + SW-DP)
  * @retval None
  */
void sys_SWJ_REMAP_Config(uint8_t SWJ_REMAP)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]

    switch (SWJ_REMAP)
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	2b03      	cmp	r3, #3
 8000396:	d81a      	bhi.n	80003ce <sys_SWJ_REMAP_Config+0x46>
 8000398:	a201      	add	r2, pc, #4	; (adr r2, 80003a0 <sys_SWJ_REMAP_Config+0x18>)
 800039a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800039e:	bf00      	nop
 80003a0:	080003cf 	.word	0x080003cf
 80003a4:	080003b1 	.word	0x080003b1
 80003a8:	080003bb 	.word	0x080003bb
 80003ac:	080003c5 	.word	0x080003c5
        /* Full SWJ Enable (JTAG-DP + SW-DP) */
        break;

    case SWJ_NONJTRST:
        /* Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_NoJTRST, ENABLE);
 80003b0:	2101      	movs	r1, #1
 80003b2:	4809      	ldr	r0, [pc, #36]	; (80003d8 <sys_SWJ_REMAP_Config+0x50>)
 80003b4:	f000 fae0 	bl	8000978 <GPIO_PinRemapConfig>
        break;
 80003b8:	e00a      	b.n	80003d0 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_NOJTAG:
        /* JTAG-DP Disabled and SW-DP Enabled */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 80003ba:	2101      	movs	r1, #1
 80003bc:	4807      	ldr	r0, [pc, #28]	; (80003dc <sys_SWJ_REMAP_Config+0x54>)
 80003be:	f000 fadb 	bl	8000978 <GPIO_PinRemapConfig>
    break;
 80003c2:	e005      	b.n	80003d0 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_DISABLE:
        /* Full SWJ Disabled (JTAG-DP + SW-DP) */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
 80003c4:	2101      	movs	r1, #1
 80003c6:	4806      	ldr	r0, [pc, #24]	; (80003e0 <sys_SWJ_REMAP_Config+0x58>)
 80003c8:	f000 fad6 	bl	8000978 <GPIO_PinRemapConfig>
    break;
 80003cc:	e000      	b.n	80003d0 <sys_SWJ_REMAP_Config+0x48>

    default:
        break;
 80003ce:	bf00      	nop
    }

}
 80003d0:	bf00      	nop
 80003d2:	3708      	adds	r7, #8
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	00300100 	.word	0x00300100
 80003dc:	00300200 	.word	0x00300200
 80003e0:	00300400 	.word	0x00300400

080003e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <SystemInit+0x5c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	4a14      	ldr	r2, [pc, #80]	; (8000440 <SystemInit+0x5c>)
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <SystemInit+0x5c>)
 80003f6:	685a      	ldr	r2, [r3, #4]
 80003f8:	4911      	ldr	r1, [pc, #68]	; (8000440 <SystemInit+0x5c>)
 80003fa:	4b12      	ldr	r3, [pc, #72]	; (8000444 <SystemInit+0x60>)
 80003fc:	4013      	ands	r3, r2
 80003fe:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <SystemInit+0x5c>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a0e      	ldr	r2, [pc, #56]	; (8000440 <SystemInit+0x5c>)
 8000406:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800040a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800040e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000410:	4b0b      	ldr	r3, [pc, #44]	; (8000440 <SystemInit+0x5c>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a0a      	ldr	r2, [pc, #40]	; (8000440 <SystemInit+0x5c>)
 8000416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800041a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <SystemInit+0x5c>)
 800041e:	685b      	ldr	r3, [r3, #4]
 8000420:	4a07      	ldr	r2, [pc, #28]	; (8000440 <SystemInit+0x5c>)
 8000422:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000426:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <SystemInit+0x5c>)
 800042a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800042e:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000430:	f000 f87e 	bl	8000530 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000434:	4b04      	ldr	r3, [pc, #16]	; (8000448 <SystemInit+0x64>)
 8000436:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800043a:	609a      	str	r2, [r3, #8]
#endif 
}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40021000 	.word	0x40021000
 8000444:	f8ff0000 	.word	0xf8ff0000
 8000448:	e000ed00 	.word	0xe000ed00

0800044c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000452:	2300      	movs	r3, #0
 8000454:	60fb      	str	r3, [r7, #12]
 8000456:	2300      	movs	r3, #0
 8000458:	60bb      	str	r3, [r7, #8]
 800045a:	2300      	movs	r3, #0
 800045c:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800045e:	4b2f      	ldr	r3, [pc, #188]	; (800051c <SystemCoreClockUpdate+0xd0>)
 8000460:	685b      	ldr	r3, [r3, #4]
 8000462:	f003 030c 	and.w	r3, r3, #12
 8000466:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	2b08      	cmp	r3, #8
 800046c:	d011      	beq.n	8000492 <SystemCoreClockUpdate+0x46>
 800046e:	68fb      	ldr	r3, [r7, #12]
 8000470:	2b08      	cmp	r3, #8
 8000472:	d83a      	bhi.n	80004ea <SystemCoreClockUpdate+0x9e>
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d003      	beq.n	8000482 <SystemCoreClockUpdate+0x36>
 800047a:	68fb      	ldr	r3, [r7, #12]
 800047c:	2b04      	cmp	r3, #4
 800047e:	d004      	beq.n	800048a <SystemCoreClockUpdate+0x3e>
 8000480:	e033      	b.n	80004ea <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000482:	4b27      	ldr	r3, [pc, #156]	; (8000520 <SystemCoreClockUpdate+0xd4>)
 8000484:	4a27      	ldr	r2, [pc, #156]	; (8000524 <SystemCoreClockUpdate+0xd8>)
 8000486:	601a      	str	r2, [r3, #0]
      break;
 8000488:	e033      	b.n	80004f2 <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 800048a:	4b25      	ldr	r3, [pc, #148]	; (8000520 <SystemCoreClockUpdate+0xd4>)
 800048c:	4a25      	ldr	r2, [pc, #148]	; (8000524 <SystemCoreClockUpdate+0xd8>)
 800048e:	601a      	str	r2, [r3, #0]
      break;
 8000490:	e02f      	b.n	80004f2 <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000492:	4b22      	ldr	r3, [pc, #136]	; (800051c <SystemCoreClockUpdate+0xd0>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800049a:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800049c:	4b1f      	ldr	r3, [pc, #124]	; (800051c <SystemCoreClockUpdate+0xd0>)
 800049e:	685b      	ldr	r3, [r3, #4]
 80004a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004a4:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80004a6:	68bb      	ldr	r3, [r7, #8]
 80004a8:	0c9b      	lsrs	r3, r3, #18
 80004aa:	3302      	adds	r3, #2
 80004ac:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d106      	bne.n	80004c2 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	4a1c      	ldr	r2, [pc, #112]	; (8000528 <SystemCoreClockUpdate+0xdc>)
 80004b8:	fb02 f303 	mul.w	r3, r2, r3
 80004bc:	4a18      	ldr	r2, [pc, #96]	; (8000520 <SystemCoreClockUpdate+0xd4>)
 80004be:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80004c0:	e017      	b.n	80004f2 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80004c2:	4b16      	ldr	r3, [pc, #88]	; (800051c <SystemCoreClockUpdate+0xd0>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d006      	beq.n	80004dc <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80004ce:	68bb      	ldr	r3, [r7, #8]
 80004d0:	4a15      	ldr	r2, [pc, #84]	; (8000528 <SystemCoreClockUpdate+0xdc>)
 80004d2:	fb02 f303 	mul.w	r3, r2, r3
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <SystemCoreClockUpdate+0xd4>)
 80004d8:	6013      	str	r3, [r2, #0]
      break;
 80004da:	e00a      	b.n	80004f2 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	4a11      	ldr	r2, [pc, #68]	; (8000524 <SystemCoreClockUpdate+0xd8>)
 80004e0:	fb02 f303 	mul.w	r3, r2, r3
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <SystemCoreClockUpdate+0xd4>)
 80004e6:	6013      	str	r3, [r2, #0]
      break;
 80004e8:	e003      	b.n	80004f2 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <SystemCoreClockUpdate+0xd4>)
 80004ec:	4a0d      	ldr	r2, [pc, #52]	; (8000524 <SystemCoreClockUpdate+0xd8>)
 80004ee:	601a      	str	r2, [r3, #0]
      break;
 80004f0:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <SystemCoreClockUpdate+0xd0>)
 80004f4:	685b      	ldr	r3, [r3, #4]
 80004f6:	091b      	lsrs	r3, r3, #4
 80004f8:	f003 030f 	and.w	r3, r3, #15
 80004fc:	4a0b      	ldr	r2, [pc, #44]	; (800052c <SystemCoreClockUpdate+0xe0>)
 80004fe:	5cd3      	ldrb	r3, [r2, r3]
 8000500:	b2db      	uxtb	r3, r3
 8000502:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <SystemCoreClockUpdate+0xd4>)
 8000506:	681a      	ldr	r2, [r3, #0]
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	fa22 f303 	lsr.w	r3, r2, r3
 800050e:	4a04      	ldr	r2, [pc, #16]	; (8000520 <SystemCoreClockUpdate+0xd4>)
 8000510:	6013      	str	r3, [r2, #0]
}
 8000512:	bf00      	nop
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	bc80      	pop	{r7}
 800051a:	4770      	bx	lr
 800051c:	40021000 	.word	0x40021000
 8000520:	20000004 	.word	0x20000004
 8000524:	007a1200 	.word	0x007a1200
 8000528:	003d0900 	.word	0x003d0900
 800052c:	20000008 	.word	0x20000008

08000530 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000534:	f000 f802 	bl	800053c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]
 8000546:	2300      	movs	r3, #0
 8000548:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800054a:	4b3a      	ldr	r3, [pc, #232]	; (8000634 <SetSysClockTo72+0xf8>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a39      	ldr	r2, [pc, #228]	; (8000634 <SetSysClockTo72+0xf8>)
 8000550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000554:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000556:	4b37      	ldr	r3, [pc, #220]	; (8000634 <SetSysClockTo72+0xf8>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	3301      	adds	r3, #1
 8000564:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000566:	683b      	ldr	r3, [r7, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d103      	bne.n	8000574 <SetSysClockTo72+0x38>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000572:	d1f0      	bne.n	8000556 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <SetSysClockTo72+0xf8>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057c:	2b00      	cmp	r3, #0
 800057e:	d002      	beq.n	8000586 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000580:	2301      	movs	r3, #1
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	e001      	b.n	800058a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000586:	2300      	movs	r3, #0
 8000588:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	2b01      	cmp	r3, #1
 800058e:	d14b      	bne.n	8000628 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000590:	4b29      	ldr	r3, [pc, #164]	; (8000638 <SetSysClockTo72+0xfc>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a28      	ldr	r2, [pc, #160]	; (8000638 <SetSysClockTo72+0xfc>)
 8000596:	f043 0310 	orr.w	r3, r3, #16
 800059a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800059c:	4b26      	ldr	r3, [pc, #152]	; (8000638 <SetSysClockTo72+0xfc>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a25      	ldr	r2, [pc, #148]	; (8000638 <SetSysClockTo72+0xfc>)
 80005a2:	f023 0307 	bic.w	r3, r3, #7
 80005a6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80005a8:	4b23      	ldr	r3, [pc, #140]	; (8000638 <SetSysClockTo72+0xfc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a22      	ldr	r2, [pc, #136]	; (8000638 <SetSysClockTo72+0xfc>)
 80005ae:	f043 0302 	orr.w	r3, r3, #2
 80005b2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	; (8000634 <SetSysClockTo72+0xf8>)
 80005b6:	4a1f      	ldr	r2, [pc, #124]	; (8000634 <SetSysClockTo72+0xf8>)
 80005b8:	685b      	ldr	r3, [r3, #4]
 80005ba:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <SetSysClockTo72+0xf8>)
 80005be:	4a1d      	ldr	r2, [pc, #116]	; (8000634 <SetSysClockTo72+0xf8>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80005c4:	4b1b      	ldr	r3, [pc, #108]	; (8000634 <SetSysClockTo72+0xf8>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	4a1a      	ldr	r2, [pc, #104]	; (8000634 <SetSysClockTo72+0xf8>)
 80005ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005ce:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <SetSysClockTo72+0xf8>)
 80005d2:	685b      	ldr	r3, [r3, #4]
 80005d4:	4a17      	ldr	r2, [pc, #92]	; (8000634 <SetSysClockTo72+0xf8>)
 80005d6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80005da:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80005dc:	4b15      	ldr	r3, [pc, #84]	; (8000634 <SetSysClockTo72+0xf8>)
 80005de:	685b      	ldr	r3, [r3, #4]
 80005e0:	4a14      	ldr	r2, [pc, #80]	; (8000634 <SetSysClockTo72+0xf8>)
 80005e2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80005e6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005e8:	4b12      	ldr	r3, [pc, #72]	; (8000634 <SetSysClockTo72+0xf8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a11      	ldr	r2, [pc, #68]	; (8000634 <SetSysClockTo72+0xf8>)
 80005ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005f2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005f4:	bf00      	nop
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <SetSysClockTo72+0xf8>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f9      	beq.n	80005f6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <SetSysClockTo72+0xf8>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4a0b      	ldr	r2, [pc, #44]	; (8000634 <SetSysClockTo72+0xf8>)
 8000608:	f023 0303 	bic.w	r3, r3, #3
 800060c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <SetSysClockTo72+0xf8>)
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <SetSysClockTo72+0xf8>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800061a:	bf00      	nop
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <SetSysClockTo72+0xf8>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f003 030c 	and.w	r3, r3, #12
 8000624:	2b08      	cmp	r3, #8
 8000626:	d1f9      	bne.n	800061c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000
 8000638:	40022000 	.word	0x40022000

0800063c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b04      	cmp	r3, #4
 8000648:	d106      	bne.n	8000658 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 800064a:	4b09      	ldr	r3, [pc, #36]	; (8000670 <SysTick_CLKSourceConfig+0x34>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a08      	ldr	r2, [pc, #32]	; (8000670 <SysTick_CLKSourceConfig+0x34>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8000656:	e005      	b.n	8000664 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <SysTick_CLKSourceConfig+0x34>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <SysTick_CLKSourceConfig+0x34>)
 800065e:	f023 0304 	bic.w	r3, r3, #4
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	bc80      	pop	{r7}
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e010 	.word	0xe000e010

08000674 <DAC_Init>:
  * @param  DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
  *        contains the configuration information for the specified DAC channel.
  * @retval None
  */
void DAC_Init(uint32_t DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800067e:	2300      	movs	r3, #0
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
/*---------------------------- DAC CR Configuration --------------------------*/
  /* Get the DAC CR value */
  tmpreg1 = DAC->CR;
 8000686:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <DAC_Init+0x60>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	60fb      	str	r3, [r7, #12]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(CR_CLEAR_MASK << DAC_Channel);
 800068c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	fa02 f303 	lsl.w	r3, r2, r3
 8000696:	43db      	mvns	r3, r3
 8000698:	68fa      	ldr	r2, [r7, #12]
 800069a:	4013      	ands	r3, r2
 800069c:	60fb      	str	r3, [r7, #12]
     mask/amplitude for wave generation */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set WAVEx bits according to DAC_WaveGeneration value */
  /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
 80006a8:	683b      	ldr	r3, [r7, #0]
 80006aa:	689b      	ldr	r3, [r3, #8]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80006ac:	431a      	orrs	r2, r3
             DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	68db      	ldr	r3, [r3, #12]
  tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
 80006b2:	4313      	orrs	r3, r2
 80006b4:	60bb      	str	r3, [r7, #8]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << DAC_Channel;
 80006b6:	68ba      	ldr	r2, [r7, #8]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	fa02 f303 	lsl.w	r3, r2, r3
 80006be:	68fa      	ldr	r2, [r7, #12]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	60fb      	str	r3, [r7, #12]
  /* Write to DAC CR */
  DAC->CR = tmpreg1;
 80006c4:	4a03      	ldr	r2, [pc, #12]	; (80006d4 <DAC_Init+0x60>)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	6013      	str	r3, [r2, #0]
}
 80006ca:	bf00      	nop
 80006cc:	3714      	adds	r7, #20
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	40007400 	.word	0x40007400

080006d8 <DAC_Cmd>:
  * @param  NewState: new state of the DAC channel. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_Cmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006e4:	78fb      	ldrb	r3, [r7, #3]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d009      	beq.n	80006fe <DAC_Cmd+0x26>
  {
    /* Enable the selected DAC channel */
    DAC->CR |= (DAC_CR_EN1 << DAC_Channel);
 80006ea:	4b0c      	ldr	r3, [pc, #48]	; (800071c <DAC_Cmd+0x44>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	2101      	movs	r1, #1
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	fa01 f303 	lsl.w	r3, r1, r3
 80006f6:	4909      	ldr	r1, [pc, #36]	; (800071c <DAC_Cmd+0x44>)
 80006f8:	4313      	orrs	r3, r2
 80006fa:	600b      	str	r3, [r1, #0]
  else
  {
    /* Disable the selected DAC channel */
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
  }
}
 80006fc:	e009      	b.n	8000712 <DAC_Cmd+0x3a>
    DAC->CR &= ~(DAC_CR_EN1 << DAC_Channel);
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <DAC_Cmd+0x44>)
 8000700:	681a      	ldr	r2, [r3, #0]
 8000702:	2101      	movs	r1, #1
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43db      	mvns	r3, r3
 800070c:	4903      	ldr	r1, [pc, #12]	; (800071c <DAC_Cmd+0x44>)
 800070e:	4013      	ands	r3, r2
 8000710:	600b      	str	r3, [r1, #0]
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	40007400 	.word	0x40007400

08000720 <DAC_SoftwareTriggerCmd>:
  * @param  NewState: new state of the selected DAC channel software trigger.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DAC_SoftwareTriggerCmd(uint32_t DAC_Channel, FunctionalState NewState)
{
 8000720:	b480      	push	{r7}
 8000722:	b083      	sub	sp, #12
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(DAC_Channel));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d00a      	beq.n	8000748 <DAC_SoftwareTriggerCmd+0x28>
  {
    /* Enable software trigger for the selected DAC channel */
    DAC->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4);
 8000732:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <DAC_SoftwareTriggerCmd+0x48>)
 8000734:	685a      	ldr	r2, [r3, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	091b      	lsrs	r3, r3, #4
 800073a:	2101      	movs	r1, #1
 800073c:	fa01 f303 	lsl.w	r3, r1, r3
 8000740:	4909      	ldr	r1, [pc, #36]	; (8000768 <DAC_SoftwareTriggerCmd+0x48>)
 8000742:	4313      	orrs	r3, r2
 8000744:	604b      	str	r3, [r1, #4]
  else
  {
    /* Disable software trigger for the selected DAC channel */
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
  }
}
 8000746:	e00a      	b.n	800075e <DAC_SoftwareTriggerCmd+0x3e>
    DAC->SWTRIGR &= ~((uint32_t)DAC_SWTRIGR_SWTRIG1 << (DAC_Channel >> 4));
 8000748:	4b07      	ldr	r3, [pc, #28]	; (8000768 <DAC_SoftwareTriggerCmd+0x48>)
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	091b      	lsrs	r3, r3, #4
 8000750:	2101      	movs	r1, #1
 8000752:	fa01 f303 	lsl.w	r3, r1, r3
 8000756:	43db      	mvns	r3, r3
 8000758:	4903      	ldr	r1, [pc, #12]	; (8000768 <DAC_SoftwareTriggerCmd+0x48>)
 800075a:	4013      	ands	r3, r2
 800075c:	604b      	str	r3, [r1, #4]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr
 8000768:	40007400 	.word	0x40007400

0800076c <DAC_SetChannel1Data>:
  *     @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data : Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 800076c:	b480      	push	{r7}
 800076e:	b085      	sub	sp, #20
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 800077c:	4b07      	ldr	r3, [pc, #28]	; (800079c <DAC_SetChannel1Data+0x30>)
 800077e:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 8000780:	68fa      	ldr	r2, [r7, #12]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	3308      	adds	r3, #8
 8000788:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	461a      	mov	r2, r3
 800078e:	887b      	ldrh	r3, [r7, #2]
 8000790:	6013      	str	r3, [r2, #0]
}
 8000792:	bf00      	nop
 8000794:	3714      	adds	r7, #20
 8000796:	46bd      	mov	sp, r7
 8000798:	bc80      	pop	{r7}
 800079a:	4770      	bx	lr
 800079c:	40007400 	.word	0x40007400

080007a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b089      	sub	sp, #36	; 0x24
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80007aa:	2300      	movs	r3, #0
 80007ac:	61fb      	str	r3, [r7, #28]
 80007ae:	2300      	movs	r3, #0
 80007b0:	613b      	str	r3, [r7, #16]
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	2300      	movs	r3, #0
 80007b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	78db      	ldrb	r3, [r3, #3]
 80007c6:	f003 030f 	and.w	r3, r3, #15
 80007ca:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	78db      	ldrb	r3, [r3, #3]
 80007d0:	f003 0310 	and.w	r3, r3, #16
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d005      	beq.n	80007e4 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	789b      	ldrb	r3, [r3, #2]
 80007dc:	461a      	mov	r2, r3
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d044      	beq.n	8000878 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	61bb      	str	r3, [r7, #24]
 80007f8:	e038      	b.n	800086c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80007fa:	2201      	movs	r2, #1
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000802:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	461a      	mov	r2, r3
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	429a      	cmp	r2, r3
 8000816:	d126      	bne.n	8000866 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	009b      	lsls	r3, r3, #2
 800081c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800081e:	220f      	movs	r2, #15
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000828:	68bb      	ldr	r3, [r7, #8]
 800082a:	43db      	mvns	r3, r3
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	4013      	ands	r3, r2
 8000830:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	fa02 f303 	lsl.w	r3, r2, r3
 800083a:	697a      	ldr	r2, [r7, #20]
 800083c:	4313      	orrs	r3, r2
 800083e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	78db      	ldrb	r3, [r3, #3]
 8000844:	2b28      	cmp	r3, #40	; 0x28
 8000846:	d105      	bne.n	8000854 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000848:	2201      	movs	r2, #1
 800084a:	69bb      	ldr	r3, [r7, #24]
 800084c:	409a      	lsls	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	615a      	str	r2, [r3, #20]
 8000852:	e008      	b.n	8000866 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000854:	683b      	ldr	r3, [r7, #0]
 8000856:	78db      	ldrb	r3, [r3, #3]
 8000858:	2b48      	cmp	r3, #72	; 0x48
 800085a:	d104      	bne.n	8000866 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800085c:	2201      	movs	r2, #1
 800085e:	69bb      	ldr	r3, [r7, #24]
 8000860:	409a      	lsls	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	3301      	adds	r3, #1
 800086a:	61bb      	str	r3, [r7, #24]
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	2b07      	cmp	r3, #7
 8000870:	d9c3      	bls.n	80007fa <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	2bff      	cmp	r3, #255	; 0xff
 800087e:	d946      	bls.n	800090e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	e03a      	b.n	8000902 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800088c:	69bb      	ldr	r3, [r7, #24]
 800088e:	3308      	adds	r3, #8
 8000890:	2201      	movs	r2, #1
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	881b      	ldrh	r3, [r3, #0]
 800089c:	461a      	mov	r2, r3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80008a4:	693a      	ldr	r2, [r7, #16]
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d127      	bne.n	80008fc <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80008b2:	220f      	movs	r2, #15
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ba:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	43db      	mvns	r3, r3
 80008c0:	697a      	ldr	r2, [r7, #20]
 80008c2:	4013      	ands	r3, r2
 80008c4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80008c6:	69fa      	ldr	r2, [r7, #28]
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	697a      	ldr	r2, [r7, #20]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	78db      	ldrb	r3, [r3, #3]
 80008d8:	2b28      	cmp	r3, #40	; 0x28
 80008da:	d105      	bne.n	80008e8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	3308      	adds	r3, #8
 80008e0:	2201      	movs	r2, #1
 80008e2:	409a      	lsls	r2, r3
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	78db      	ldrb	r3, [r3, #3]
 80008ec:	2b48      	cmp	r3, #72	; 0x48
 80008ee:	d105      	bne.n	80008fc <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	3308      	adds	r3, #8
 80008f4:	2201      	movs	r2, #1
 80008f6:	409a      	lsls	r2, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80008fc:	69bb      	ldr	r3, [r7, #24]
 80008fe:	3301      	adds	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
 8000902:	69bb      	ldr	r3, [r7, #24]
 8000904:	2b07      	cmp	r3, #7
 8000906:	d9c1      	bls.n	800088c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	605a      	str	r2, [r3, #4]
  }
}
 800090e:	bf00      	nop
 8000910:	3724      	adds	r7, #36	; 0x24
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000918:	b480      	push	{r7}
 800091a:	b085      	sub	sp, #20
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000924:	2300      	movs	r3, #0
 8000926:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	887b      	ldrh	r3, [r7, #2]
 800092e:	4013      	ands	r3, r2
 8000930:	2b00      	cmp	r3, #0
 8000932:	d002      	beq.n	800093a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000934:	2301      	movs	r3, #1
 8000936:	73fb      	strb	r3, [r7, #15]
 8000938:	e001      	b.n	800093e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800093e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000940:	4618      	mov	r0, r3
 8000942:	3714      	adds	r7, #20
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr

0800094a <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800094a:	b480      	push	{r7}
 800094c:	b083      	sub	sp, #12
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
 8000952:	460b      	mov	r3, r1
 8000954:	807b      	strh	r3, [r7, #2]
 8000956:	4613      	mov	r3, r2
 8000958:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800095a:	787b      	ldrb	r3, [r7, #1]
 800095c:	2b00      	cmp	r3, #0
 800095e:	d003      	beq.n	8000968 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000960:	887a      	ldrh	r2, [r7, #2]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000966:	e002      	b.n	800096e <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8000968:	887a      	ldrh	r2, [r7, #2]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	615a      	str	r2, [r3, #20]
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000978:	b480      	push	{r7}
 800097a:	b087      	sub	sp, #28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
 800098c:	2300      	movs	r3, #0
 800098e:	617b      	str	r3, [r7, #20]
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	2b00      	cmp	r3, #0
 8000998:	da03      	bge.n	80009a2 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 800099a:	4b2e      	ldr	r3, [pc, #184]	; (8000a54 <GPIO_PinRemapConfig+0xdc>)
 800099c:	69db      	ldr	r3, [r3, #28]
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e002      	b.n	80009a8 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80009a2:	4b2c      	ldr	r3, [pc, #176]	; (8000a54 <GPIO_PinRemapConfig+0xdc>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	0c1b      	lsrs	r3, r3, #16
 80009ac:	f003 030f 	and.w	r3, r3, #15
 80009b0:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80009be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80009c2:	d10a      	bne.n	80009da <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80009ca:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 80009cc:	4b21      	ldr	r3, [pc, #132]	; (8000a54 <GPIO_PinRemapConfig+0xdc>)
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	4a20      	ldr	r2, [pc, #128]	; (8000a54 <GPIO_PinRemapConfig+0xdc>)
 80009d2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80009d6:	6053      	str	r3, [r2, #4]
 80009d8:	e021      	b.n	8000a1e <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d00e      	beq.n	8000a02 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80009e4:	2203      	movs	r2, #3
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	43db      	mvns	r3, r3
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	4013      	ands	r3, r2
 80009f6:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	e00d      	b.n	8000a1e <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	0d5b      	lsrs	r3, r3, #21
 8000a06:	011b      	lsls	r3, r3, #4
 8000a08:	693a      	ldr	r2, [r7, #16]
 8000a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0e:	43db      	mvns	r3, r3
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	4013      	ands	r3, r2
 8000a14:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000a1c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000a1e:	78fb      	ldrb	r3, [r7, #3]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d008      	beq.n	8000a36 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	0d5b      	lsrs	r3, r3, #21
 8000a28:	011b      	lsls	r3, r3, #4
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	da03      	bge.n	8000a44 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000a3c:	4a05      	ldr	r2, [pc, #20]	; (8000a54 <GPIO_PinRemapConfig+0xdc>)
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8000a42:	e002      	b.n	8000a4a <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8000a44:	4a03      	ldr	r2, [pc, #12]	; (8000a54 <GPIO_PinRemapConfig+0xdc>)
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	6053      	str	r3, [r2, #4]
}
 8000a4a:	bf00      	nop
 8000a4c:	371c      	adds	r7, #28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bc80      	pop	{r7}
 8000a52:	4770      	bx	lr
 8000a54:	40010000 	.word	0x40010000

08000a58 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000a60:	4a03      	ldr	r2, [pc, #12]	; (8000a70 <RCC_USBCLKConfig+0x18>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	6013      	str	r3, [r2, #0]
}
 8000a66:	bf00      	nop
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bc80      	pop	{r7}
 8000a6e:	4770      	bx	lr
 8000a70:	424200d8 	.word	0x424200d8

08000a74 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <RCC_ADCCLKConfig+0x34>)
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a8c:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a96:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <RCC_ADCCLKConfig+0x34>)
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	6053      	str	r3, [r2, #4]
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <RCC_LSEConfig+0x3c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <RCC_LSEConfig+0x3c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d002      	beq.n	8000ace <RCC_LSEConfig+0x22>
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d004      	beq.n	8000ad6 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8000acc:	e007      	b.n	8000ade <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <RCC_LSEConfig+0x3c>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	701a      	strb	r2, [r3, #0]
      break;
 8000ad4:	e003      	b.n	8000ade <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <RCC_LSEConfig+0x3c>)
 8000ad8:	2205      	movs	r2, #5
 8000ada:	701a      	strb	r2, [r3, #0]
      break;            
 8000adc:	bf00      	nop
  }
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	40021020 	.word	0x40021020

08000aec <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000af4:	4b05      	ldr	r3, [pc, #20]	; (8000b0c <RCC_RTCCLKConfig+0x20>)
 8000af6:	6a1a      	ldr	r2, [r3, #32]
 8000af8:	4904      	ldr	r1, [pc, #16]	; (8000b0c <RCC_RTCCLKConfig+0x20>)
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	620b      	str	r3, [r1, #32]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bc80      	pop	{r7}
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40021000 	.word	0x40021000

08000b10 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000b1a:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <RCC_RTCCLKCmd+0x1c>)
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	370c      	adds	r7, #12
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	4242043c 	.word	0x4242043c

08000b30 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b087      	sub	sp, #28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	613b      	str	r3, [r7, #16]
 8000b40:	2300      	movs	r3, #0
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000b48:	4b4f      	ldr	r3, [pc, #316]	; (8000c88 <RCC_GetClocksFreq+0x158>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f003 030c 	and.w	r3, r3, #12
 8000b50:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	2b08      	cmp	r3, #8
 8000b56:	d011      	beq.n	8000b7c <RCC_GetClocksFreq+0x4c>
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	2b08      	cmp	r3, #8
 8000b5c:	d83a      	bhi.n	8000bd4 <RCC_GetClocksFreq+0xa4>
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d003      	beq.n	8000b6c <RCC_GetClocksFreq+0x3c>
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	2b04      	cmp	r3, #4
 8000b68:	d004      	beq.n	8000b74 <RCC_GetClocksFreq+0x44>
 8000b6a:	e033      	b.n	8000bd4 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a47      	ldr	r2, [pc, #284]	; (8000c8c <RCC_GetClocksFreq+0x15c>)
 8000b70:	601a      	str	r2, [r3, #0]
      break;
 8000b72:	e033      	b.n	8000bdc <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a45      	ldr	r2, [pc, #276]	; (8000c8c <RCC_GetClocksFreq+0x15c>)
 8000b78:	601a      	str	r2, [r3, #0]
      break;
 8000b7a:	e02f      	b.n	8000bdc <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000b7c:	4b42      	ldr	r3, [pc, #264]	; (8000c88 <RCC_GetClocksFreq+0x158>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b84:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000b86:	4b40      	ldr	r3, [pc, #256]	; (8000c88 <RCC_GetClocksFreq+0x158>)
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b8e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000b90:	693b      	ldr	r3, [r7, #16]
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3302      	adds	r3, #2
 8000b96:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d106      	bne.n	8000bac <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000b9e:	693b      	ldr	r3, [r7, #16]
 8000ba0:	4a3b      	ldr	r2, [pc, #236]	; (8000c90 <RCC_GetClocksFreq+0x160>)
 8000ba2:	fb03 f202 	mul.w	r2, r3, r2
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000baa:	e017      	b.n	8000bdc <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000bac:	4b36      	ldr	r3, [pc, #216]	; (8000c88 <RCC_GetClocksFreq+0x158>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	4a35      	ldr	r2, [pc, #212]	; (8000c90 <RCC_GetClocksFreq+0x160>)
 8000bbc:	fb03 f202 	mul.w	r2, r3, r2
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	601a      	str	r2, [r3, #0]
      break;
 8000bc4:	e00a      	b.n	8000bdc <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	4a30      	ldr	r2, [pc, #192]	; (8000c8c <RCC_GetClocksFreq+0x15c>)
 8000bca:	fb03 f202 	mul.w	r2, r3, r2
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	601a      	str	r2, [r3, #0]
      break;
 8000bd2:	e003      	b.n	8000bdc <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a2d      	ldr	r2, [pc, #180]	; (8000c8c <RCC_GetClocksFreq+0x15c>)
 8000bd8:	601a      	str	r2, [r3, #0]
      break;
 8000bda:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000bdc:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <RCC_GetClocksFreq+0x158>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000be4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	091b      	lsrs	r3, r3, #4
 8000bea:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000bec:	4a29      	ldr	r2, [pc, #164]	; (8000c94 <RCC_GetClocksFreq+0x164>)
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	40da      	lsrs	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <RCC_GetClocksFreq+0x158>)
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c0c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000c14:	4a1f      	ldr	r2, [pc, #124]	; (8000c94 <RCC_GetClocksFreq+0x164>)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	4413      	add	r3, r2
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	40da      	lsrs	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <RCC_GetClocksFreq+0x158>)
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c34:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	0adb      	lsrs	r3, r3, #11
 8000c3a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000c3c:	4a15      	ldr	r2, [pc, #84]	; (8000c94 <RCC_GetClocksFreq+0x164>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	4413      	add	r3, r2
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	685a      	ldr	r2, [r3, #4]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	40da      	lsrs	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <RCC_GetClocksFreq+0x158>)
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c5c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	0b9b      	lsrs	r3, r3, #14
 8000c62:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000c64:	4a0c      	ldr	r2, [pc, #48]	; (8000c98 <RCC_GetClocksFreq+0x168>)
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	4413      	add	r3, r2
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68da      	ldr	r2, [r3, #12]
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	611a      	str	r2, [r3, #16]
}
 8000c7e:	bf00      	nop
 8000c80:	371c      	adds	r7, #28
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	40021000 	.word	0x40021000
 8000c8c:	007a1200 	.word	0x007a1200
 8000c90:	003d0900 	.word	0x003d0900
 8000c94:	20000018 	.word	0x20000018
 8000c98:	20000028 	.word	0x20000028

08000c9c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d006      	beq.n	8000cbc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <RCC_AHBPeriphClockCmd+0x38>)
 8000cb0:	695a      	ldr	r2, [r3, #20]
 8000cb2:	4908      	ldr	r1, [pc, #32]	; (8000cd4 <RCC_AHBPeriphClockCmd+0x38>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000cba:	e006      	b.n	8000cca <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <RCC_AHBPeriphClockCmd+0x38>)
 8000cbe:	695a      	ldr	r2, [r3, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	4903      	ldr	r1, [pc, #12]	; (8000cd4 <RCC_AHBPeriphClockCmd+0x38>)
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	614b      	str	r3, [r1, #20]
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cea:	4b09      	ldr	r3, [pc, #36]	; (8000d10 <RCC_APB2PeriphClockCmd+0x38>)
 8000cec:	699a      	ldr	r2, [r3, #24]
 8000cee:	4908      	ldr	r1, [pc, #32]	; (8000d10 <RCC_APB2PeriphClockCmd+0x38>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000cf6:	e006      	b.n	8000d06 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <RCC_APB2PeriphClockCmd+0x38>)
 8000cfa:	699a      	ldr	r2, [r3, #24]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	43db      	mvns	r3, r3
 8000d00:	4903      	ldr	r1, [pc, #12]	; (8000d10 <RCC_APB2PeriphClockCmd+0x38>)
 8000d02:	4013      	ands	r3, r2
 8000d04:	618b      	str	r3, [r1, #24]
}
 8000d06:	bf00      	nop
 8000d08:	370c      	adds	r7, #12
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40021000 	.word	0x40021000

08000d14 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d20:	78fb      	ldrb	r3, [r7, #3]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d006      	beq.n	8000d34 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <RCC_APB1PeriphClockCmd+0x38>)
 8000d28:	69da      	ldr	r2, [r3, #28]
 8000d2a:	4908      	ldr	r1, [pc, #32]	; (8000d4c <RCC_APB1PeriphClockCmd+0x38>)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000d32:	e006      	b.n	8000d42 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <RCC_APB1PeriphClockCmd+0x38>)
 8000d36:	69da      	ldr	r2, [r3, #28]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	4903      	ldr	r1, [pc, #12]	; (8000d4c <RCC_APB1PeriphClockCmd+0x38>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	61cb      	str	r3, [r1, #28]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bc80      	pop	{r7}
 8000d4a:	4770      	bx	lr
 8000d4c:	40021000 	.word	0x40021000

08000d50 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b083      	sub	sp, #12
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	4603      	mov	r3, r0
 8000d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8000d5a:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <RCC_MCOConfig+0x1c>)
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	7013      	strb	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40021007 	.word	0x40021007

08000d70 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	887a      	ldrh	r2, [r7, #2]
 8000d80:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000d98:	b29b      	uxth	r3, r3
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bc80      	pop	{r7}
 8000da2:	4770      	bx	lr

08000da4 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000db0:	b29b      	uxth	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr

08000dbc <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	81bb      	strh	r3, [r7, #12]
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	8a1b      	ldrh	r3, [r3, #16]
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	887b      	ldrh	r3, [r7, #2]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	899b      	ldrh	r3, [r3, #12]
 8000de4:	b29a      	uxth	r2, r3
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	4013      	ands	r3, r2
 8000dea:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000dec:	89bb      	ldrh	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <TIM_GetITStatus+0x42>
 8000df2:	897b      	ldrh	r3, [r7, #10]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d002      	beq.n	8000dfe <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e001      	b.n	8000e02 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3714      	adds	r7, #20
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bc80      	pop	{r7}
 8000e0c:	4770      	bx	lr

08000e0e <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	b083      	sub	sp, #12
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
 8000e16:	460b      	mov	r3, r1
 8000e18:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	821a      	strh	r2, [r3, #16]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr

08000e2e <main>:
#endif



int main(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0

  // SYS CLK Init 
  BSP_RCC_Init();
 8000e32:	f7ff f9d5 	bl	80001e0 <BSP_RCC_Init>

  /** Config SWJ Reamp 
    *   If using the PA15、PA14、PA13、PB4、PB3 for Remapping Pin, these Clock Must be Config before SWJ REMAP config Function!
    */
  sys_SWJ_REMAP_Config(SWJ_ENABLE);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff faa6 	bl	8000388 <sys_SWJ_REMAP_Config>

  BSP_DAC_init();
 8000e3c:	f7ff f998 	bl	8000170 <BSP_DAC_init>

  while (1)
  {
    BSP_DAC_SetChVal();
 8000e40:	f7ff f9be 	bl	80001c0 <BSP_DAC_SetChVal>
 8000e44:	e7fc      	b.n	8000e40 <main+0x12>

08000e46 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000e46:	b480      	push	{r7}
 8000e48:	af00      	add	r7, sp, #0
}
 8000e4a:	bf00      	nop
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bc80      	pop	{r7}
 8000e50:	4770      	bx	lr

08000e52 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bc80      	pop	{r7}
 8000e8c:	4770      	bx	lr

08000e8e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
}
 8000e92:	bf00      	nop
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
	...

08000e9c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e9c:	480d      	ldr	r0, [pc, #52]	; (8000ed4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e9e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea0:	f7ff faa0 	bl	80003e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	; (8000edc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <LoopForever+0xe>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	; (8000ee8 <LoopForever+0x16>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000eca:	f000 f811 	bl	8000ef0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ece:	f7ff ffae 	bl	8000e2e <main>

08000ed2 <LoopForever>:

LoopForever:
  b LoopForever
 8000ed2:	e7fe      	b.n	8000ed2 <LoopForever>
  ldr   r0, =_estack
 8000ed4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000ee0:	08000f58 	.word	0x08000f58
  ldr r2, =_sbss
 8000ee4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000ee8:	2000006c 	.word	0x2000006c

08000eec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC1_2_IRQHandler>
	...

08000ef0 <__libc_init_array>:
 8000ef0:	b570      	push	{r4, r5, r6, lr}
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4d0c      	ldr	r5, [pc, #48]	; (8000f28 <__libc_init_array+0x38>)
 8000ef6:	4c0d      	ldr	r4, [pc, #52]	; (8000f2c <__libc_init_array+0x3c>)
 8000ef8:	1b64      	subs	r4, r4, r5
 8000efa:	10a4      	asrs	r4, r4, #2
 8000efc:	42a6      	cmp	r6, r4
 8000efe:	d109      	bne.n	8000f14 <__libc_init_array+0x24>
 8000f00:	f000 f81a 	bl	8000f38 <_init>
 8000f04:	2600      	movs	r6, #0
 8000f06:	4d0a      	ldr	r5, [pc, #40]	; (8000f30 <__libc_init_array+0x40>)
 8000f08:	4c0a      	ldr	r4, [pc, #40]	; (8000f34 <__libc_init_array+0x44>)
 8000f0a:	1b64      	subs	r4, r4, r5
 8000f0c:	10a4      	asrs	r4, r4, #2
 8000f0e:	42a6      	cmp	r6, r4
 8000f10:	d105      	bne.n	8000f1e <__libc_init_array+0x2e>
 8000f12:	bd70      	pop	{r4, r5, r6, pc}
 8000f14:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f18:	4798      	blx	r3
 8000f1a:	3601      	adds	r6, #1
 8000f1c:	e7ee      	b.n	8000efc <__libc_init_array+0xc>
 8000f1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f22:	4798      	blx	r3
 8000f24:	3601      	adds	r6, #1
 8000f26:	e7f2      	b.n	8000f0e <__libc_init_array+0x1e>
 8000f28:	08000f50 	.word	0x08000f50
 8000f2c:	08000f50 	.word	0x08000f50
 8000f30:	08000f50 	.word	0x08000f50
 8000f34:	08000f54 	.word	0x08000f54

08000f38 <_init>:
 8000f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f3a:	bf00      	nop
 8000f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3e:	bc08      	pop	{r3}
 8000f40:	469e      	mov	lr, r3
 8000f42:	4770      	bx	lr

08000f44 <_fini>:
 8000f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f46:	bf00      	nop
 8000f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f4a:	bc08      	pop	{r3}
 8000f4c:	469e      	mov	lr, r3
 8000f4e:	4770      	bx	lr
