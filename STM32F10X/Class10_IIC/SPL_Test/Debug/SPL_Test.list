
SPL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014fc  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800162c  0800162c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800162c  0800162c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  0800162c  0800162c  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800162c  0800162c  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800162c  0800162c  0001162c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001630  08001630  00011630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  2000002c  08001660  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000007c  08001660  0002007c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007481  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001806  00000000  00000000  000274d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  00028ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000878  00000000  00000000  00029650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003a27  00000000  00000000  00029ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000953d  00000000  00000000  0002d8ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005557f  00000000  00000000  00036e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008c3ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b8  00000000  00000000  0008c3fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001614 	.word	0x08001614

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08001614 	.word	0x08001614

08000170 <BSP_GPIO_SetCfg>:
  *     @arg GPIO_Speed_2MHz
  *     @arg GPIO_Speed_50MHz
  * @retval None
  */
void BSP_GPIO_SetCfg(GPIO_TypeDef *gp, uint16_t index,GPIOSpeed_TypeDef speed, GPIOMode_TypeDef mode)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4603      	mov	r3, r0
 8000180:	807b      	strh	r3, [r7, #2]
 8000182:	460b      	mov	r3, r1
 8000184:	707b      	strb	r3, [r7, #1]
 8000186:	4613      	mov	r3, r2
 8000188:	703b      	strb	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = index;
 800018a:	887b      	ldrh	r3, [r7, #2]
 800018c:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Speed = speed;
 800018e:	787b      	ldrb	r3, [r7, #1]
 8000190:	73bb      	strb	r3, [r7, #14]
    GPIO_InitStructure.GPIO_Mode = mode;
 8000192:	783b      	ldrb	r3, [r7, #0]
 8000194:	73fb      	strb	r3, [r7, #15]
    GPIO_Init(gp, &GPIO_InitStructure);
 8000196:	f107 030c 	add.w	r3, r7, #12
 800019a:	4619      	mov	r1, r3
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f000 fd55 	bl	8000c4c <GPIO_Init>

}
 80001a2:	bf00      	nop
 80001a4:	3710      	adds	r7, #16
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}

080001aa <BSP_I2C_Init>:
#define I2C_ACK_ENABLE         1
#define I2C_ACK_DISABLE        0


void BSP_I2C_Init(I2C_TypeDef *I2Cx)
{
 80001aa:	b580      	push	{r7, lr}
 80001ac:	b082      	sub	sp, #8
 80001ae:	af00      	add	r7, sp, #0
 80001b0:	6078      	str	r0, [r7, #4]

    BSP_I2C_ClkEn(I2Cx);
 80001b2:	6878      	ldr	r0, [r7, #4]
 80001b4:	f000 f812 	bl	80001dc <BSP_I2C_ClkEn>
    BSP_I2C_IOCfg(I2Cx);
 80001b8:	6878      	ldr	r0, [r7, #4]
 80001ba:	f000 f835 	bl	8000228 <BSP_I2C_IOCfg>

    I2C_Cmd(I2Cx,DISABLE);
 80001be:	2100      	movs	r1, #0
 80001c0:	6878      	ldr	r0, [r7, #4]
 80001c2:	f000 ff61 	bl	8001088 <I2C_Cmd>

    BSP_I2C_ModeCfg(I2Cx);
 80001c6:	6878      	ldr	r0, [r7, #4]
 80001c8:	f000 f86c 	bl	80002a4 <BSP_I2C_ModeCfg>

    I2C_Cmd(I2Cx,ENABLE);
 80001cc:	2101      	movs	r1, #1
 80001ce:	6878      	ldr	r0, [r7, #4]
 80001d0:	f000 ff5a 	bl	8001088 <I2C_Cmd>
}
 80001d4:	bf00      	nop
 80001d6:	3708      	adds	r7, #8
 80001d8:	46bd      	mov	sp, r7
 80001da:	bd80      	pop	{r7, pc}

080001dc <BSP_I2C_ClkEn>:


void BSP_I2C_ClkEn(I2C_TypeDef *I2Cx)
{
 80001dc:	b480      	push	{r7}
 80001de:	b083      	sub	sp, #12
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)I2Cx)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	4a0d      	ldr	r2, [pc, #52]	; (800021c <BSP_I2C_ClkEn+0x40>)
 80001e8:	4293      	cmp	r3, r2
 80001ea:	d003      	beq.n	80001f4 <BSP_I2C_ClkEn+0x18>
 80001ec:	4a0c      	ldr	r2, [pc, #48]	; (8000220 <BSP_I2C_ClkEn+0x44>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d007      	beq.n	8000202 <BSP_I2C_ClkEn+0x26>
        break;
    case (uint32_t)I2C2:
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
        break;
    default:
        break;
 80001f2:	e00d      	b.n	8000210 <BSP_I2C_ClkEn+0x34>
        RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80001f4:	4b0b      	ldr	r3, [pc, #44]	; (8000224 <BSP_I2C_ClkEn+0x48>)
 80001f6:	69db      	ldr	r3, [r3, #28]
 80001f8:	4a0a      	ldr	r2, [pc, #40]	; (8000224 <BSP_I2C_ClkEn+0x48>)
 80001fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80001fe:	61d3      	str	r3, [r2, #28]
        break;
 8000200:	e006      	b.n	8000210 <BSP_I2C_ClkEn+0x34>
        RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000202:	4b08      	ldr	r3, [pc, #32]	; (8000224 <BSP_I2C_ClkEn+0x48>)
 8000204:	69db      	ldr	r3, [r3, #28]
 8000206:	4a07      	ldr	r2, [pc, #28]	; (8000224 <BSP_I2C_ClkEn+0x48>)
 8000208:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800020c:	61d3      	str	r3, [r2, #28]
        break;
 800020e:	bf00      	nop
    }
}
 8000210:	bf00      	nop
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40005400 	.word	0x40005400
 8000220:	40005800 	.word	0x40005800
 8000224:	40021000 	.word	0x40021000

08000228 <BSP_I2C_IOCfg>:


void BSP_I2C_IOCfg(I2C_TypeDef *I2Cx)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)I2Cx)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4a19      	ldr	r2, [pc, #100]	; (8000298 <BSP_I2C_IOCfg+0x70>)
 8000234:	4293      	cmp	r3, r2
 8000236:	d003      	beq.n	8000240 <BSP_I2C_IOCfg+0x18>
 8000238:	4a18      	ldr	r2, [pc, #96]	; (800029c <BSP_I2C_IOCfg+0x74>)
 800023a:	4293      	cmp	r3, r2
 800023c:	d015      	beq.n	800026a <BSP_I2C_IOCfg+0x42>

        BSP_GPIO_SetCfg(GPIOB, GPIO_Pin_10 | GPIO_Pin_11, GPIO_Speed_50MHz, GPIO_Mode_AF_OD);
    }
        break;
    default:
        break;
 800023e:	e026      	b.n	800028e <BSP_I2C_IOCfg+0x66>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
 8000240:	2101      	movs	r1, #1
 8000242:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000246:	f001 f8cb 	bl	80013e0 <RCC_APB1PeriphResetCmd>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
 800024a:	2100      	movs	r1, #0
 800024c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000250:	f001 f8c6 	bl	80013e0 <RCC_APB1PeriphResetCmd>
        GPIO_PinRemapConfig(GPIO_Remap_I2C1, DISABLE);
 8000254:	2100      	movs	r1, #0
 8000256:	2002      	movs	r0, #2
 8000258:	f000 fde4 	bl	8000e24 <GPIO_PinRemapConfig>
        BSP_GPIO_SetCfg(GPIOB, GPIO_Pin_6 | GPIO_Pin_7, GPIO_Speed_50MHz, GPIO_Mode_AF_OD);
 800025c:	231c      	movs	r3, #28
 800025e:	2203      	movs	r2, #3
 8000260:	21c0      	movs	r1, #192	; 0xc0
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <BSP_I2C_IOCfg+0x78>)
 8000264:	f7ff ff84 	bl	8000170 <BSP_GPIO_SetCfg>
        break;
 8000268:	e011      	b.n	800028e <BSP_I2C_IOCfg+0x66>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, ENABLE);
 800026a:	2101      	movs	r1, #1
 800026c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000270:	f001 f8b6 	bl	80013e0 <RCC_APB1PeriphResetCmd>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C2, DISABLE);
 8000274:	2100      	movs	r1, #0
 8000276:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800027a:	f001 f8b1 	bl	80013e0 <RCC_APB1PeriphResetCmd>
        BSP_GPIO_SetCfg(GPIOB, GPIO_Pin_10 | GPIO_Pin_11, GPIO_Speed_50MHz, GPIO_Mode_AF_OD);
 800027e:	231c      	movs	r3, #28
 8000280:	2203      	movs	r2, #3
 8000282:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000286:	4806      	ldr	r0, [pc, #24]	; (80002a0 <BSP_I2C_IOCfg+0x78>)
 8000288:	f7ff ff72 	bl	8000170 <BSP_GPIO_SetCfg>
        break;
 800028c:	bf00      	nop
    }
}
 800028e:	bf00      	nop
 8000290:	3708      	adds	r7, #8
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40005400 	.word	0x40005400
 800029c:	40005800 	.word	0x40005800
 80002a0:	40010c00 	.word	0x40010c00

080002a4 <BSP_I2C_ModeCfg>:


void BSP_I2C_ModeCfg(I2C_TypeDef *I2Cx)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
    I2C_InitTypeDef I2C_InitStruct;

    switch ((uint32_t)I2Cx)
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	4a1b      	ldr	r2, [pc, #108]	; (800031c <BSP_I2C_ModeCfg+0x78>)
 80002b0:	4293      	cmp	r3, r2
 80002b2:	d003      	beq.n	80002bc <BSP_I2C_ModeCfg+0x18>
 80002b4:	4a1a      	ldr	r2, [pc, #104]	; (8000320 <BSP_I2C_ModeCfg+0x7c>)
 80002b6:	4293      	cmp	r3, r2
 80002b8:	d016      	beq.n	80002e8 <BSP_I2C_ModeCfg+0x44>
            /* Initialize I2C */
            I2C_Init(I2C2, &I2C_InitStruct);
        }
        break;
    default:
        break;
 80002ba:	e02b      	b.n	8000314 <BSP_I2C_ModeCfg+0x70>
            I2C_InitStruct.I2C_ClockSpeed = TM_I2C_CLOCK_STANDARD;
 80002bc:	4b19      	ldr	r3, [pc, #100]	; (8000324 <BSP_I2C_ModeCfg+0x80>)
 80002be:	60bb      	str	r3, [r7, #8]
            I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80002c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002c4:	82bb      	strh	r3, [r7, #20]
            I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 80002c6:	2300      	movs	r3, #0
 80002c8:	81bb      	strh	r3, [r7, #12]
            I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 80002ca:	2300      	movs	r3, #0
 80002cc:	823b      	strh	r3, [r7, #16]
            I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 80002ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002d2:	827b      	strh	r3, [r7, #18]
            I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 80002d4:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 80002d8:	81fb      	strh	r3, [r7, #14]
            I2C_Init(I2C1, &I2C_InitStruct);
 80002da:	f107 0308 	add.w	r3, r7, #8
 80002de:	4619      	mov	r1, r3
 80002e0:	480e      	ldr	r0, [pc, #56]	; (800031c <BSP_I2C_ModeCfg+0x78>)
 80002e2:	f000 fe0f 	bl	8000f04 <I2C_Init>
        break;
 80002e6:	e015      	b.n	8000314 <BSP_I2C_ModeCfg+0x70>
            I2C_InitStruct.I2C_ClockSpeed = TM_I2C_CLOCK_STANDARD;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <BSP_I2C_ModeCfg+0x80>)
 80002ea:	60bb      	str	r3, [r7, #8]
            I2C_InitStruct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 80002ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002f0:	82bb      	strh	r3, [r7, #20]
            I2C_InitStruct.I2C_Mode = I2C_Mode_I2C;
 80002f2:	2300      	movs	r3, #0
 80002f4:	81bb      	strh	r3, [r7, #12]
            I2C_InitStruct.I2C_OwnAddress1 = 0x00;
 80002f6:	2300      	movs	r3, #0
 80002f8:	823b      	strh	r3, [r7, #16]
            I2C_InitStruct.I2C_Ack = I2C_Ack_Enable;
 80002fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002fe:	827b      	strh	r3, [r7, #18]
            I2C_InitStruct.I2C_DutyCycle = I2C_DutyCycle_2;
 8000300:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000304:	81fb      	strh	r3, [r7, #14]
            I2C_Init(I2C2, &I2C_InitStruct);
 8000306:	f107 0308 	add.w	r3, r7, #8
 800030a:	4619      	mov	r1, r3
 800030c:	4804      	ldr	r0, [pc, #16]	; (8000320 <BSP_I2C_ModeCfg+0x7c>)
 800030e:	f000 fdf9 	bl	8000f04 <I2C_Init>
        break;
 8000312:	bf00      	nop
    }
}
 8000314:	bf00      	nop
 8000316:	3718      	adds	r7, #24
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40005400 	.word	0x40005400
 8000320:	40005800 	.word	0x40005800
 8000324:	000186a0 	.word	0x000186a0

08000328 <BSP_I2C_IsDeviceConnected>:
	}
	TM_I2C_Stop(I2Cx);
}


uint8_t BSP_I2C_IsDeviceConnected(I2C_TypeDef* I2Cx, uint8_t address) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b084      	sub	sp, #16
 800032c:	af00      	add	r7, sp, #0
 800032e:	6078      	str	r0, [r7, #4]
 8000330:	460b      	mov	r3, r1
 8000332:	70fb      	strb	r3, [r7, #3]
	uint8_t connected = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	73fb      	strb	r3, [r7, #15]
	/* Try to start, function will return 0 in case device will send ACK */
	if (!TM_I2C_Start(I2Cx, address, I2C_TRANSMITTER_MODE, I2C_ACK_ENABLE)) {
 8000338:	78f9      	ldrb	r1, [r7, #3]
 800033a:	2301      	movs	r3, #1
 800033c:	2200      	movs	r2, #0
 800033e:	6878      	ldr	r0, [r7, #4]
 8000340:	f000 f80e 	bl	8000360 <TM_I2C_Start>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d101      	bne.n	800034e <BSP_I2C_IsDeviceConnected+0x26>
		connected = 1;
 800034a:	2301      	movs	r3, #1
 800034c:	73fb      	strb	r3, [r7, #15]
	}
	
	/* STOP I2C */
	TM_I2C_Stop(I2Cx);
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f000 f88a 	bl	8000468 <TM_I2C_Stop>
	
	/* Return status */
	return connected;
 8000354:	7bfb      	ldrb	r3, [r7, #15]
}
 8000356:	4618      	mov	r0, r3
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <TM_I2C_Start>:




/* Private functions */
int16_t TM_I2C_Start(I2C_TypeDef* I2Cx, uint8_t address, uint8_t direction, uint8_t ack) {
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	4608      	mov	r0, r1
 800036a:	4611      	mov	r1, r2
 800036c:	461a      	mov	r2, r3
 800036e:	4603      	mov	r3, r0
 8000370:	70fb      	strb	r3, [r7, #3]
 8000372:	460b      	mov	r3, r1
 8000374:	70bb      	strb	r3, [r7, #2]
 8000376:	4613      	mov	r3, r2
 8000378:	707b      	strb	r3, [r7, #1]
	/* Generate I2C start pulse */
	I2Cx->CR1 |= I2C_CR1_START;
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	881b      	ldrh	r3, [r3, #0]
 800037e:	b29b      	uxth	r3, r3
 8000380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000384:	b29a      	uxth	r2, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	801a      	strh	r2, [r3, #0]
	
	/* Wait till I2C is busy */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 800038a:	4b35      	ldr	r3, [pc, #212]	; (8000460 <TM_I2C_Start+0x100>)
 800038c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000390:	601a      	str	r2, [r3, #0]
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 8000392:	e00a      	b.n	80003aa <TM_I2C_Start+0x4a>
		if (--TM_I2C_Timeout == 0x00) {
 8000394:	4b32      	ldr	r3, [pc, #200]	; (8000460 <TM_I2C_Start+0x100>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	3b01      	subs	r3, #1
 800039a:	4a31      	ldr	r2, [pc, #196]	; (8000460 <TM_I2C_Start+0x100>)
 800039c:	6013      	str	r3, [r2, #0]
 800039e:	4b30      	ldr	r3, [pc, #192]	; (8000460 <TM_I2C_Start+0x100>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d101      	bne.n	80003aa <TM_I2C_Start+0x4a>
			return 1;
 80003a6:	2301      	movs	r3, #1
 80003a8:	e056      	b.n	8000458 <TM_I2C_Start+0xf8>
	while (!(I2Cx->SR1 & I2C_SR1_SB)) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	8a9b      	ldrh	r3, [r3, #20]
 80003ae:	b29b      	uxth	r3, r3
 80003b0:	f003 0301 	and.w	r3, r3, #1
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d0ed      	beq.n	8000394 <TM_I2C_Start+0x34>
		}
	}

	/* Enable ack if we select it */
	if (ack) {
 80003b8:	787b      	ldrb	r3, [r7, #1]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d007      	beq.n	80003ce <TM_I2C_Start+0x6e>
		I2Cx->CR1 |= I2C_CR1_ACK;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	881b      	ldrh	r3, [r3, #0]
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80003c8:	b29a      	uxth	r2, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	801a      	strh	r2, [r3, #0]
	}

	/* Send write/read bit */
	if (direction == I2C_TRANSMITTER_MODE) {
 80003ce:	78bb      	ldrb	r3, [r7, #2]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d11d      	bne.n	8000410 <TM_I2C_Start+0xb0>
		/* Send address with zero last bit */
		I2Cx->DR = address & ~I2C_OAR1_ADD0;
 80003d4:	78fb      	ldrb	r3, [r7, #3]
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	f023 0301 	bic.w	r3, r3, #1
 80003dc:	b29a      	uxth	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 80003e2:	4b1f      	ldr	r3, [pc, #124]	; (8000460 <TM_I2C_Start+0x100>)
 80003e4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80003e8:	601a      	str	r2, [r3, #0]
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 80003ea:	e00a      	b.n	8000402 <TM_I2C_Start+0xa2>
			if (--TM_I2C_Timeout == 0x00) {
 80003ec:	4b1c      	ldr	r3, [pc, #112]	; (8000460 <TM_I2C_Start+0x100>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3b01      	subs	r3, #1
 80003f2:	4a1b      	ldr	r2, [pc, #108]	; (8000460 <TM_I2C_Start+0x100>)
 80003f4:	6013      	str	r3, [r2, #0]
 80003f6:	4b1a      	ldr	r3, [pc, #104]	; (8000460 <TM_I2C_Start+0x100>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d101      	bne.n	8000402 <TM_I2C_Start+0xa2>
				return 1;
 80003fe:	2301      	movs	r3, #1
 8000400:	e02a      	b.n	8000458 <TM_I2C_Start+0xf8>
		while (!(I2Cx->SR1 & I2C_SR1_ADDR)) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	8a9b      	ldrh	r3, [r3, #20]
 8000406:	b29b      	uxth	r3, r3
 8000408:	f003 0302 	and.w	r3, r3, #2
 800040c:	2b00      	cmp	r3, #0
 800040e:	d0ed      	beq.n	80003ec <TM_I2C_Start+0x8c>
			}
		}
	}
	if (direction == I2C_RECEIVER_MODE) {
 8000410:	78bb      	ldrb	r3, [r7, #2]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d11d      	bne.n	8000452 <TM_I2C_Start+0xf2>
		/* Send address with 1 last bit */
		I2Cx->DR = address | I2C_OAR1_ADD0;
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	b2db      	uxtb	r3, r3
 800041e:	b29a      	uxth	r2, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	821a      	strh	r2, [r3, #16]
		
		/* Wait till finished */
		TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000424:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <TM_I2C_Start+0x100>)
 8000426:	f644 6220 	movw	r2, #20000	; 0x4e20
 800042a:	601a      	str	r2, [r3, #0]
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 800042c:	e00a      	b.n	8000444 <TM_I2C_Start+0xe4>
			if (--TM_I2C_Timeout == 0x00) {
 800042e:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <TM_I2C_Start+0x100>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	3b01      	subs	r3, #1
 8000434:	4a0a      	ldr	r2, [pc, #40]	; (8000460 <TM_I2C_Start+0x100>)
 8000436:	6013      	str	r3, [r2, #0]
 8000438:	4b09      	ldr	r3, [pc, #36]	; (8000460 <TM_I2C_Start+0x100>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d101      	bne.n	8000444 <TM_I2C_Start+0xe4>
				return 1;
 8000440:	2301      	movs	r3, #1
 8000442:	e009      	b.n	8000458 <TM_I2C_Start+0xf8>
		while (!I2C_CheckEvent(I2Cx, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED)) {
 8000444:	4907      	ldr	r1, [pc, #28]	; (8000464 <TM_I2C_Start+0x104>)
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f000 fe3d 	bl	80010c6 <I2C_CheckEvent>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d0ed      	beq.n	800042e <TM_I2C_Start+0xce>
			}
		}
	}
	
	/* Read status register to clear ADDR flag */
	I2Cx->SR2;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	8b1b      	ldrh	r3, [r3, #24]
	
	/* Return 0, everything ok */
	return 0;
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	3708      	adds	r7, #8
 800045c:	46bd      	mov	sp, r7
 800045e:	bd80      	pop	{r7, pc}
 8000460:	20000048 	.word	0x20000048
 8000464:	00030002 	.word	0x00030002

08000468 <TM_I2C_Stop>:
	
	/* Return data */
	return data;
}

uint8_t TM_I2C_Stop(I2C_TypeDef* I2Cx) {
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
	/* Wait till transmitter not empty */
	TM_I2C_Timeout = TM_I2C_TIMEOUT;
 8000470:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <TM_I2C_Stop+0x60>)
 8000472:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000476:	601a      	str	r2, [r3, #0]
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8000478:	e00a      	b.n	8000490 <TM_I2C_Stop+0x28>
		if (--TM_I2C_Timeout == 0x00) {
 800047a:	4b13      	ldr	r3, [pc, #76]	; (80004c8 <TM_I2C_Stop+0x60>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	3b01      	subs	r3, #1
 8000480:	4a11      	ldr	r2, [pc, #68]	; (80004c8 <TM_I2C_Stop+0x60>)
 8000482:	6013      	str	r3, [r2, #0]
 8000484:	4b10      	ldr	r3, [pc, #64]	; (80004c8 <TM_I2C_Stop+0x60>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d101      	bne.n	8000490 <TM_I2C_Stop+0x28>
			return 1;
 800048c:	2301      	movs	r3, #1
 800048e:	e016      	b.n	80004be <TM_I2C_Stop+0x56>
	while (((!(I2Cx->SR1 & I2C_SR1_TXE)) || (!(I2Cx->SR1 & I2C_SR1_BTF)))) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	8a9b      	ldrh	r3, [r3, #20]
 8000494:	b29b      	uxth	r3, r3
 8000496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0ed      	beq.n	800047a <TM_I2C_Stop+0x12>
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	8a9b      	ldrh	r3, [r3, #20]
 80004a2:	b29b      	uxth	r3, r3
 80004a4:	f003 0304 	and.w	r3, r3, #4
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d0e6      	beq.n	800047a <TM_I2C_Stop+0x12>
		}
	}
	
	/* Generate stop */
	I2Cx->CR1 |= I2C_CR1_STOP;
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	881b      	ldrh	r3, [r3, #0]
 80004b0:	b29b      	uxth	r3, r3
 80004b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004b6:	b29a      	uxth	r2, r3
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	801a      	strh	r2, [r3, #0]
	
	/* Return 0, everything ok */
	return 0;
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	20000048 	.word	0x20000048

080004cc <BSP_RCC_Init>:




void BSP_RCC_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  SystemInit();
 80004d0:	f000 fa74 	bl	80009bc <SystemInit>

  /* Configure the System Peripheral clock prescalers */
  BSP_RCC_Periph_Clock_Init();
 80004d4:	f000 f80c 	bl	80004f0 <BSP_RCC_Periph_Clock_Init>

  //Update SystemCoreClock variable according to Clock Register Values
  SystemCoreClockUpdate();
 80004d8:	f000 faa4 	bl	8000a24 <SystemCoreClockUpdate>

  /* This function fills the RCC_ClockFreq structure with the current
  frequencies of different on chip clocks (for debug purpose) */
  RCC_GetClocksFreq(&RCC_ClockFreq);
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <BSP_RCC_Init+0x20>)
 80004de:	f000 fe8d 	bl	80011fc <RCC_GetClocksFreq>

  /* NVIC configuration ------------------------------------------------------*/
  //BSP_RCC_NVIC_Configuration();

  delay_init(72);
 80004e2:	2048      	movs	r0, #72	; 0x48
 80004e4:	f000 f9b4 	bl	8000850 <delay_init>

  // _mcu_rev_id = DBGMCU_GetREVID();
  // _mcu_dev_id = DBGMCU_GetDEVID();

}
 80004e8:	bf00      	nop
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	2000004c 	.word	0x2000004c

080004f0 <BSP_RCC_Periph_Clock_Init>:


void BSP_RCC_Periph_Clock_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0



  //ADC CLK Prescaler, ADC CLK = 72 / 6 = 12 Mhz
  RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 80004f4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80004f8:	f000 fe22 	bl	8001140 <RCC_ADCCLKConfig>
  //USB OTG CLK FS Prescaler, when PLL = 72Mhz, OTGFSPRE = 0
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f000 fe11 	bl	8001124 <RCC_USBCLKConfig>
  //MCO 
  RCC_MCOConfig(RCC_MCO_NoClock);
 8000502:	2000      	movs	r0, #0
 8000504:	f000 ff8a 	bl	800141c <RCC_MCOConfig>


  //Clear Clock interrupt register
  RCC->CIR = 0;
 8000508:	4b0f      	ldr	r3, [pc, #60]	; (8000548 <BSP_RCC_Periph_Clock_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	609a      	str	r2, [r3, #8]

  //Reset APB2 and APB1 Peripheral
  RCC->APB2RSTR = 0;
 800050e:	4b0e      	ldr	r3, [pc, #56]	; (8000548 <BSP_RCC_Periph_Clock_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	60da      	str	r2, [r3, #12]
  RCC->APB1RSTR = 0;
 8000514:	4b0c      	ldr	r3, [pc, #48]	; (8000548 <BSP_RCC_Periph_Clock_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	611a      	str	r2, [r3, #16]

  //AHB Peripheral CLK Enable
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SRAM  | RCC_AHBPeriph_FLITF , ENABLE);
 800051a:	2101      	movs	r1, #1
 800051c:	2014      	movs	r0, #20
 800051e:	f000 ff23 	bl	8001368 <RCC_AHBPeriphClockCmd>
  

  //APB2 Peripheral CLK Enable
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA  |
 8000522:	2101      	movs	r1, #1
 8000524:	203d      	movs	r0, #61	; 0x3d
 8000526:	f000 ff3d 	bl	80013a4 <RCC_APB2PeriphClockCmd>
                          RCC_APB2Periph_GPIOB  | RCC_APB2Periph_GPIOC |
                          RCC_APB2Periph_GPIOD,
                        ENABLE);

  //APB1 Peripheral CLK Enable
  RCC->APB1ENR = 0;
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <BSP_RCC_Periph_Clock_Init+0x58>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
  
  //RTC CLK
  RCC_LSEConfig(RCC_LSE_ON);
 8000530:	2001      	movs	r0, #1
 8000532:	f000 fe21 	bl	8001178 <RCC_LSEConfig>
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 8000536:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053a:	f000 fe3d 	bl	80011b8 <RCC_RTCCLKConfig>
  RCC_RTCCLKCmd(ENABLE);
 800053e:	2001      	movs	r0, #1
 8000540:	f000 fe4c 	bl	80011dc <RCC_RTCCLKCmd>




}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40021000 	.word	0x40021000

0800054c <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM4, TIM_IT_CC1) != RESET)
 8000550:	2102      	movs	r1, #2
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <TIM4_IRQHandler+0x5c>)
 8000554:	f000 ff98 	bl	8001488 <TIM_GetITStatus>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d021      	beq.n	80005a2 <TIM4_IRQHandler+0x56>
  {
    TIM_ClearITPendingBit(TIM4, TIM_IT_CC1);
 800055e:	2102      	movs	r1, #2
 8000560:	4811      	ldr	r0, [pc, #68]	; (80005a8 <TIM4_IRQHandler+0x5c>)
 8000562:	f000 ffba 	bl	80014da <TIM_ClearITPendingBit>

    /* Pin PC.06 toggling with frequency = 500 Hz */
    GPIO_WriteBit(GPIOB, GPIO_Pin_6, (BitAction)(1 - GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_6)));
 8000566:	2140      	movs	r1, #64	; 0x40
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <TIM4_IRQHandler+0x60>)
 800056a:	f000 fc2b 	bl	8000dc4 <GPIO_ReadOutputDataBit>
 800056e:	4603      	mov	r3, r0
 8000570:	f1c3 0301 	rsb	r3, r3, #1
 8000574:	b2db      	uxtb	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	2140      	movs	r1, #64	; 0x40
 800057a:	480c      	ldr	r0, [pc, #48]	; (80005ac <TIM4_IRQHandler+0x60>)
 800057c:	f000 fc3b 	bl	8000df6 <GPIO_WriteBit>

    
    capture = TIM_GetCapture1(TIM4);
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <TIM4_IRQHandler+0x5c>)
 8000582:	f000 ff69 	bl	8001458 <TIM_GetCapture1>
 8000586:	4603      	mov	r3, r0
 8000588:	461a      	mov	r2, r3
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <TIM4_IRQHandler+0x64>)
 800058c:	801a      	strh	r2, [r3, #0]
    TIM_SetCompare1(TIM4, capture + CCR1_Val);
 800058e:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <TIM4_IRQHandler+0x64>)
 8000590:	881a      	ldrh	r2, [r3, #0]
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <TIM4_IRQHandler+0x68>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	4413      	add	r3, r2
 8000598:	b29b      	uxth	r3, r3
 800059a:	4619      	mov	r1, r3
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <TIM4_IRQHandler+0x5c>)
 800059e:	f000 ff4d 	bl	800143c <TIM_SetCompare1>
  }

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40000800 	.word	0x40000800
 80005ac:	40010c00 	.word	0x40010c00
 80005b0:	20000060 	.word	0x20000060
 80005b4:	20000000 	.word	0x20000000

080005b8 <TIM5_IRQHandler>:
  * @brief  This function handles TIM5 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM5_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
 /* Clear TIM3 Capture compare interrupt pending bit */
  TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
 80005bc:	2102      	movs	r1, #2
 80005be:	4817      	ldr	r0, [pc, #92]	; (800061c <TIM5_IRQHandler+0x64>)
 80005c0:	f000 ff8b 	bl	80014da <TIM_ClearITPendingBit>

  /* Get the Input Capture value */
  IC1Value = TIM_GetCapture1(TIM5);
 80005c4:	4815      	ldr	r0, [pc, #84]	; (800061c <TIM5_IRQHandler+0x64>)
 80005c6:	f000 ff47 	bl	8001458 <TIM_GetCapture1>
 80005ca:	4603      	mov	r3, r0
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <TIM5_IRQHandler+0x68>)
 80005d0:	801a      	strh	r2, [r3, #0]

  if (IC1Value != 0)
 80005d2:	4b13      	ldr	r3, [pc, #76]	; (8000620 <TIM5_IRQHandler+0x68>)
 80005d4:	881b      	ldrh	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d017      	beq.n	800060a <TIM5_IRQHandler+0x52>
  {
    /* Duty cycle computation */
    DutyCycle = ( TIM_GetCapture2(TIM5) * 100) / IC1Value;
 80005da:	4810      	ldr	r0, [pc, #64]	; (800061c <TIM5_IRQHandler+0x64>)
 80005dc:	f000 ff48 	bl	8001470 <TIM_GetCapture2>
 80005e0:	4603      	mov	r3, r0
 80005e2:	461a      	mov	r2, r3
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	fb02 f303 	mul.w	r3, r2, r3
 80005ea:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <TIM5_IRQHandler+0x68>)
 80005ec:	8812      	ldrh	r2, [r2, #0]
 80005ee:	fb93 f3f2 	sdiv	r3, r3, r2
 80005f2:	b29a      	uxth	r2, r3
 80005f4:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <TIM5_IRQHandler+0x6c>)
 80005f6:	801a      	strh	r2, [r3, #0]

    /* Frequency computation */
    Frequency = SystemCoreClock / IC1Value;
 80005f8:	4b0b      	ldr	r3, [pc, #44]	; (8000628 <TIM5_IRQHandler+0x70>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a08      	ldr	r2, [pc, #32]	; (8000620 <TIM5_IRQHandler+0x68>)
 80005fe:	8812      	ldrh	r2, [r2, #0]
 8000600:	fbb3 f3f2 	udiv	r3, r3, r2
 8000604:	4a09      	ldr	r2, [pc, #36]	; (800062c <TIM5_IRQHandler+0x74>)
 8000606:	6013      	str	r3, [r2, #0]
  {
    DutyCycle = 0;
    Frequency = 0;
  }

}
 8000608:	e005      	b.n	8000616 <TIM5_IRQHandler+0x5e>
    DutyCycle = 0;
 800060a:	4b06      	ldr	r3, [pc, #24]	; (8000624 <TIM5_IRQHandler+0x6c>)
 800060c:	2200      	movs	r2, #0
 800060e:	801a      	strh	r2, [r3, #0]
    Frequency = 0;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <TIM5_IRQHandler+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40000c00 	.word	0x40000c00
 8000620:	20000062 	.word	0x20000062
 8000624:	20000064 	.word	0x20000064
 8000628:	20000004 	.word	0x20000004
 800062c:	20000068 	.word	0x20000068

08000630 <USART1_IrqRxCallBack>:

/**********************************************************************************
  * USART1接收中断函数
 **********************************************************************************/
void __attribute((weak)) USART1_IrqRxCallBack(uint16_t data)
{
 8000630:	b480      	push	{r7}
 8000632:	b083      	sub	sp, #12
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]

}
 800063a:	bf00      	nop
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
	uint32_t st,cr;

	st = USART1->SR;
 800064a:	4b15      	ldr	r3, [pc, #84]	; (80006a0 <USART1_IRQHandler+0x5c>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	b29b      	uxth	r3, r3
 8000650:	607b      	str	r3, [r7, #4]
	cr = USART1->CR1;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <USART1_IRQHandler+0x5c>)
 8000654:	899b      	ldrh	r3, [r3, #12]
 8000656:	b29b      	uxth	r3, r3
 8000658:	603b      	str	r3, [r7, #0]

	if(st & USART_FLAG_RXNE)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f003 0320 	and.w	r3, r3, #32
 8000660:	2b00      	cmp	r3, #0
 8000662:	d019      	beq.n	8000698 <USART1_IRQHandler+0x54>
	{
		if(cr & USART_WordLength_9b)
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800066a:	2b00      	cmp	r3, #0
 800066c:	d008      	beq.n	8000680 <USART1_IRQHandler+0x3c>
		{
			USART1_valRx = (uint16_t)(USART1->DR & 0X1FF);
 800066e:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <USART1_IRQHandler+0x5c>)
 8000670:	889b      	ldrh	r3, [r3, #4]
 8000672:	b29b      	uxth	r3, r3
 8000674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000678:	b29a      	uxth	r2, r3
 800067a:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <USART1_IRQHandler+0x60>)
 800067c:	801a      	strh	r2, [r3, #0]
 800067e:	e006      	b.n	800068e <USART1_IRQHandler+0x4a>
		}
		else
		{
			USART1_valRx = (uint16_t)(USART1->DR & 0XFF);
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <USART1_IRQHandler+0x5c>)
 8000682:	889b      	ldrh	r3, [r3, #4]
 8000684:	b29b      	uxth	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	b29a      	uxth	r2, r3
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <USART1_IRQHandler+0x60>)
 800068c:	801a      	strh	r2, [r3, #0]
		}

		USART1_IrqRxCallBack(USART1_valRx);
 800068e:	4b05      	ldr	r3, [pc, #20]	; (80006a4 <USART1_IRQHandler+0x60>)
 8000690:	881b      	ldrh	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff ffcc 	bl	8000630 <USART1_IrqRxCallBack>
	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40013800 	.word	0x40013800
 80006a4:	2000006c 	.word	0x2000006c

080006a8 <USART2_IrqCallBack>:

/**********************************************************************************
  * USART2接收中断函数
 **********************************************************************************/
void __attribute((weak)) USART2_IrqCallBack(uint16_t data)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	80fb      	strh	r3, [r7, #6]

}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	if(USART2->CR1 & USART_WordLength_9b)
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <USART2_IRQHandler+0x40>)
 80006c2:	899b      	ldrh	r3, [r3, #12]
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d008      	beq.n	80006e0 <USART2_IRQHandler+0x24>
	{
		USART2_valRx = (uint16_t)(USART2->DR & 0X1FF);
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <USART2_IRQHandler+0x40>)
 80006d0:	889b      	ldrh	r3, [r3, #4]
 80006d2:	b29b      	uxth	r3, r3
 80006d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006d8:	b29a      	uxth	r2, r3
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <USART2_IRQHandler+0x44>)
 80006dc:	801a      	strh	r2, [r3, #0]
 80006de:	e006      	b.n	80006ee <USART2_IRQHandler+0x32>
	}
	else
	{
		USART2_valRx = (uint16_t)(USART2->DR & 0XFF);
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <USART2_IRQHandler+0x40>)
 80006e2:	889b      	ldrh	r3, [r3, #4]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b05      	ldr	r3, [pc, #20]	; (8000700 <USART2_IRQHandler+0x44>)
 80006ec:	801a      	strh	r2, [r3, #0]
	}

	USART2_IrqCallBack(USART2_valRx);
 80006ee:	4b04      	ldr	r3, [pc, #16]	; (8000700 <USART2_IRQHandler+0x44>)
 80006f0:	881b      	ldrh	r3, [r3, #0]
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff ffd8 	bl	80006a8 <USART2_IrqCallBack>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40004400 	.word	0x40004400
 8000700:	2000006e 	.word	0x2000006e

08000704 <USART3_IrqCallBack>:

/**********************************************************************************
  * USART3接收中断函数
 **********************************************************************************/
void __attribute((weak)) USART3_IrqCallBack(uint16_t data)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	80fb      	strh	r3, [r7, #6]

}
 800070e:	bf00      	nop
 8000710:	370c      	adds	r7, #12
 8000712:	46bd      	mov	sp, r7
 8000714:	bc80      	pop	{r7}
 8000716:	4770      	bx	lr

08000718 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
	if(USART3->CR1 & USART_WordLength_9b)
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <USART3_IRQHandler+0x40>)
 800071e:	899b      	ldrh	r3, [r3, #12]
 8000720:	b29b      	uxth	r3, r3
 8000722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000726:	2b00      	cmp	r3, #0
 8000728:	d008      	beq.n	800073c <USART3_IRQHandler+0x24>
	{
		USART3_valRx = (uint16_t)(USART3->DR & 0X1FF);
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <USART3_IRQHandler+0x40>)
 800072c:	889b      	ldrh	r3, [r3, #4]
 800072e:	b29b      	uxth	r3, r3
 8000730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <USART3_IRQHandler+0x44>)
 8000738:	801a      	strh	r2, [r3, #0]
 800073a:	e006      	b.n	800074a <USART3_IRQHandler+0x32>
	}
	else
	{
		USART3_valRx = (uint16_t)(USART3->DR & 0XFF);
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <USART3_IRQHandler+0x40>)
 800073e:	889b      	ldrh	r3, [r3, #4]
 8000740:	b29b      	uxth	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	b29a      	uxth	r2, r3
 8000746:	4b05      	ldr	r3, [pc, #20]	; (800075c <USART3_IRQHandler+0x44>)
 8000748:	801a      	strh	r2, [r3, #0]
	}

	USART3_IrqCallBack(USART3_valRx);
 800074a:	4b04      	ldr	r3, [pc, #16]	; (800075c <USART3_IRQHandler+0x44>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff ffd8 	bl	8000704 <USART3_IrqCallBack>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40004800 	.word	0x40004800
 800075c:	20000070 	.word	0x20000070

08000760 <UART4_IrqRxCallBack>:

/**********************************************************************************
  * UART4接收中断函数
 **********************************************************************************/
void __attribute((weak)) UART4_IrqRxCallBack(uint16_t data)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	80fb      	strh	r3, [r7, #6]

}
 800076a:	bf00      	nop
 800076c:	370c      	adds	r7, #12
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
	uint32_t st,cr;

	st = UART4->SR;
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <UART4_IRQHandler+0x5c>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	b29b      	uxth	r3, r3
 8000780:	607b      	str	r3, [r7, #4]
	cr = UART4->CR1;
 8000782:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <UART4_IRQHandler+0x5c>)
 8000784:	899b      	ldrh	r3, [r3, #12]
 8000786:	b29b      	uxth	r3, r3
 8000788:	603b      	str	r3, [r7, #0]

	if(st & USART_FLAG_RXNE)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f003 0320 	and.w	r3, r3, #32
 8000790:	2b00      	cmp	r3, #0
 8000792:	d019      	beq.n	80007c8 <UART4_IRQHandler+0x54>
	{
		if(cr & USART_WordLength_9b)
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800079a:	2b00      	cmp	r3, #0
 800079c:	d008      	beq.n	80007b0 <UART4_IRQHandler+0x3c>
		{
			UART4_valRx = (uint16_t)(UART4->DR & 0X1FF);
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <UART4_IRQHandler+0x5c>)
 80007a0:	889b      	ldrh	r3, [r3, #4]
 80007a2:	b29b      	uxth	r3, r3
 80007a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <UART4_IRQHandler+0x60>)
 80007ac:	801a      	strh	r2, [r3, #0]
 80007ae:	e006      	b.n	80007be <UART4_IRQHandler+0x4a>
		}
		else
		{
			UART4_valRx = (uint16_t)(UART4->DR & 0XFF);
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <UART4_IRQHandler+0x5c>)
 80007b2:	889b      	ldrh	r3, [r3, #4]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	b29a      	uxth	r2, r3
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <UART4_IRQHandler+0x60>)
 80007bc:	801a      	strh	r2, [r3, #0]
		}

		UART4_IrqRxCallBack(UART4_valRx);
 80007be:	4b05      	ldr	r3, [pc, #20]	; (80007d4 <UART4_IRQHandler+0x60>)
 80007c0:	881b      	ldrh	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff ffcc 	bl	8000760 <UART4_IrqRxCallBack>
	}

}
 80007c8:	bf00      	nop
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40004c00 	.word	0x40004c00
 80007d4:	20000072 	.word	0x20000072

080007d8 <UART5_IrqRxCallBack>:

/**********************************************************************************
  * UART5接收中断函数
 **********************************************************************************/
void __attribute((weak)) UART5_IrqRxCallBack(uint16_t data)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]

}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	uint32_t st,cr;

	st = UART5->SR;
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <UART5_IRQHandler+0x5c>)
 80007f4:	881b      	ldrh	r3, [r3, #0]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	607b      	str	r3, [r7, #4]
	cr = UART5->CR1;
 80007fa:	4b13      	ldr	r3, [pc, #76]	; (8000848 <UART5_IRQHandler+0x5c>)
 80007fc:	899b      	ldrh	r3, [r3, #12]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	603b      	str	r3, [r7, #0]

	if(st & USART_FLAG_RXNE)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f003 0320 	and.w	r3, r3, #32
 8000808:	2b00      	cmp	r3, #0
 800080a:	d019      	beq.n	8000840 <UART5_IRQHandler+0x54>
	{
		if(cr & USART_WordLength_9b)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d008      	beq.n	8000828 <UART5_IRQHandler+0x3c>
		{
			UART5_valRx = (uint16_t)(UART5->DR & 0X1FF);
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <UART5_IRQHandler+0x5c>)
 8000818:	889b      	ldrh	r3, [r3, #4]
 800081a:	b29b      	uxth	r3, r3
 800081c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000820:	b29a      	uxth	r2, r3
 8000822:	4b0a      	ldr	r3, [pc, #40]	; (800084c <UART5_IRQHandler+0x60>)
 8000824:	801a      	strh	r2, [r3, #0]
 8000826:	e006      	b.n	8000836 <UART5_IRQHandler+0x4a>
		}
		else
		{
			UART5_valRx = (uint16_t)(UART5->DR & 0XFF);
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <UART5_IRQHandler+0x5c>)
 800082a:	889b      	ldrh	r3, [r3, #4]
 800082c:	b29b      	uxth	r3, r3
 800082e:	b2db      	uxtb	r3, r3
 8000830:	b29a      	uxth	r2, r3
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <UART5_IRQHandler+0x60>)
 8000834:	801a      	strh	r2, [r3, #0]
		}

		UART5_IrqRxCallBack(UART5_valRx);
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <UART5_IRQHandler+0x60>)
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ffcc 	bl	80007d8 <UART5_IrqRxCallBack>
	}

}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40005000 	.word	0x40005000
 800084c:	20000074 	.word	0x20000074

08000850 <delay_init>:
//初始化延迟函数
//当使用OS的时候,此函数会初始化OS的时钟节拍
//SYSTICK的时钟固定为AHB时钟的1/8
//SYSCLK:系统时钟频率
void delay_init(u8 SYSCLK)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
 800085a:	f06f 0004 	mvn.w	r0, #4
 800085e:	f000 f9d9 	bl	8000c14 <SysTick_CLKSourceConfig>
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	08db      	lsrs	r3, r3, #3
 8000866:	b2da      	uxtb	r2, r3
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <delay_init+0x3c>)
 800086a:	701a      	strb	r2, [r3, #0]
	fac_ms=1000/delay_ostickspersec;		//代表OS可以延时的最少单位	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; 	//开启SYSTICK    
#else
	fac_ms=(u16)fac_us*1000;				//非OS下,代表每个ms需要的systick时钟数   
 800086c:	4b07      	ldr	r3, [pc, #28]	; (800088c <delay_init+0x3c>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	b29b      	uxth	r3, r3
 8000872:	461a      	mov	r2, r3
 8000874:	0152      	lsls	r2, r2, #5
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	0092      	lsls	r2, r2, #2
 800087a:	4413      	add	r3, r2
 800087c:	00db      	lsls	r3, r3, #3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <delay_init+0x40>)
 8000882:	801a      	strh	r2, [r3, #0]
#endif
}								    
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000076 	.word	0x20000076
 8000890:	20000078 	.word	0x20000078

08000894 <delay_xms>:
//SysTick->LOAD为24位寄存器,所以,最大延时为:
//nms<=0xffffff*8*1000/SYSCLK
//SYSCLK单位为Hz,nms单位为ms
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	4a15      	ldr	r2, [pc, #84]	; (80008f8 <delay_xms+0x64>)
 80008a2:	8812      	ldrh	r2, [r2, #0]
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a15      	ldr	r2, [pc, #84]	; (80008fc <delay_xms+0x68>)
 80008a8:	fb01 f303 	mul.w	r3, r1, r3
 80008ac:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           			//清空计数器
 80008ae:	4b13      	ldr	r3, [pc, #76]	; (80008fc <delay_xms+0x68>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <delay_xms+0x68>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a10      	ldr	r2, [pc, #64]	; (80008fc <delay_xms+0x68>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 80008c0:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <delay_xms+0x68>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	60fb      	str	r3, [r7, #12]
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	f003 0301 	and.w	r3, r3, #1
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d004      	beq.n	80008da <delay_xms+0x46>
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0f2      	beq.n	80008c0 <delay_xms+0x2c>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <delay_xms+0x68>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a07      	ldr	r2, [pc, #28]	; (80008fc <delay_xms+0x68>)
 80008e0:	f023 0301 	bic.w	r3, r3, #1
 80008e4:	6013      	str	r3, [r2, #0]
	SysTick->VAL =0X00;     		  		//清空计数器	  	    
 80008e6:	4b05      	ldr	r3, [pc, #20]	; (80008fc <delay_xms+0x68>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
} 
 80008ec:	bf00      	nop
 80008ee:	3714      	adds	r7, #20
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	20000078 	.word	0x20000078
 80008fc:	e000e010 	.word	0xe000e010

08000900 <delay_ms>:
//延时nms 
//nms:0~65535
void delay_ms(u16 nms)
{	 	 
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	80fb      	strh	r3, [r7, #6]
	u8 repeat=nms/540;						//这里用540,是考虑到某些客户可能超频使用,
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	4a13      	ldr	r2, [pc, #76]	; (800095c <delay_ms+0x5c>)
 800090e:	fba2 2303 	umull	r2, r3, r2, r3
 8000912:	0a5b      	lsrs	r3, r3, #9
 8000914:	b29b      	uxth	r3, r3
 8000916:	73fb      	strb	r3, [r7, #15]
											//比如超频到248M的时候,delay_xms最大只能延时541ms左右了
	u16 remain=nms%540;
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	4a10      	ldr	r2, [pc, #64]	; (800095c <delay_ms+0x5c>)
 800091c:	fba2 1203 	umull	r1, r2, r2, r3
 8000920:	0a52      	lsrs	r2, r2, #9
 8000922:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8000926:	fb01 f202 	mul.w	r2, r1, r2
 800092a:	1a9b      	subs	r3, r3, r2
 800092c:	81bb      	strh	r3, [r7, #12]
	while(repeat)
 800092e:	e006      	b.n	800093e <delay_ms+0x3e>
	{
		delay_xms(540);
 8000930:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8000934:	f7ff ffae 	bl	8000894 <delay_xms>
		repeat--;
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	3b01      	subs	r3, #1
 800093c:	73fb      	strb	r3, [r7, #15]
	while(repeat)
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d1f5      	bne.n	8000930 <delay_ms+0x30>
	}
	if(remain)delay_xms(remain);
 8000944:	89bb      	ldrh	r3, [r7, #12]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d003      	beq.n	8000952 <delay_ms+0x52>
 800094a:	89bb      	ldrh	r3, [r7, #12]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ffa1 	bl	8000894 <delay_xms>
} 
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	f2b9d649 	.word	0xf2b9d649

08000960 <sys_SWJ_REMAP_Config>:
  *     @arg SWJ_NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  *     @arg SWJ_DISABLE: Full SWJ Disabled (JTAG-DP + SW-DP)
  * @retval None
  */
void sys_SWJ_REMAP_Config(uint8_t SWJ_REMAP)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]

    switch (SWJ_REMAP)
 800096a:	79fb      	ldrb	r3, [r7, #7]
 800096c:	2b03      	cmp	r3, #3
 800096e:	d81a      	bhi.n	80009a6 <sys_SWJ_REMAP_Config+0x46>
 8000970:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <sys_SWJ_REMAP_Config+0x18>)
 8000972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000976:	bf00      	nop
 8000978:	080009a7 	.word	0x080009a7
 800097c:	08000989 	.word	0x08000989
 8000980:	08000993 	.word	0x08000993
 8000984:	0800099d 	.word	0x0800099d
        /* Full SWJ Enable (JTAG-DP + SW-DP) */
        break;

    case SWJ_NONJTRST:
        /* Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_NoJTRST, ENABLE);
 8000988:	2101      	movs	r1, #1
 800098a:	4809      	ldr	r0, [pc, #36]	; (80009b0 <sys_SWJ_REMAP_Config+0x50>)
 800098c:	f000 fa4a 	bl	8000e24 <GPIO_PinRemapConfig>
        break;
 8000990:	e00a      	b.n	80009a8 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_NOJTAG:
        /* JTAG-DP Disabled and SW-DP Enabled */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 8000992:	2101      	movs	r1, #1
 8000994:	4807      	ldr	r0, [pc, #28]	; (80009b4 <sys_SWJ_REMAP_Config+0x54>)
 8000996:	f000 fa45 	bl	8000e24 <GPIO_PinRemapConfig>
    break;
 800099a:	e005      	b.n	80009a8 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_DISABLE:
        /* Full SWJ Disabled (JTAG-DP + SW-DP) */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
 800099c:	2101      	movs	r1, #1
 800099e:	4806      	ldr	r0, [pc, #24]	; (80009b8 <sys_SWJ_REMAP_Config+0x58>)
 80009a0:	f000 fa40 	bl	8000e24 <GPIO_PinRemapConfig>
    break;
 80009a4:	e000      	b.n	80009a8 <sys_SWJ_REMAP_Config+0x48>

    default:
        break;
 80009a6:	bf00      	nop
    }

}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	00300100 	.word	0x00300100
 80009b4:	00300200 	.word	0x00300200
 80009b8:	00300400 	.word	0x00300400

080009bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <SystemInit+0x5c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a14      	ldr	r2, [pc, #80]	; (8000a18 <SystemInit+0x5c>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <SystemInit+0x5c>)
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	4911      	ldr	r1, [pc, #68]	; (8000a18 <SystemInit+0x5c>)
 80009d2:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <SystemInit+0x60>)
 80009d4:	4013      	ands	r3, r2
 80009d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <SystemInit+0x5c>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <SystemInit+0x5c>)
 80009de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <SystemInit+0x5c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <SystemInit+0x5c>)
 80009ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80009f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <SystemInit+0x5c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <SystemInit+0x5c>)
 80009fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80009fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <SystemInit+0x5c>)
 8000a02:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a06:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000a08:	f000 f87e 	bl	8000b08 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SystemInit+0x64>)
 8000a0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a12:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a14:	bf00      	nop
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	f8ff0000 	.word	0xf8ff0000
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000a36:	4b2f      	ldr	r3, [pc, #188]	; (8000af4 <SystemCoreClockUpdate+0xd0>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	f003 030c 	and.w	r3, r3, #12
 8000a3e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b08      	cmp	r3, #8
 8000a44:	d011      	beq.n	8000a6a <SystemCoreClockUpdate+0x46>
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b08      	cmp	r3, #8
 8000a4a:	d83a      	bhi.n	8000ac2 <SystemCoreClockUpdate+0x9e>
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d003      	beq.n	8000a5a <SystemCoreClockUpdate+0x36>
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b04      	cmp	r3, #4
 8000a56:	d004      	beq.n	8000a62 <SystemCoreClockUpdate+0x3e>
 8000a58:	e033      	b.n	8000ac2 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000a5a:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <SystemCoreClockUpdate+0xd4>)
 8000a5c:	4a27      	ldr	r2, [pc, #156]	; (8000afc <SystemCoreClockUpdate+0xd8>)
 8000a5e:	601a      	str	r2, [r3, #0]
      break;
 8000a60:	e033      	b.n	8000aca <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000a62:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <SystemCoreClockUpdate+0xd4>)
 8000a64:	4a25      	ldr	r2, [pc, #148]	; (8000afc <SystemCoreClockUpdate+0xd8>)
 8000a66:	601a      	str	r2, [r3, #0]
      break;
 8000a68:	e02f      	b.n	8000aca <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000a6a:	4b22      	ldr	r3, [pc, #136]	; (8000af4 <SystemCoreClockUpdate+0xd0>)
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000a72:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <SystemCoreClockUpdate+0xd0>)
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a7c:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	0c9b      	lsrs	r3, r3, #18
 8000a82:	3302      	adds	r3, #2
 8000a84:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d106      	bne.n	8000a9a <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <SystemCoreClockUpdate+0xdc>)
 8000a90:	fb02 f303 	mul.w	r3, r2, r3
 8000a94:	4a18      	ldr	r2, [pc, #96]	; (8000af8 <SystemCoreClockUpdate+0xd4>)
 8000a96:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000a98:	e017      	b.n	8000aca <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000a9a:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <SystemCoreClockUpdate+0xd0>)
 8000a9c:	685b      	ldr	r3, [r3, #4]
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d006      	beq.n	8000ab4 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <SystemCoreClockUpdate+0xdc>)
 8000aaa:	fb02 f303 	mul.w	r3, r2, r3
 8000aae:	4a12      	ldr	r2, [pc, #72]	; (8000af8 <SystemCoreClockUpdate+0xd4>)
 8000ab0:	6013      	str	r3, [r2, #0]
      break;
 8000ab2:	e00a      	b.n	8000aca <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4a11      	ldr	r2, [pc, #68]	; (8000afc <SystemCoreClockUpdate+0xd8>)
 8000ab8:	fb02 f303 	mul.w	r3, r2, r3
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <SystemCoreClockUpdate+0xd4>)
 8000abe:	6013      	str	r3, [r2, #0]
      break;
 8000ac0:	e003      	b.n	8000aca <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <SystemCoreClockUpdate+0xd4>)
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <SystemCoreClockUpdate+0xd8>)
 8000ac6:	601a      	str	r2, [r3, #0]
      break;
 8000ac8:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000aca:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <SystemCoreClockUpdate+0xd0>)
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	091b      	lsrs	r3, r3, #4
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <SystemCoreClockUpdate+0xe0>)
 8000ad6:	5cd3      	ldrb	r3, [r2, r3]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <SystemCoreClockUpdate+0xd4>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <SystemCoreClockUpdate+0xd4>)
 8000ae8:	6013      	str	r3, [r2, #0]
}
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000
 8000af8:	20000004 	.word	0x20000004
 8000afc:	007a1200 	.word	0x007a1200
 8000b00:	003d0900 	.word	0x003d0900
 8000b04:	20000008 	.word	0x20000008

08000b08 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000b0c:	f000 f802 	bl	8000b14 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b22:	4b3a      	ldr	r3, [pc, #232]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a39      	ldr	r2, [pc, #228]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000b28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b2c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b2e:	4b37      	ldr	r3, [pc, #220]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b36:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d103      	bne.n	8000b4c <SetSysClockTo72+0x38>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000b4a:	d1f0      	bne.n	8000b2e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000b4c:	4b2f      	ldr	r3, [pc, #188]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d002      	beq.n	8000b5e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	e001      	b.n	8000b62 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d14b      	bne.n	8000c00 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000b68:	4b29      	ldr	r3, [pc, #164]	; (8000c10 <SetSysClockTo72+0xfc>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a28      	ldr	r2, [pc, #160]	; (8000c10 <SetSysClockTo72+0xfc>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000b74:	4b26      	ldr	r3, [pc, #152]	; (8000c10 <SetSysClockTo72+0xfc>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a25      	ldr	r2, [pc, #148]	; (8000c10 <SetSysClockTo72+0xfc>)
 8000b7a:	f023 0307 	bic.w	r3, r3, #7
 8000b7e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000b80:	4b23      	ldr	r3, [pc, #140]	; (8000c10 <SetSysClockTo72+0xfc>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <SetSysClockTo72+0xfc>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000b8c:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000b96:	4a1d      	ldr	r2, [pc, #116]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ba6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	4a17      	ldr	r2, [pc, #92]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000bae:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000bb2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000bba:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000bbe:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000bca:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000bcc:	bf00      	nop
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d0f9      	beq.n	8000bce <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000be0:	f023 0303 	bic.w	r3, r3, #3
 8000be4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000bec:	f043 0302 	orr.w	r3, r3, #2
 8000bf0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000bf2:	bf00      	nop
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SetSysClockTo72+0xf8>)
 8000bf6:	685b      	ldr	r3, [r3, #4]
 8000bf8:	f003 030c 	and.w	r3, r3, #12
 8000bfc:	2b08      	cmp	r3, #8
 8000bfe:	d1f9      	bne.n	8000bf4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	40022000 	.word	0x40022000

08000c14 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2b04      	cmp	r3, #4
 8000c20:	d106      	bne.n	8000c30 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000c22:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <SysTick_CLKSourceConfig+0x34>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a08      	ldr	r2, [pc, #32]	; (8000c48 <SysTick_CLKSourceConfig+0x34>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8000c2e:	e005      	b.n	8000c3c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <SysTick_CLKSourceConfig+0x34>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a04      	ldr	r2, [pc, #16]	; (8000c48 <SysTick_CLKSourceConfig+0x34>)
 8000c36:	f023 0304 	bic.w	r3, r3, #4
 8000c3a:	6013      	str	r3, [r2, #0]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e010 	.word	0xe000e010

08000c4c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	613b      	str	r3, [r7, #16]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	61bb      	str	r3, [r7, #24]
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	78db      	ldrb	r3, [r3, #3]
 8000c72:	f003 030f 	and.w	r3, r3, #15
 8000c76:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	78db      	ldrb	r3, [r3, #3]
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d005      	beq.n	8000c90 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	789b      	ldrb	r3, [r3, #2]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	69fb      	ldr	r3, [r7, #28]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	881b      	ldrh	r3, [r3, #0]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d044      	beq.n	8000d24 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	e038      	b.n	8000d18 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000cbc:	693a      	ldr	r2, [r7, #16]
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d126      	bne.n	8000d12 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	009b      	lsls	r3, r3, #2
 8000cc8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000cca:	220f      	movs	r2, #15
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	43db      	mvns	r3, r3
 8000cd8:	697a      	ldr	r2, [r7, #20]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	78db      	ldrb	r3, [r3, #3]
 8000cf0:	2b28      	cmp	r3, #40	; 0x28
 8000cf2:	d105      	bne.n	8000d00 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	409a      	lsls	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	e008      	b.n	8000d12 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	78db      	ldrb	r3, [r3, #3]
 8000d04:	2b48      	cmp	r3, #72	; 0x48
 8000d06:	d104      	bne.n	8000d12 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	69bb      	ldr	r3, [r7, #24]
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	3301      	adds	r3, #1
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	2b07      	cmp	r3, #7
 8000d1c:	d9c3      	bls.n	8000ca6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	881b      	ldrh	r3, [r3, #0]
 8000d28:	2bff      	cmp	r3, #255	; 0xff
 8000d2a:	d946      	bls.n	8000dba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d32:	2300      	movs	r3, #0
 8000d34:	61bb      	str	r3, [r7, #24]
 8000d36:	e03a      	b.n	8000dae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	d127      	bne.n	8000da8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000d5e:	220f      	movs	r2, #15
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	43db      	mvns	r3, r3
 8000d6c:	697a      	ldr	r2, [r7, #20]
 8000d6e:	4013      	ands	r3, r2
 8000d70:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	78db      	ldrb	r3, [r3, #3]
 8000d84:	2b28      	cmp	r3, #40	; 0x28
 8000d86:	d105      	bne.n	8000d94 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	3308      	adds	r3, #8
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	78db      	ldrb	r3, [r3, #3]
 8000d98:	2b48      	cmp	r3, #72	; 0x48
 8000d9a:	d105      	bne.n	8000da8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	3308      	adds	r3, #8
 8000da0:	2201      	movs	r2, #1
 8000da2:	409a      	lsls	r2, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000da8:	69bb      	ldr	r3, [r7, #24]
 8000daa:	3301      	adds	r3, #1
 8000dac:	61bb      	str	r3, [r7, #24]
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	2b07      	cmp	r3, #7
 8000db2:	d9c1      	bls.n	8000d38 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	605a      	str	r2, [r3, #4]
  }
}
 8000dba:	bf00      	nop
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	887b      	ldrh	r3, [r7, #2]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000de0:	2301      	movs	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	e001      	b.n	8000dea <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000de6:	2300      	movs	r3, #0
 8000de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr

08000df6 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	807b      	strh	r3, [r7, #2]
 8000e02:	4613      	mov	r3, r2
 8000e04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000e06:	787b      	ldrb	r3, [r7, #1]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d003      	beq.n	8000e14 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e0c:	887a      	ldrh	r2, [r7, #2]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000e12:	e002      	b.n	8000e1a <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8000e14:	887a      	ldrh	r2, [r7, #2]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	615a      	str	r2, [r3, #20]
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b087      	sub	sp, #28
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000e30:	2300      	movs	r3, #0
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	da03      	bge.n	8000e4e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000e46:	4b2e      	ldr	r3, [pc, #184]	; (8000f00 <GPIO_PinRemapConfig+0xdc>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	617b      	str	r3, [r7, #20]
 8000e4c:	e002      	b.n	8000e54 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <GPIO_PinRemapConfig+0xdc>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	f003 030f 	and.w	r3, r3, #15
 8000e5c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000e6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000e6e:	d10a      	bne.n	8000e86 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000e76:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000e78:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <GPIO_PinRemapConfig+0xdc>)
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	4a20      	ldr	r2, [pc, #128]	; (8000f00 <GPIO_PinRemapConfig+0xdc>)
 8000e7e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000e82:	6053      	str	r3, [r2, #4]
 8000e84:	e021      	b.n	8000eca <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d00e      	beq.n	8000eae <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000e90:	2203      	movs	r2, #3
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	697a      	ldr	r2, [r7, #20]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e00d      	b.n	8000eca <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	0d5b      	lsrs	r3, r3, #21
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000ec8:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d008      	beq.n	8000ee2 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	0d5b      	lsrs	r3, r3, #21
 8000ed4:	011b      	lsls	r3, r3, #4
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	697a      	ldr	r2, [r7, #20]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	da03      	bge.n	8000ef0 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000ee8:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <GPIO_PinRemapConfig+0xdc>)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8000eee:	e002      	b.n	8000ef6 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8000ef0:	4a03      	ldr	r2, [pc, #12]	; (8000f00 <GPIO_PinRemapConfig+0xdc>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	6053      	str	r3, [r2, #4]
}
 8000ef6:	bf00      	nop
 8000ef8:	371c      	adds	r7, #28
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bc80      	pop	{r7}
 8000efe:	4770      	bx	lr
 8000f00:	40010000 	.word	0x40010000

08000f04 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b08a      	sub	sp, #40	; 0x28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f12:	2300      	movs	r3, #0
 8000f14:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000f16:	2304      	movs	r3, #4
 8000f18:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000f1a:	4b57      	ldr	r3, [pc, #348]	; (8001078 <I2C_Init+0x174>)
 8000f1c:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	889b      	ldrh	r3, [r3, #4]
 8000f22:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8000f24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f2a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 f963 	bl	80011fc <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	; (800107c <I2C_Init+0x178>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0c9b      	lsrs	r3, r3, #18
 8000f44:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000f46:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f4a:	4313      	orrs	r3, r2
 8000f4c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f52:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	881b      	ldrh	r3, [r3, #0]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000f64:	2300      	movs	r3, #0
 8000f66:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a44      	ldr	r2, [pc, #272]	; (8001080 <I2C_Init+0x17c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d815      	bhi.n	8000f9e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000f80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d801      	bhi.n	8000f8a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000f86:	2304      	movs	r3, #4
 8000f88:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8000f8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000f92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000f94:	3301      	adds	r3, #1
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	841a      	strh	r2, [r3, #32]
 8000f9c:	e040      	b.n	8001020 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	88db      	ldrh	r3, [r3, #6]
 8000fa2:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d109      	bne.n	8000fbe <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	4413      	add	r3, r2
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fba:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000fbc:	e00e      	b.n	8000fdc <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	4413      	add	r3, r2
 8000fc8:	009a      	lsls	r2, r3, #2
 8000fca:	4413      	add	r3, r2
 8000fcc:	69fa      	ldr	r2, [r7, #28]
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000fd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fda:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 8000fdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d103      	bne.n	8000fee <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 8000fe6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 8000fee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000ff0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000ffe:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 8001000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001002:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001006:	fb02 f303 	mul.w	r3, r2, r3
 800100a:	4a1e      	ldr	r2, [pc, #120]	; (8001084 <I2C_Init+0x180>)
 800100c:	fb82 1203 	smull	r1, r2, r2, r3
 8001010:	1192      	asrs	r2, r2, #6
 8001012:	17db      	asrs	r3, r3, #31
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	3301      	adds	r3, #1
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001024:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	881b      	ldrh	r3, [r3, #0]
 800102a:	b29b      	uxth	r3, r3
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	881b      	ldrh	r3, [r3, #0]
 800103a:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 800103c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800103e:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8001042:	f023 0302 	bic.w	r3, r3, #2
 8001046:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	889a      	ldrh	r2, [r3, #4]
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	895b      	ldrh	r3, [r3, #10]
 8001050:	4313      	orrs	r3, r2
 8001052:	b29a      	uxth	r2, r3
 8001054:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001056:	4313      	orrs	r3, r2
 8001058:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800105e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	899a      	ldrh	r2, [r3, #12]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	891b      	ldrh	r3, [r3, #8]
 8001068:	4313      	orrs	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	811a      	strh	r2, [r3, #8]
}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	007a1200 	.word	0x007a1200
 800107c:	431bde83 	.word	0x431bde83
 8001080:	000186a0 	.word	0x000186a0
 8001084:	10624dd3 	.word	0x10624dd3

08001088 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d008      	beq.n	80010ac <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	f043 0301 	orr.w	r3, r3, #1
 80010a4:	b29a      	uxth	r2, r3
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 80010aa:	e007      	b.n	80010bc <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	881b      	ldrh	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	801a      	strh	r2, [r3, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b087      	sub	sp, #28
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	6078      	str	r0, [r7, #4]
 80010ce:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80010dc:	2300      	movs	r3, #0
 80010de:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	8a9b      	ldrh	r3, [r3, #20]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	8b1b      	ldrh	r3, [r3, #24]
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	041b      	lsls	r3, r3, #16
 80010f4:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001100:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4013      	ands	r3, r2
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	429a      	cmp	r2, r3
 800110c:	d102      	bne.n	8001114 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 800110e:	2301      	movs	r3, #1
 8001110:	75fb      	strb	r3, [r7, #23]
 8001112:	e001      	b.n	8001118 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001114:	2300      	movs	r3, #0
 8001116:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8001118:	7dfb      	ldrb	r3, [r7, #23]
}
 800111a:	4618      	mov	r0, r3
 800111c:	371c      	adds	r7, #28
 800111e:	46bd      	mov	sp, r7
 8001120:	bc80      	pop	{r7}
 8001122:	4770      	bx	lr

08001124 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 800112c:	4a03      	ldr	r2, [pc, #12]	; (800113c <RCC_USBCLKConfig+0x18>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6013      	str	r3, [r2, #0]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	bc80      	pop	{r7}
 800113a:	4770      	bx	lr
 800113c:	424200d8 	.word	0x424200d8

08001140 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <RCC_ADCCLKConfig+0x34>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001158:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4313      	orrs	r3, r2
 8001160:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <RCC_ADCCLKConfig+0x34>)
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6053      	str	r3, [r2, #4]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	bc80      	pop	{r7}
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001182:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <RCC_LSEConfig+0x3c>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <RCC_LSEConfig+0x3c>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d002      	beq.n	800119a <RCC_LSEConfig+0x22>
 8001194:	2b04      	cmp	r3, #4
 8001196:	d004      	beq.n	80011a2 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8001198:	e007      	b.n	80011aa <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <RCC_LSEConfig+0x3c>)
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
      break;
 80011a0:	e003      	b.n	80011aa <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 80011a2:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <RCC_LSEConfig+0x3c>)
 80011a4:	2205      	movs	r2, #5
 80011a6:	701a      	strb	r2, [r3, #0]
      break;            
 80011a8:	bf00      	nop
  }
}
 80011aa:	bf00      	nop
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bc80      	pop	{r7}
 80011b2:	4770      	bx	lr
 80011b4:	40021020 	.word	0x40021020

080011b8 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <RCC_RTCCLKConfig+0x20>)
 80011c2:	6a1a      	ldr	r2, [r3, #32]
 80011c4:	4904      	ldr	r1, [pc, #16]	; (80011d8 <RCC_RTCCLKConfig+0x20>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	620b      	str	r3, [r1, #32]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bc80      	pop	{r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40021000 	.word	0x40021000

080011dc <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <RCC_RTCCLKCmd+0x1c>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	6013      	str	r3, [r2, #0]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	4242043c 	.word	0x4242043c

080011fc <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b087      	sub	sp, #28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001214:	4b4f      	ldr	r3, [pc, #316]	; (8001354 <RCC_GetClocksFreq+0x158>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	2b08      	cmp	r3, #8
 8001222:	d011      	beq.n	8001248 <RCC_GetClocksFreq+0x4c>
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	2b08      	cmp	r3, #8
 8001228:	d83a      	bhi.n	80012a0 <RCC_GetClocksFreq+0xa4>
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d003      	beq.n	8001238 <RCC_GetClocksFreq+0x3c>
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2b04      	cmp	r3, #4
 8001234:	d004      	beq.n	8001240 <RCC_GetClocksFreq+0x44>
 8001236:	e033      	b.n	80012a0 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a47      	ldr	r2, [pc, #284]	; (8001358 <RCC_GetClocksFreq+0x15c>)
 800123c:	601a      	str	r2, [r3, #0]
      break;
 800123e:	e033      	b.n	80012a8 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a45      	ldr	r2, [pc, #276]	; (8001358 <RCC_GetClocksFreq+0x15c>)
 8001244:	601a      	str	r2, [r3, #0]
      break;
 8001246:	e02f      	b.n	80012a8 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001248:	4b42      	ldr	r3, [pc, #264]	; (8001354 <RCC_GetClocksFreq+0x158>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001250:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001252:	4b40      	ldr	r3, [pc, #256]	; (8001354 <RCC_GetClocksFreq+0x158>)
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800125a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	0c9b      	lsrs	r3, r3, #18
 8001260:	3302      	adds	r3, #2
 8001262:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d106      	bne.n	8001278 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	4a3b      	ldr	r2, [pc, #236]	; (800135c <RCC_GetClocksFreq+0x160>)
 800126e:	fb03 f202 	mul.w	r2, r3, r2
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001276:	e017      	b.n	80012a8 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001278:	4b36      	ldr	r3, [pc, #216]	; (8001354 <RCC_GetClocksFreq+0x158>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	4a35      	ldr	r2, [pc, #212]	; (800135c <RCC_GetClocksFreq+0x160>)
 8001288:	fb03 f202 	mul.w	r2, r3, r2
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	601a      	str	r2, [r3, #0]
      break;
 8001290:	e00a      	b.n	80012a8 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	4a30      	ldr	r2, [pc, #192]	; (8001358 <RCC_GetClocksFreq+0x15c>)
 8001296:	fb03 f202 	mul.w	r2, r3, r2
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
      break;
 800129e:	e003      	b.n	80012a8 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a2d      	ldr	r2, [pc, #180]	; (8001358 <RCC_GetClocksFreq+0x15c>)
 80012a4:	601a      	str	r2, [r3, #0]
      break;
 80012a6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <RCC_GetClocksFreq+0x158>)
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	091b      	lsrs	r3, r3, #4
 80012b6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80012b8:	4a29      	ldr	r2, [pc, #164]	; (8001360 <RCC_GetClocksFreq+0x164>)
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	4413      	add	r3, r2
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	40da      	lsrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80012d0:	4b20      	ldr	r3, [pc, #128]	; (8001354 <RCC_GetClocksFreq+0x158>)
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80012d8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80012e0:	4a1f      	ldr	r2, [pc, #124]	; (8001360 <RCC_GetClocksFreq+0x164>)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685a      	ldr	r2, [r3, #4]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <RCC_GetClocksFreq+0x158>)
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001300:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	0adb      	lsrs	r3, r3, #11
 8001306:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001308:	4a15      	ldr	r2, [pc, #84]	; (8001360 <RCC_GetClocksFreq+0x164>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	4413      	add	r3, r2
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b2db      	uxtb	r3, r3
 8001312:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685a      	ldr	r2, [r3, #4]
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	40da      	lsrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <RCC_GetClocksFreq+0x158>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001328:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	0b9b      	lsrs	r3, r3, #14
 800132e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001330:	4a0c      	ldr	r2, [pc, #48]	; (8001364 <RCC_GetClocksFreq+0x168>)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	b2db      	uxtb	r3, r3
 800133a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	fbb2 f2f3 	udiv	r2, r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	611a      	str	r2, [r3, #16]
}
 800134a:	bf00      	nop
 800134c:	371c      	adds	r7, #28
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr
 8001354:	40021000 	.word	0x40021000
 8001358:	007a1200 	.word	0x007a1200
 800135c:	003d0900 	.word	0x003d0900
 8001360:	20000018 	.word	0x20000018
 8001364:	20000028 	.word	0x20000028

08001368 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001374:	78fb      	ldrb	r3, [r7, #3]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800137a:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <RCC_AHBPeriphClockCmd+0x38>)
 800137c:	695a      	ldr	r2, [r3, #20]
 800137e:	4908      	ldr	r1, [pc, #32]	; (80013a0 <RCC_AHBPeriphClockCmd+0x38>)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4313      	orrs	r3, r2
 8001384:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001386:	e006      	b.n	8001396 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <RCC_AHBPeriphClockCmd+0x38>)
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	43db      	mvns	r3, r3
 8001390:	4903      	ldr	r1, [pc, #12]	; (80013a0 <RCC_AHBPeriphClockCmd+0x38>)
 8001392:	4013      	ands	r3, r2
 8001394:	614b      	str	r3, [r1, #20]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	40021000 	.word	0x40021000

080013a4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <RCC_APB2PeriphClockCmd+0x38>)
 80013b8:	699a      	ldr	r2, [r3, #24]
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <RCC_APB2PeriphClockCmd+0x38>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4313      	orrs	r3, r2
 80013c0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80013c2:	e006      	b.n	80013d2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80013c4:	4b05      	ldr	r3, [pc, #20]	; (80013dc <RCC_APB2PeriphClockCmd+0x38>)
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	4903      	ldr	r1, [pc, #12]	; (80013dc <RCC_APB2PeriphClockCmd+0x38>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	618b      	str	r3, [r1, #24]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40021000 	.word	0x40021000

080013e0 <RCC_APB1PeriphResetCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <RCC_APB1PeriphResetCmd+0x20>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <RCC_APB1PeriphResetCmd+0x38>)
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	4908      	ldr	r1, [pc, #32]	; (8001418 <RCC_APB1PeriphResetCmd+0x38>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	610b      	str	r3, [r1, #16]
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
  }
}
 80013fe:	e006      	b.n	800140e <RCC_APB1PeriphResetCmd+0x2e>
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <RCC_APB1PeriphResetCmd+0x38>)
 8001402:	691a      	ldr	r2, [r3, #16]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	43db      	mvns	r3, r3
 8001408:	4903      	ldr	r1, [pc, #12]	; (8001418 <RCC_APB1PeriphResetCmd+0x38>)
 800140a:	4013      	ands	r3, r2
 800140c:	610b      	str	r3, [r1, #16]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	40021000 	.word	0x40021000

0800141c <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8001426:	4a04      	ldr	r2, [pc, #16]	; (8001438 <RCC_MCOConfig+0x1c>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	7013      	strb	r3, [r2, #0]
}
 800142c:	bf00      	nop
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	bc80      	pop	{r7}
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	40021007 	.word	0x40021007

0800143c <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	460b      	mov	r3, r1
 8001446:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	887a      	ldrh	r2, [r7, #2]
 800144c:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001464:	b29b      	uxth	r3, r3
}
 8001466:	4618      	mov	r0, r3
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800147c:	b29b      	uxth	r3, r3
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr

08001488 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001494:	2300      	movs	r3, #0
 8001496:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001498:	2300      	movs	r3, #0
 800149a:	81bb      	strh	r3, [r7, #12]
 800149c:	2300      	movs	r3, #0
 800149e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8a1b      	ldrh	r3, [r3, #16]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	887b      	ldrh	r3, [r7, #2]
 80014a8:	4013      	ands	r3, r2
 80014aa:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	899b      	ldrh	r3, [r3, #12]
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	4013      	ands	r3, r2
 80014b6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80014b8:	89bb      	ldrh	r3, [r7, #12]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d005      	beq.n	80014ca <TIM_GetITStatus+0x42>
 80014be:	897b      	ldrh	r3, [r7, #10]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d002      	beq.n	80014ca <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 80014c4:	2301      	movs	r3, #1
 80014c6:	73fb      	strb	r3, [r7, #15]
 80014c8:	e001      	b.n	80014ce <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 80014ca:	2300      	movs	r3, #0
 80014cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80014e6:	887b      	ldrh	r3, [r7, #2]
 80014e8:	43db      	mvns	r3, r3
 80014ea:	b29a      	uxth	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	821a      	strh	r2, [r3, #16]
}
 80014f0:	bf00      	nop
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bc80      	pop	{r7}
 80014f8:	4770      	bx	lr
	...

080014fc <main>:
#endif



int main(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0

  // SYS CLK Init 
  BSP_RCC_Init();
 8001500:	f7fe ffe4 	bl	80004cc <BSP_RCC_Init>

  /** Config SWJ Reamp 
    *   If using the PA15、PA14、PA13、PB4、PB3 for Remapping Pin, these Clock Must be Config before SWJ REMAP config Function!
    */
  sys_SWJ_REMAP_Config(SWJ_ENABLE);
 8001504:	2000      	movs	r0, #0
 8001506:	f7ff fa2b 	bl	8000960 <sys_SWJ_REMAP_Config>
  // BSP_I2C_Init(I2C1);
  BSP_I2C_Init(I2C2);
 800150a:	4805      	ldr	r0, [pc, #20]	; (8001520 <main+0x24>)
 800150c:	f7fe fe4d 	bl	80001aa <BSP_I2C_Init>
  while (1)
  {
    // BSP_I2C_IsDeviceConnected(I2C1,(0x1A<<1));
    BSP_I2C_IsDeviceConnected(I2C2,(0x1A<<1));
 8001510:	2134      	movs	r1, #52	; 0x34
 8001512:	4803      	ldr	r0, [pc, #12]	; (8001520 <main+0x24>)
 8001514:	f7fe ff08 	bl	8000328 <BSP_I2C_IsDeviceConnected>
    delay_ms(100);
 8001518:	2064      	movs	r0, #100	; 0x64
 800151a:	f7ff f9f1 	bl	8000900 <delay_ms>
    BSP_I2C_IsDeviceConnected(I2C2,(0x1A<<1));
 800151e:	e7f7      	b.n	8001510 <main+0x14>
 8001520:	40005800 	.word	0x40005800

08001524 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001534:	e7fe      	b.n	8001534 <HardFault_Handler+0x4>

08001536 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800153a:	e7fe      	b.n	800153a <MemManage_Handler+0x4>

0800153c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001540:	e7fe      	b.n	8001540 <BusFault_Handler+0x4>

08001542 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001546:	e7fe      	b.n	8001546 <UsageFault_Handler+0x4>

08001548 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
}
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001578:	480d      	ldr	r0, [pc, #52]	; (80015b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800157a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800157c:	f7ff fa1e 	bl	80009bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <LoopForever+0xe>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <LoopForever+0x16>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015a6:	f000 f811 	bl	80015cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015aa:	f7ff ffa7 	bl	80014fc <main>

080015ae <LoopForever>:

LoopForever:
  b LoopForever
 80015ae:	e7fe      	b.n	80015ae <LoopForever>
  ldr   r0, =_estack
 80015b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80015bc:	08001634 	.word	0x08001634
  ldr r2, =_sbss
 80015c0:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80015c4:	2000007c 	.word	0x2000007c

080015c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC1_2_IRQHandler>
	...

080015cc <__libc_init_array>:
 80015cc:	b570      	push	{r4, r5, r6, lr}
 80015ce:	2600      	movs	r6, #0
 80015d0:	4d0c      	ldr	r5, [pc, #48]	; (8001604 <__libc_init_array+0x38>)
 80015d2:	4c0d      	ldr	r4, [pc, #52]	; (8001608 <__libc_init_array+0x3c>)
 80015d4:	1b64      	subs	r4, r4, r5
 80015d6:	10a4      	asrs	r4, r4, #2
 80015d8:	42a6      	cmp	r6, r4
 80015da:	d109      	bne.n	80015f0 <__libc_init_array+0x24>
 80015dc:	f000 f81a 	bl	8001614 <_init>
 80015e0:	2600      	movs	r6, #0
 80015e2:	4d0a      	ldr	r5, [pc, #40]	; (800160c <__libc_init_array+0x40>)
 80015e4:	4c0a      	ldr	r4, [pc, #40]	; (8001610 <__libc_init_array+0x44>)
 80015e6:	1b64      	subs	r4, r4, r5
 80015e8:	10a4      	asrs	r4, r4, #2
 80015ea:	42a6      	cmp	r6, r4
 80015ec:	d105      	bne.n	80015fa <__libc_init_array+0x2e>
 80015ee:	bd70      	pop	{r4, r5, r6, pc}
 80015f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80015f4:	4798      	blx	r3
 80015f6:	3601      	adds	r6, #1
 80015f8:	e7ee      	b.n	80015d8 <__libc_init_array+0xc>
 80015fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80015fe:	4798      	blx	r3
 8001600:	3601      	adds	r6, #1
 8001602:	e7f2      	b.n	80015ea <__libc_init_array+0x1e>
 8001604:	0800162c 	.word	0x0800162c
 8001608:	0800162c 	.word	0x0800162c
 800160c:	0800162c 	.word	0x0800162c
 8001610:	08001630 	.word	0x08001630

08001614 <_init>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr

08001620 <_fini>:
 8001620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001622:	bf00      	nop
 8001624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001626:	bc08      	pop	{r3}
 8001628:	469e      	mov	lr, r3
 800162a:	4770      	bx	lr
