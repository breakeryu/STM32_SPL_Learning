
SPL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001834  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001964  08001964  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001964  08001964  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001964  08001964  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001964  08001964  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001964  08001964  00011964  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001968  08001968  00011968  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800196c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  2000002c  08001998  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001998  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a4c  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184f  00000000  00000000  00027aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  000292f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000880  00000000  00000000  00029c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c07  00000000  00000000  0002a4e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000098ea  00000000  00000000  0002e0ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055c19  00000000  00000000  000379d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008d5f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002718  00000000  00000000  0008d644  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	0800194c 	.word	0x0800194c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	0800194c 	.word	0x0800194c

08000170 <USB_LP_CAN_RX0_IRQHandler>:
  * @功	能	CAN1中断接收
  * @参	数	无
  * @返	回	无
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
	CanRxMsg RxMsg;

	/* 从FIFO中接收数据包 */
	CAN_Receive(CAN1, CAN_FIFO0, &RxMsg);
 8000176:	1d3b      	adds	r3, r7, #4
 8000178:	461a      	mov	r2, r3
 800017a:	2100      	movs	r1, #0
 800017c:	4803      	ldr	r0, [pc, #12]	; (800018c <USB_LP_CAN_RX0_IRQHandler+0x1c>)
 800017e:	f000 fe11 	bl	8000da4 <CAN_Receive>
	
	/* 数据包传入协议层进行解析 */
	// canDispatch(&RxMsg);
}
 8000182:	bf00      	nop
 8000184:	3718      	adds	r7, #24
 8000186:	46bd      	mov	sp, r7
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40006400 	.word	0x40006400

08000190 <BSP_RCC_Init>:




void BSP_RCC_Init(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  SystemInit();
 8000194:	f000 fc4a 	bl	8000a2c <SystemInit>

  /* Configure the System Peripheral clock prescalers */
  BSP_RCC_Periph_Clock_Init();
 8000198:	f000 f80c 	bl	80001b4 <BSP_RCC_Periph_Clock_Init>

  //Update SystemCoreClock variable according to Clock Register Values
  SystemCoreClockUpdate();
 800019c:	f000 fc7a 	bl	8000a94 <SystemCoreClockUpdate>

  /* This function fills the RCC_ClockFreq structure with the current
  frequencies of different on chip clocks (for debug purpose) */
  RCC_GetClocksFreq(&RCC_ClockFreq);
 80001a0:	4803      	ldr	r0, [pc, #12]	; (80001b0 <BSP_RCC_Init+0x20>)
 80001a2:	f001 f885 	bl	80012b0 <RCC_GetClocksFreq>

  /* NVIC configuration ------------------------------------------------------*/
  //BSP_RCC_NVIC_Configuration();

  delay_init(72);
 80001a6:	2048      	movs	r0, #72	; 0x48
 80001a8:	f000 fb8a 	bl	80008c0 <delay_init>

  // _mcu_rev_id = DBGMCU_GetREVID();
  // _mcu_dev_id = DBGMCU_GetDEVID();

}
 80001ac:	bf00      	nop
 80001ae:	bd80      	pop	{r7, pc}
 80001b0:	20000048 	.word	0x20000048

080001b4 <BSP_RCC_Periph_Clock_Init>:


void BSP_RCC_Periph_Clock_Init(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0



  //ADC CLK Prescaler, ADC CLK = 72 / 6 = 12 Mhz
  RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 80001b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80001bc:	f001 f81a 	bl	80011f4 <RCC_ADCCLKConfig>
  //USB OTG CLK FS Prescaler, when PLL = 72Mhz, OTGFSPRE = 0
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 80001c0:	2000      	movs	r0, #0
 80001c2:	f001 f809 	bl	80011d8 <RCC_USBCLKConfig>
  //MCO 
  RCC_MCOConfig(RCC_MCO_NoClock);
 80001c6:	2000      	movs	r0, #0
 80001c8:	f001 f982 	bl	80014d0 <RCC_MCOConfig>


  //Clear Clock interrupt register
  RCC->CIR = 0;
 80001cc:	4b0f      	ldr	r3, [pc, #60]	; (800020c <BSP_RCC_Periph_Clock_Init+0x58>)
 80001ce:	2200      	movs	r2, #0
 80001d0:	609a      	str	r2, [r3, #8]

  //Reset APB2 and APB1 Peripheral
  RCC->APB2RSTR = 0;
 80001d2:	4b0e      	ldr	r3, [pc, #56]	; (800020c <BSP_RCC_Periph_Clock_Init+0x58>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	60da      	str	r2, [r3, #12]
  RCC->APB1RSTR = 0;
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <BSP_RCC_Periph_Clock_Init+0x58>)
 80001da:	2200      	movs	r2, #0
 80001dc:	611a      	str	r2, [r3, #16]

  //AHB Peripheral CLK Enable
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SRAM  | RCC_AHBPeriph_FLITF , ENABLE);
 80001de:	2101      	movs	r1, #1
 80001e0:	2014      	movs	r0, #20
 80001e2:	f001 f91b 	bl	800141c <RCC_AHBPeriphClockCmd>
  

  //APB2 Peripheral CLK Enable
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA  |
 80001e6:	2101      	movs	r1, #1
 80001e8:	203d      	movs	r0, #61	; 0x3d
 80001ea:	f001 f935 	bl	8001458 <RCC_APB2PeriphClockCmd>
                          RCC_APB2Periph_GPIOB  | RCC_APB2Periph_GPIOC |
                          RCC_APB2Periph_GPIOD,
                        ENABLE);

  //APB1 Peripheral CLK Enable
  RCC->APB1ENR = 0;
 80001ee:	4b07      	ldr	r3, [pc, #28]	; (800020c <BSP_RCC_Periph_Clock_Init+0x58>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	61da      	str	r2, [r3, #28]
  
  //RTC CLK
  RCC_LSEConfig(RCC_LSE_ON);
 80001f4:	2001      	movs	r0, #1
 80001f6:	f001 f819 	bl	800122c <RCC_LSEConfig>
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 80001fa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80001fe:	f001 f835 	bl	800126c <RCC_RTCCLKConfig>
  RCC_RTCCLKCmd(ENABLE);
 8000202:	2001      	movs	r0, #1
 8000204:	f001 f844 	bl	8001290 <RCC_RTCCLKCmd>




}
 8000208:	bf00      	nop
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40021000 	.word	0x40021000

08000210 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM4, TIM_IT_CC1) != RESET)
 8000214:	2102      	movs	r1, #2
 8000216:	4815      	ldr	r0, [pc, #84]	; (800026c <TIM4_IRQHandler+0x5c>)
 8000218:	f001 f990 	bl	800153c <TIM_GetITStatus>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d021      	beq.n	8000266 <TIM4_IRQHandler+0x56>
  {
    TIM_ClearITPendingBit(TIM4, TIM_IT_CC1);
 8000222:	2102      	movs	r1, #2
 8000224:	4811      	ldr	r0, [pc, #68]	; (800026c <TIM4_IRQHandler+0x5c>)
 8000226:	f001 f9b2 	bl	800158e <TIM_ClearITPendingBit>

    /* Pin PC.06 toggling with frequency = 500 Hz */
    GPIO_WriteBit(GPIOB, GPIO_Pin_6, (BitAction)(1 - GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_6)));
 800022a:	2140      	movs	r1, #64	; 0x40
 800022c:	4810      	ldr	r0, [pc, #64]	; (8000270 <TIM4_IRQHandler+0x60>)
 800022e:	f000 ff32 	bl	8001096 <GPIO_ReadOutputDataBit>
 8000232:	4603      	mov	r3, r0
 8000234:	f1c3 0301 	rsb	r3, r3, #1
 8000238:	b2db      	uxtb	r3, r3
 800023a:	461a      	mov	r2, r3
 800023c:	2140      	movs	r1, #64	; 0x40
 800023e:	480c      	ldr	r0, [pc, #48]	; (8000270 <TIM4_IRQHandler+0x60>)
 8000240:	f000 ff42 	bl	80010c8 <GPIO_WriteBit>

    
    capture = TIM_GetCapture1(TIM4);
 8000244:	4809      	ldr	r0, [pc, #36]	; (800026c <TIM4_IRQHandler+0x5c>)
 8000246:	f001 f961 	bl	800150c <TIM_GetCapture1>
 800024a:	4603      	mov	r3, r0
 800024c:	461a      	mov	r2, r3
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <TIM4_IRQHandler+0x64>)
 8000250:	801a      	strh	r2, [r3, #0]
    TIM_SetCompare1(TIM4, capture + CCR1_Val);
 8000252:	4b08      	ldr	r3, [pc, #32]	; (8000274 <TIM4_IRQHandler+0x64>)
 8000254:	881a      	ldrh	r2, [r3, #0]
 8000256:	4b08      	ldr	r3, [pc, #32]	; (8000278 <TIM4_IRQHandler+0x68>)
 8000258:	881b      	ldrh	r3, [r3, #0]
 800025a:	4413      	add	r3, r2
 800025c:	b29b      	uxth	r3, r3
 800025e:	4619      	mov	r1, r3
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <TIM4_IRQHandler+0x5c>)
 8000262:	f001 f945 	bl	80014f0 <TIM_SetCompare1>
  }

}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40000800 	.word	0x40000800
 8000270:	40010c00 	.word	0x40010c00
 8000274:	2000005c 	.word	0x2000005c
 8000278:	20000000 	.word	0x20000000

0800027c <TIM5_IRQHandler>:
  * @brief  This function handles TIM5 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM5_IRQHandler(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
 /* Clear TIM3 Capture compare interrupt pending bit */
  TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
 8000280:	2102      	movs	r1, #2
 8000282:	4817      	ldr	r0, [pc, #92]	; (80002e0 <TIM5_IRQHandler+0x64>)
 8000284:	f001 f983 	bl	800158e <TIM_ClearITPendingBit>

  /* Get the Input Capture value */
  IC1Value = TIM_GetCapture1(TIM5);
 8000288:	4815      	ldr	r0, [pc, #84]	; (80002e0 <TIM5_IRQHandler+0x64>)
 800028a:	f001 f93f 	bl	800150c <TIM_GetCapture1>
 800028e:	4603      	mov	r3, r0
 8000290:	461a      	mov	r2, r3
 8000292:	4b14      	ldr	r3, [pc, #80]	; (80002e4 <TIM5_IRQHandler+0x68>)
 8000294:	801a      	strh	r2, [r3, #0]

  if (IC1Value != 0)
 8000296:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <TIM5_IRQHandler+0x68>)
 8000298:	881b      	ldrh	r3, [r3, #0]
 800029a:	2b00      	cmp	r3, #0
 800029c:	d017      	beq.n	80002ce <TIM5_IRQHandler+0x52>
  {
    /* Duty cycle computation */
    DutyCycle = ( TIM_GetCapture2(TIM5) * 100) / IC1Value;
 800029e:	4810      	ldr	r0, [pc, #64]	; (80002e0 <TIM5_IRQHandler+0x64>)
 80002a0:	f001 f940 	bl	8001524 <TIM_GetCapture2>
 80002a4:	4603      	mov	r3, r0
 80002a6:	461a      	mov	r2, r3
 80002a8:	2364      	movs	r3, #100	; 0x64
 80002aa:	fb02 f303 	mul.w	r3, r2, r3
 80002ae:	4a0d      	ldr	r2, [pc, #52]	; (80002e4 <TIM5_IRQHandler+0x68>)
 80002b0:	8812      	ldrh	r2, [r2, #0]
 80002b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80002b6:	b29a      	uxth	r2, r3
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <TIM5_IRQHandler+0x6c>)
 80002ba:	801a      	strh	r2, [r3, #0]

    /* Frequency computation */
    Frequency = SystemCoreClock / IC1Value;
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <TIM5_IRQHandler+0x70>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a08      	ldr	r2, [pc, #32]	; (80002e4 <TIM5_IRQHandler+0x68>)
 80002c2:	8812      	ldrh	r2, [r2, #0]
 80002c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80002c8:	4a09      	ldr	r2, [pc, #36]	; (80002f0 <TIM5_IRQHandler+0x74>)
 80002ca:	6013      	str	r3, [r2, #0]
  {
    DutyCycle = 0;
    Frequency = 0;
  }

}
 80002cc:	e005      	b.n	80002da <TIM5_IRQHandler+0x5e>
    DutyCycle = 0;
 80002ce:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <TIM5_IRQHandler+0x6c>)
 80002d0:	2200      	movs	r2, #0
 80002d2:	801a      	strh	r2, [r3, #0]
    Frequency = 0;
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <TIM5_IRQHandler+0x74>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40000c00 	.word	0x40000c00
 80002e4:	2000005e 	.word	0x2000005e
 80002e8:	20000060 	.word	0x20000060
 80002ec:	20000004 	.word	0x20000004
 80002f0:	20000064 	.word	0x20000064

080002f4 <BSP_USART_Init>:
  *     @arg 921600
  *     @arg etc.
  * @retval None
  */
void BSP_USART_Init(USART_TypeDef *usart, uint32_t baud)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
 80002fc:	6039      	str	r1, [r7, #0]
    BSP_USART_IOCfg(usart);
 80002fe:	6878      	ldr	r0, [r7, #4]
 8000300:	f000 f8b4 	bl	800046c <BSP_USART_IOCfg>
    BSP_USART_IORemap(usart);
 8000304:	6878      	ldr	r0, [r7, #4]
 8000306:	f000 f911 	bl	800052c <BSP_USART_IORemap>
    BSP_USART_ClockEn(usart);
 800030a:	6878      	ldr	r0, [r7, #4]
 800030c:	f000 f93c 	bl	8000588 <BSP_USART_ClockEn>
	BSP_USART_SetMode(usart, baud);
 8000310:	6839      	ldr	r1, [r7, #0]
 8000312:	6878      	ldr	r0, [r7, #4]
 8000314:	f000 f804 	bl	8000320 <BSP_USART_SetMode>
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}

08000320 <BSP_USART_SetMode>:


void BSP_USART_SetMode(USART_TypeDef *usart, uint32_t baud)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b086      	sub	sp, #24
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
	USART_InitTypeDef USART_InitStructure;

	switch((uint32_t)usart)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a33      	ldr	r2, [pc, #204]	; (80003fc <BSP_USART_SetMode+0xdc>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d009      	beq.n	8000346 <BSP_USART_SetMode+0x26>
 8000332:	4a32      	ldr	r2, [pc, #200]	; (80003fc <BSP_USART_SetMode+0xdc>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d85d      	bhi.n	80003f4 <BSP_USART_SetMode+0xd4>
 8000338:	4a31      	ldr	r2, [pc, #196]	; (8000400 <BSP_USART_SetMode+0xe0>)
 800033a:	4293      	cmp	r3, r2
 800033c:	d023      	beq.n	8000386 <BSP_USART_SetMode+0x66>
 800033e:	4a31      	ldr	r2, [pc, #196]	; (8000404 <BSP_USART_SetMode+0xe4>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d037      	beq.n	80003b4 <BSP_USART_SetMode+0x94>
		{

		}
	}

}
 8000344:	e056      	b.n	80003f4 <BSP_USART_SetMode+0xd4>
			USART_InitStructure.USART_BaudRate = baud;
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	60bb      	str	r3, [r7, #8]
			USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800034a:	2300      	movs	r3, #0
 800034c:	81bb      	strh	r3, [r7, #12]
			USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800034e:	2300      	movs	r3, #0
 8000350:	81fb      	strh	r3, [r7, #14]
			USART_InitStructure.USART_Parity = USART_Parity_No;
 8000352:	2300      	movs	r3, #0
 8000354:	823b      	strh	r3, [r7, #16]
			USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000356:	2300      	movs	r3, #0
 8000358:	82bb      	strh	r3, [r7, #20]
			USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800035a:	230c      	movs	r3, #12
 800035c:	827b      	strh	r3, [r7, #18]
			USART_Init(usart, &USART_InitStructure);
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	4619      	mov	r1, r3
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f001 f923 	bl	80015b0 <USART_Init>
			USART_Cmd(usart, ENABLE);
 800036a:	2101      	movs	r1, #1
 800036c:	6878      	ldr	r0, [r7, #4]
 800036e:	f001 f9d9 	bl	8001724 <USART_Cmd>
			USART_ITConfig(usart, USART_IT_RXNE, ENABLE);
 8000372:	2201      	movs	r2, #1
 8000374:	f240 5125 	movw	r1, #1317	; 0x525
 8000378:	6878      	ldr	r0, [r7, #4]
 800037a:	f001 f9f2 	bl	8001762 <USART_ITConfig>
			BSP_USART_SetIrq(usart);
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f000 f930 	bl	80005e4 <BSP_USART_SetIrq>
		break;
 8000384:	e036      	b.n	80003f4 <BSP_USART_SetMode+0xd4>
			USART_InitStructure.USART_BaudRate = baud;
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	60bb      	str	r3, [r7, #8]
			USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800038a:	2300      	movs	r3, #0
 800038c:	81bb      	strh	r3, [r7, #12]
			USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800038e:	2300      	movs	r3, #0
 8000390:	81fb      	strh	r3, [r7, #14]
			USART_InitStructure.USART_Parity = USART_Parity_No;
 8000392:	2300      	movs	r3, #0
 8000394:	823b      	strh	r3, [r7, #16]
			USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000396:	2300      	movs	r3, #0
 8000398:	82bb      	strh	r3, [r7, #20]
			USART_InitStructure.USART_Mode = USART_Mode_Tx;
 800039a:	2308      	movs	r3, #8
 800039c:	827b      	strh	r3, [r7, #18]
			USART_Init(usart, &USART_InitStructure);
 800039e:	f107 0308 	add.w	r3, r7, #8
 80003a2:	4619      	mov	r1, r3
 80003a4:	6878      	ldr	r0, [r7, #4]
 80003a6:	f001 f903 	bl	80015b0 <USART_Init>
			USART_Cmd(usart, ENABLE);
 80003aa:	2101      	movs	r1, #1
 80003ac:	6878      	ldr	r0, [r7, #4]
 80003ae:	f001 f9b9 	bl	8001724 <USART_Cmd>
		break;
 80003b2:	e01f      	b.n	80003f4 <BSP_USART_SetMode+0xd4>
			USART_InitStructure.USART_BaudRate = baud;
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	60bb      	str	r3, [r7, #8]
			USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80003b8:	2300      	movs	r3, #0
 80003ba:	81bb      	strh	r3, [r7, #12]
			USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80003bc:	2300      	movs	r3, #0
 80003be:	81fb      	strh	r3, [r7, #14]
			USART_InitStructure.USART_Parity = USART_Parity_No;
 80003c0:	2300      	movs	r3, #0
 80003c2:	823b      	strh	r3, [r7, #16]
			USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80003c4:	2300      	movs	r3, #0
 80003c6:	82bb      	strh	r3, [r7, #20]
			USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80003c8:	230c      	movs	r3, #12
 80003ca:	827b      	strh	r3, [r7, #18]
			USART_Init(usart, &USART_InitStructure);
 80003cc:	f107 0308 	add.w	r3, r7, #8
 80003d0:	4619      	mov	r1, r3
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f001 f8ec 	bl	80015b0 <USART_Init>
			USART_Cmd(usart, ENABLE);
 80003d8:	2101      	movs	r1, #1
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f001 f9a2 	bl	8001724 <USART_Cmd>
			USART_ITConfig(usart, USART_IT_RXNE, ENABLE);
 80003e0:	2201      	movs	r2, #1
 80003e2:	f240 5125 	movw	r1, #1317	; 0x525
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f001 f9bb 	bl	8001762 <USART_ITConfig>
			BSP_USART_SetIrq(usart);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f000 f8f9 	bl	80005e4 <BSP_USART_SetIrq>
		break;
 80003f2:	bf00      	nop
}
 80003f4:	bf00      	nop
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40013800 	.word	0x40013800
 8000400:	40004400 	.word	0x40004400
 8000404:	40004800 	.word	0x40004800

08000408 <BSP_USART_SendData>:

/**********************************************************************************
  * USART发送函数
 **********************************************************************************/
void BSP_USART_SendData(USART_TypeDef *usart, uint16_t data)
{
 8000408:	b480      	push	{r7}
 800040a:	b085      	sub	sp, #20
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	460b      	mov	r3, r1
 8000412:	807b      	strh	r3, [r7, #2]
	uint32_t cnt;

	if(usart->CR1 & USART_WordLength_9b)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	899b      	ldrh	r3, [r3, #12]
 8000418:	b29b      	uxth	r3, r3
 800041a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800041e:	2b00      	cmp	r3, #0
 8000420:	d006      	beq.n	8000430 <BSP_USART_SendData+0x28>
	{
		usart->DR = data & 0x1FF;
 8000422:	887b      	ldrh	r3, [r7, #2]
 8000424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000428:	b29a      	uxth	r2, r3
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	809a      	strh	r2, [r3, #4]
 800042e:	e004      	b.n	800043a <BSP_USART_SendData+0x32>
	}
	else
	{
		usart->DR = data & 0xFF;
 8000430:	887b      	ldrh	r3, [r7, #2]
 8000432:	b2db      	uxtb	r3, r3
 8000434:	b29a      	uxth	r2, r3
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	809a      	strh	r2, [r3, #4]
	}

	cnt = 0;
 800043a:	2300      	movs	r3, #0
 800043c:	60fb      	str	r3, [r7, #12]
	while(0 == (usart->SR & USART_FLAG_TC))
 800043e:	e005      	b.n	800044c <BSP_USART_SendData+0x44>
	{
		if(cnt++ > 2000000)
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	1c5a      	adds	r2, r3, #1
 8000444:	60fa      	str	r2, [r7, #12]
 8000446:	4a08      	ldr	r2, [pc, #32]	; (8000468 <BSP_USART_SendData+0x60>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d807      	bhi.n	800045c <BSP_USART_SendData+0x54>
	while(0 == (usart->SR & USART_FLAG_TC))
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	881b      	ldrh	r3, [r3, #0]
 8000450:	b29b      	uxth	r3, r3
 8000452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f2      	beq.n	8000440 <BSP_USART_SendData+0x38>
		{
			break;
		}
	}
}
 800045a:	e000      	b.n	800045e <BSP_USART_SendData+0x56>
			break;
 800045c:	bf00      	nop
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	001e8480 	.word	0x001e8480

0800046c <BSP_USART_IOCfg>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void BSP_USART_IOCfg(USART_TypeDef *usart)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStructure;

    switch((uint32_t)usart)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a28      	ldr	r2, [pc, #160]	; (8000518 <BSP_USART_IOCfg+0xac>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d009      	beq.n	8000490 <BSP_USART_IOCfg+0x24>
 800047c:	4a26      	ldr	r2, [pc, #152]	; (8000518 <BSP_USART_IOCfg+0xac>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d845      	bhi.n	800050e <BSP_USART_IOCfg+0xa2>
 8000482:	4a26      	ldr	r2, [pc, #152]	; (800051c <BSP_USART_IOCfg+0xb0>)
 8000484:	4293      	cmp	r3, r2
 8000486:	d01c      	beq.n	80004c2 <BSP_USART_IOCfg+0x56>
 8000488:	4a25      	ldr	r2, [pc, #148]	; (8000520 <BSP_USART_IOCfg+0xb4>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d026      	beq.n	80004dc <BSP_USART_IOCfg+0x70>
	default:
		{

		}
	}
}
 800048e:	e03e      	b.n	800050e <BSP_USART_IOCfg+0xa2>
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8000490:	2318      	movs	r3, #24
 8000492:	73fb      	strb	r3, [r7, #15]
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8000494:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000498:	81bb      	strh	r3, [r7, #12]
            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800049a:	2303      	movs	r3, #3
 800049c:	73bb      	strb	r3, [r7, #14]
            GPIO_Init(GPIOA, &GPIO_InitStructure);
 800049e:	f107 030c 	add.w	r3, r7, #12
 80004a2:	4619      	mov	r1, r3
 80004a4:	481f      	ldr	r0, [pc, #124]	; (8000524 <BSP_USART_IOCfg+0xb8>)
 80004a6:	f000 fd3a 	bl	8000f1e <GPIO_Init>
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80004aa:	2304      	movs	r3, #4
 80004ac:	73fb      	strb	r3, [r7, #15]
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80004ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004b2:	81bb      	strh	r3, [r7, #12]
            GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004b4:	f107 030c 	add.w	r3, r7, #12
 80004b8:	4619      	mov	r1, r3
 80004ba:	481a      	ldr	r0, [pc, #104]	; (8000524 <BSP_USART_IOCfg+0xb8>)
 80004bc:	f000 fd2f 	bl	8000f1e <GPIO_Init>
		break;
 80004c0:	e025      	b.n	800050e <BSP_USART_IOCfg+0xa2>
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80004c2:	2318      	movs	r3, #24
 80004c4:	73fb      	strb	r3, [r7, #15]
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 80004c6:	2304      	movs	r3, #4
 80004c8:	81bb      	strh	r3, [r7, #12]
            GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004ca:	2303      	movs	r3, #3
 80004cc:	73bb      	strb	r3, [r7, #14]
            GPIO_Init(GPIOA, &GPIO_InitStructure);
 80004ce:	f107 030c 	add.w	r3, r7, #12
 80004d2:	4619      	mov	r1, r3
 80004d4:	4813      	ldr	r0, [pc, #76]	; (8000524 <BSP_USART_IOCfg+0xb8>)
 80004d6:	f000 fd22 	bl	8000f1e <GPIO_Init>
		break;
 80004da:	e018      	b.n	800050e <BSP_USART_IOCfg+0xa2>
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80004dc:	2318      	movs	r3, #24
 80004de:	73fb      	strb	r3, [r7, #15]
				GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80004e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004e4:	81bb      	strh	r3, [r7, #12]
				GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80004e6:	2303      	movs	r3, #3
 80004e8:	73bb      	strb	r3, [r7, #14]
				GPIO_Init(GPIOB, &GPIO_InitStructure);
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	4619      	mov	r1, r3
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <BSP_USART_IOCfg+0xbc>)
 80004f2:	f000 fd14 	bl	8000f1e <GPIO_Init>
				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80004f6:	2304      	movs	r3, #4
 80004f8:	73fb      	strb	r3, [r7, #15]
				GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 80004fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80004fe:	81bb      	strh	r3, [r7, #12]
				GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000500:	f107 030c 	add.w	r3, r7, #12
 8000504:	4619      	mov	r1, r3
 8000506:	4808      	ldr	r0, [pc, #32]	; (8000528 <BSP_USART_IOCfg+0xbc>)
 8000508:	f000 fd09 	bl	8000f1e <GPIO_Init>
		break;
 800050c:	bf00      	nop
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40013800 	.word	0x40013800
 800051c:	40004400 	.word	0x40004400
 8000520:	40004800 	.word	0x40004800
 8000524:	40010800 	.word	0x40010800
 8000528:	40010c00 	.word	0x40010c00

0800052c <BSP_USART_IORemap>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void BSP_USART_IORemap(USART_TypeDef *usart)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	switch((uint32_t)usart)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a10      	ldr	r2, [pc, #64]	; (8000578 <BSP_USART_IORemap+0x4c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d009      	beq.n	8000550 <BSP_USART_IORemap+0x24>
 800053c:	4a0e      	ldr	r2, [pc, #56]	; (8000578 <BSP_USART_IORemap+0x4c>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d815      	bhi.n	800056e <BSP_USART_IORemap+0x42>
 8000542:	4a0e      	ldr	r2, [pc, #56]	; (800057c <BSP_USART_IORemap+0x50>)
 8000544:	4293      	cmp	r3, r2
 8000546:	d008      	beq.n	800055a <BSP_USART_IORemap+0x2e>
 8000548:	4a0d      	ldr	r2, [pc, #52]	; (8000580 <BSP_USART_IORemap+0x54>)
 800054a:	4293      	cmp	r3, r2
 800054c:	d00a      	beq.n	8000564 <BSP_USART_IORemap+0x38>
	default:
		{

		}
	}
}
 800054e:	e00e      	b.n	800056e <BSP_USART_IORemap+0x42>
				GPIO_PinRemapConfig(GPIO_Remap_USART1, DISABLE);//PA9 PA10
 8000550:	2100      	movs	r1, #0
 8000552:	2004      	movs	r0, #4
 8000554:	f000 fdd0 	bl	80010f8 <GPIO_PinRemapConfig>
		break;
 8000558:	e009      	b.n	800056e <BSP_USART_IORemap+0x42>
			GPIO_PinRemapConfig(GPIO_Remap_USART2, DISABLE);//PA2 PA3
 800055a:	2100      	movs	r1, #0
 800055c:	2008      	movs	r0, #8
 800055e:	f000 fdcb 	bl	80010f8 <GPIO_PinRemapConfig>
		break;
 8000562:	e004      	b.n	800056e <BSP_USART_IORemap+0x42>
				GPIO_PinRemapConfig(GPIO_PartialRemap_USART3, DISABLE);
 8000564:	2100      	movs	r1, #0
 8000566:	4807      	ldr	r0, [pc, #28]	; (8000584 <BSP_USART_IORemap+0x58>)
 8000568:	f000 fdc6 	bl	80010f8 <GPIO_PinRemapConfig>
		break;
 800056c:	bf00      	nop
}
 800056e:	bf00      	nop
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	40013800 	.word	0x40013800
 800057c:	40004400 	.word	0x40004400
 8000580:	40004800 	.word	0x40004800
 8000584:	00140010 	.word	0x00140010

08000588 <BSP_USART_ClockEn>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void BSP_USART_ClockEn(USART_TypeDef *usart)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    switch((uint32_t)usart)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <BSP_USART_ClockEn+0x50>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d009      	beq.n	80005ac <BSP_USART_ClockEn+0x24>
 8000598:	4a0f      	ldr	r2, [pc, #60]	; (80005d8 <BSP_USART_ClockEn+0x50>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d818      	bhi.n	80005d0 <BSP_USART_ClockEn+0x48>
 800059e:	4a0f      	ldr	r2, [pc, #60]	; (80005dc <BSP_USART_ClockEn+0x54>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d009      	beq.n	80005b8 <BSP_USART_ClockEn+0x30>
 80005a4:	4a0e      	ldr	r2, [pc, #56]	; (80005e0 <BSP_USART_ClockEn+0x58>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d00c      	beq.n	80005c4 <BSP_USART_ClockEn+0x3c>
	default:
		{

		}
	}
}
 80005aa:	e011      	b.n	80005d0 <BSP_USART_ClockEn+0x48>
            RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);
 80005ac:	2101      	movs	r1, #1
 80005ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005b2:	f000 ff51 	bl	8001458 <RCC_APB2PeriphClockCmd>
		break;
 80005b6:	e00b      	b.n	80005d0 <BSP_USART_ClockEn+0x48>
            RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2,ENABLE);
 80005b8:	2101      	movs	r1, #1
 80005ba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80005be:	f000 ff69 	bl	8001494 <RCC_APB1PeriphClockCmd>
		break;
 80005c2:	e005      	b.n	80005d0 <BSP_USART_ClockEn+0x48>
            RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3,ENABLE);
 80005c4:	2101      	movs	r1, #1
 80005c6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80005ca:	f000 ff63 	bl	8001494 <RCC_APB1PeriphClockCmd>
		break;
 80005ce:	bf00      	nop
}
 80005d0:	bf00      	nop
 80005d2:	3708      	adds	r7, #8
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40013800 	.word	0x40013800
 80005dc:	40004400 	.word	0x40004400
 80005e0:	40004800 	.word	0x40004800

080005e4 <BSP_USART_SetIrq>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval None
  */
void BSP_USART_SetIrq(USART_TypeDef *usart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
 80005ec:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 80005f0:	f000 fb48 	bl	8000c84 <NVIC_PriorityGroupConfig>
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 3;
 80005f4:	2303      	movs	r3, #3
 80005f6:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
 80005f8:	2303      	movs	r3, #3
 80005fa:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	73fb      	strb	r3, [r7, #15]

    switch((uint32_t)usart)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4a22      	ldr	r2, [pc, #136]	; (800068c <BSP_USART_SetIrq+0xa8>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d015      	beq.n	8000634 <BSP_USART_SetIrq+0x50>
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <BSP_USART_SetIrq+0xa8>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d83a      	bhi.n	8000684 <BSP_USART_SetIrq+0xa0>
 800060e:	4a20      	ldr	r2, [pc, #128]	; (8000690 <BSP_USART_SetIrq+0xac>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d02f      	beq.n	8000674 <BSP_USART_SetIrq+0x90>
 8000614:	4a1e      	ldr	r2, [pc, #120]	; (8000690 <BSP_USART_SetIrq+0xac>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d834      	bhi.n	8000684 <BSP_USART_SetIrq+0xa0>
 800061a:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <BSP_USART_SetIrq+0xb0>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d021      	beq.n	8000664 <BSP_USART_SetIrq+0x80>
 8000620:	4a1c      	ldr	r2, [pc, #112]	; (8000694 <BSP_USART_SetIrq+0xb0>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d82e      	bhi.n	8000684 <BSP_USART_SetIrq+0xa0>
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <BSP_USART_SetIrq+0xb4>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d00b      	beq.n	8000644 <BSP_USART_SetIrq+0x60>
 800062c:	4a1b      	ldr	r2, [pc, #108]	; (800069c <BSP_USART_SetIrq+0xb8>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d010      	beq.n	8000654 <BSP_USART_SetIrq+0x70>

		}
	}


}
 8000632:	e027      	b.n	8000684 <BSP_USART_SetIrq+0xa0>
            NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8000634:	2325      	movs	r3, #37	; 0x25
 8000636:	733b      	strb	r3, [r7, #12]
            NVIC_Init(&NVIC_InitStructure);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fb33 	bl	8000ca8 <NVIC_Init>
		break;
 8000642:	e01f      	b.n	8000684 <BSP_USART_SetIrq+0xa0>
            NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000644:	2326      	movs	r3, #38	; 0x26
 8000646:	733b      	strb	r3, [r7, #12]
            NVIC_Init(&NVIC_InitStructure);
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fb2b 	bl	8000ca8 <NVIC_Init>
		break;
 8000652:	e017      	b.n	8000684 <BSP_USART_SetIrq+0xa0>
            NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8000654:	2327      	movs	r3, #39	; 0x27
 8000656:	733b      	strb	r3, [r7, #12]
            NVIC_Init(&NVIC_InitStructure);
 8000658:	f107 030c 	add.w	r3, r7, #12
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fb23 	bl	8000ca8 <NVIC_Init>
		break;
 8000662:	e00f      	b.n	8000684 <BSP_USART_SetIrq+0xa0>
            NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
 8000664:	2334      	movs	r3, #52	; 0x34
 8000666:	733b      	strb	r3, [r7, #12]
            NVIC_Init(&NVIC_InitStructure);
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	4618      	mov	r0, r3
 800066e:	f000 fb1b 	bl	8000ca8 <NVIC_Init>
		break;
 8000672:	e007      	b.n	8000684 <BSP_USART_SetIrq+0xa0>
            NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
 8000674:	2335      	movs	r3, #53	; 0x35
 8000676:	733b      	strb	r3, [r7, #12]
            NVIC_Init(&NVIC_InitStructure);
 8000678:	f107 030c 	add.w	r3, r7, #12
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fb13 	bl	8000ca8 <NVIC_Init>
		break;
 8000682:	bf00      	nop
}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40013800 	.word	0x40013800
 8000690:	40005000 	.word	0x40005000
 8000694:	40004c00 	.word	0x40004c00
 8000698:	40004400 	.word	0x40004400
 800069c:	40004800 	.word	0x40004800

080006a0 <USART1_IrqRxCallBack>:

/**********************************************************************************
  * USART1接收中断函数
 **********************************************************************************/
void __attribute((weak)) USART1_IrqRxCallBack(uint16_t data)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	4603      	mov	r3, r0
 80006a8:	80fb      	strh	r3, [r7, #6]

}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
	uint32_t st,cr;

	st = USART1->SR;
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <USART1_IRQHandler+0x5c>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	b29b      	uxth	r3, r3
 80006c0:	607b      	str	r3, [r7, #4]
	cr = USART1->CR1;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <USART1_IRQHandler+0x5c>)
 80006c4:	899b      	ldrh	r3, [r3, #12]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	603b      	str	r3, [r7, #0]

	if(st & USART_FLAG_RXNE)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f003 0320 	and.w	r3, r3, #32
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d019      	beq.n	8000708 <USART1_IRQHandler+0x54>
	{
		if(cr & USART_WordLength_9b)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d008      	beq.n	80006f0 <USART1_IRQHandler+0x3c>
		{
			USART1_valRx = (uint16_t)(USART1->DR & 0X1FF);
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <USART1_IRQHandler+0x5c>)
 80006e0:	889b      	ldrh	r3, [r3, #4]
 80006e2:	b29b      	uxth	r3, r3
 80006e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006e8:	b29a      	uxth	r2, r3
 80006ea:	4b0a      	ldr	r3, [pc, #40]	; (8000714 <USART1_IRQHandler+0x60>)
 80006ec:	801a      	strh	r2, [r3, #0]
 80006ee:	e006      	b.n	80006fe <USART1_IRQHandler+0x4a>
		}
		else
		{
			USART1_valRx = (uint16_t)(USART1->DR & 0XFF);
 80006f0:	4b07      	ldr	r3, [pc, #28]	; (8000710 <USART1_IRQHandler+0x5c>)
 80006f2:	889b      	ldrh	r3, [r3, #4]
 80006f4:	b29b      	uxth	r3, r3
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	b29a      	uxth	r2, r3
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <USART1_IRQHandler+0x60>)
 80006fc:	801a      	strh	r2, [r3, #0]
		}

		USART1_IrqRxCallBack(USART1_valRx);
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <USART1_IRQHandler+0x60>)
 8000700:	881b      	ldrh	r3, [r3, #0]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ffcc 	bl	80006a0 <USART1_IrqRxCallBack>
	}
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40013800 	.word	0x40013800
 8000714:	20000068 	.word	0x20000068

08000718 <USART2_IrqCallBack>:

/**********************************************************************************
  * USART2接收中断函数
 **********************************************************************************/
void __attribute((weak)) USART2_IrqCallBack(uint16_t data)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	4603      	mov	r3, r0
 8000720:	80fb      	strh	r3, [r7, #6]

}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	if(USART2->CR1 & USART_WordLength_9b)
 8000730:	4b0e      	ldr	r3, [pc, #56]	; (800076c <USART2_IRQHandler+0x40>)
 8000732:	899b      	ldrh	r3, [r3, #12]
 8000734:	b29b      	uxth	r3, r3
 8000736:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800073a:	2b00      	cmp	r3, #0
 800073c:	d008      	beq.n	8000750 <USART2_IRQHandler+0x24>
	{
		USART2_valRx = (uint16_t)(USART2->DR & 0X1FF);
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <USART2_IRQHandler+0x40>)
 8000740:	889b      	ldrh	r3, [r3, #4]
 8000742:	b29b      	uxth	r3, r3
 8000744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000748:	b29a      	uxth	r2, r3
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <USART2_IRQHandler+0x44>)
 800074c:	801a      	strh	r2, [r3, #0]
 800074e:	e006      	b.n	800075e <USART2_IRQHandler+0x32>
	}
	else
	{
		USART2_valRx = (uint16_t)(USART2->DR & 0XFF);
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <USART2_IRQHandler+0x40>)
 8000752:	889b      	ldrh	r3, [r3, #4]
 8000754:	b29b      	uxth	r3, r3
 8000756:	b2db      	uxtb	r3, r3
 8000758:	b29a      	uxth	r2, r3
 800075a:	4b05      	ldr	r3, [pc, #20]	; (8000770 <USART2_IRQHandler+0x44>)
 800075c:	801a      	strh	r2, [r3, #0]
	}

	USART2_IrqCallBack(USART2_valRx);
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <USART2_IRQHandler+0x44>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	f7ff ffd8 	bl	8000718 <USART2_IrqCallBack>
}
 8000768:	bf00      	nop
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40004400 	.word	0x40004400
 8000770:	2000006a 	.word	0x2000006a

08000774 <USART3_IrqCallBack>:

/**********************************************************************************
  * USART3接收中断函数
 **********************************************************************************/
void __attribute((weak)) USART3_IrqCallBack(uint16_t data)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	4603      	mov	r3, r0
 800077c:	80fb      	strh	r3, [r7, #6]

}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr

08000788 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	if(USART3->CR1 & USART_WordLength_9b)
 800078c:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <USART3_IRQHandler+0x40>)
 800078e:	899b      	ldrh	r3, [r3, #12]
 8000790:	b29b      	uxth	r3, r3
 8000792:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000796:	2b00      	cmp	r3, #0
 8000798:	d008      	beq.n	80007ac <USART3_IRQHandler+0x24>
	{
		USART3_valRx = (uint16_t)(USART3->DR & 0X1FF);
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <USART3_IRQHandler+0x40>)
 800079c:	889b      	ldrh	r3, [r3, #4]
 800079e:	b29b      	uxth	r3, r3
 80007a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <USART3_IRQHandler+0x44>)
 80007a8:	801a      	strh	r2, [r3, #0]
 80007aa:	e006      	b.n	80007ba <USART3_IRQHandler+0x32>
	}
	else
	{
		USART3_valRx = (uint16_t)(USART3->DR & 0XFF);
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <USART3_IRQHandler+0x40>)
 80007ae:	889b      	ldrh	r3, [r3, #4]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	b2db      	uxtb	r3, r3
 80007b4:	b29a      	uxth	r2, r3
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <USART3_IRQHandler+0x44>)
 80007b8:	801a      	strh	r2, [r3, #0]
	}

	USART3_IrqCallBack(USART3_valRx);
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <USART3_IRQHandler+0x44>)
 80007bc:	881b      	ldrh	r3, [r3, #0]
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffd8 	bl	8000774 <USART3_IrqCallBack>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40004800 	.word	0x40004800
 80007cc:	2000006c 	.word	0x2000006c

080007d0 <UART4_IrqRxCallBack>:

/**********************************************************************************
  * UART4接收中断函数
 **********************************************************************************/
void __attribute((weak)) UART4_IrqRxCallBack(uint16_t data)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	80fb      	strh	r3, [r7, #6]

}
 80007da:	bf00      	nop
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
	uint32_t st,cr;

	st = UART4->SR;
 80007ea:	4b15      	ldr	r3, [pc, #84]	; (8000840 <UART4_IRQHandler+0x5c>)
 80007ec:	881b      	ldrh	r3, [r3, #0]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	607b      	str	r3, [r7, #4]
	cr = UART4->CR1;
 80007f2:	4b13      	ldr	r3, [pc, #76]	; (8000840 <UART4_IRQHandler+0x5c>)
 80007f4:	899b      	ldrh	r3, [r3, #12]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	603b      	str	r3, [r7, #0]

	if(st & USART_FLAG_RXNE)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	f003 0320 	and.w	r3, r3, #32
 8000800:	2b00      	cmp	r3, #0
 8000802:	d019      	beq.n	8000838 <UART4_IRQHandler+0x54>
	{
		if(cr & USART_WordLength_9b)
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800080a:	2b00      	cmp	r3, #0
 800080c:	d008      	beq.n	8000820 <UART4_IRQHandler+0x3c>
		{
			UART4_valRx = (uint16_t)(UART4->DR & 0X1FF);
 800080e:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <UART4_IRQHandler+0x5c>)
 8000810:	889b      	ldrh	r3, [r3, #4]
 8000812:	b29b      	uxth	r3, r3
 8000814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000818:	b29a      	uxth	r2, r3
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <UART4_IRQHandler+0x60>)
 800081c:	801a      	strh	r2, [r3, #0]
 800081e:	e006      	b.n	800082e <UART4_IRQHandler+0x4a>
		}
		else
		{
			UART4_valRx = (uint16_t)(UART4->DR & 0XFF);
 8000820:	4b07      	ldr	r3, [pc, #28]	; (8000840 <UART4_IRQHandler+0x5c>)
 8000822:	889b      	ldrh	r3, [r3, #4]
 8000824:	b29b      	uxth	r3, r3
 8000826:	b2db      	uxtb	r3, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <UART4_IRQHandler+0x60>)
 800082c:	801a      	strh	r2, [r3, #0]
		}

		UART4_IrqRxCallBack(UART4_valRx);
 800082e:	4b05      	ldr	r3, [pc, #20]	; (8000844 <UART4_IRQHandler+0x60>)
 8000830:	881b      	ldrh	r3, [r3, #0]
 8000832:	4618      	mov	r0, r3
 8000834:	f7ff ffcc 	bl	80007d0 <UART4_IrqRxCallBack>
	}

}
 8000838:	bf00      	nop
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40004c00 	.word	0x40004c00
 8000844:	2000006e 	.word	0x2000006e

08000848 <UART5_IrqRxCallBack>:

/**********************************************************************************
  * UART5接收中断函数
 **********************************************************************************/
void __attribute((weak)) UART5_IrqRxCallBack(uint16_t data)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	80fb      	strh	r3, [r7, #6]

}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr

0800085c <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
	uint32_t st,cr;

	st = UART5->SR;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <UART5_IRQHandler+0x5c>)
 8000864:	881b      	ldrh	r3, [r3, #0]
 8000866:	b29b      	uxth	r3, r3
 8000868:	607b      	str	r3, [r7, #4]
	cr = UART5->CR1;
 800086a:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <UART5_IRQHandler+0x5c>)
 800086c:	899b      	ldrh	r3, [r3, #12]
 800086e:	b29b      	uxth	r3, r3
 8000870:	603b      	str	r3, [r7, #0]

	if(st & USART_FLAG_RXNE)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f003 0320 	and.w	r3, r3, #32
 8000878:	2b00      	cmp	r3, #0
 800087a:	d019      	beq.n	80008b0 <UART5_IRQHandler+0x54>
	{
		if(cr & USART_WordLength_9b)
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000882:	2b00      	cmp	r3, #0
 8000884:	d008      	beq.n	8000898 <UART5_IRQHandler+0x3c>
		{
			UART5_valRx = (uint16_t)(UART5->DR & 0X1FF);
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <UART5_IRQHandler+0x5c>)
 8000888:	889b      	ldrh	r3, [r3, #4]
 800088a:	b29b      	uxth	r3, r3
 800088c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000890:	b29a      	uxth	r2, r3
 8000892:	4b0a      	ldr	r3, [pc, #40]	; (80008bc <UART5_IRQHandler+0x60>)
 8000894:	801a      	strh	r2, [r3, #0]
 8000896:	e006      	b.n	80008a6 <UART5_IRQHandler+0x4a>
		}
		else
		{
			UART5_valRx = (uint16_t)(UART5->DR & 0XFF);
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <UART5_IRQHandler+0x5c>)
 800089a:	889b      	ldrh	r3, [r3, #4]
 800089c:	b29b      	uxth	r3, r3
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	b29a      	uxth	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <UART5_IRQHandler+0x60>)
 80008a4:	801a      	strh	r2, [r3, #0]
		}

		UART5_IrqRxCallBack(UART5_valRx);
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <UART5_IRQHandler+0x60>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ffcc 	bl	8000848 <UART5_IrqRxCallBack>
	}

}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	40005000 	.word	0x40005000
 80008bc:	20000070 	.word	0x20000070

080008c0 <delay_init>:
//初始化延迟函数
//当使用OS的时候,此函数会初始化OS的时钟节拍
//SYSTICK的时钟固定为AHB时钟的1/8
//SYSCLK:系统时钟频率
void delay_init(u8 SYSCLK)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
 80008ca:	f06f 0004 	mvn.w	r0, #4
 80008ce:	f000 fa4d 	bl	8000d6c <SysTick_CLKSourceConfig>
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	08db      	lsrs	r3, r3, #3
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <delay_init+0x3c>)
 80008da:	701a      	strb	r2, [r3, #0]
	fac_ms=1000/delay_ostickspersec;		//代表OS可以延时的最少单位	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; 	//开启SYSTICK    
#else
	fac_ms=(u16)fac_us*1000;				//非OS下,代表每个ms需要的systick时钟数   
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <delay_init+0x3c>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	461a      	mov	r2, r3
 80008e4:	0152      	lsls	r2, r2, #5
 80008e6:	1ad2      	subs	r2, r2, r3
 80008e8:	0092      	lsls	r2, r2, #2
 80008ea:	4413      	add	r3, r2
 80008ec:	00db      	lsls	r3, r3, #3
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <delay_init+0x40>)
 80008f2:	801a      	strh	r2, [r3, #0]
#endif
}								    
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000072 	.word	0x20000072
 8000900:	20000074 	.word	0x20000074

08000904 <delay_xms>:
//SysTick->LOAD为24位寄存器,所以,最大延时为:
//nms<=0xffffff*8*1000/SYSCLK
//SYSCLK单位为Hz,nms单位为ms
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
 8000904:	b480      	push	{r7}
 8000906:	b085      	sub	sp, #20
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	4a15      	ldr	r2, [pc, #84]	; (8000968 <delay_xms+0x64>)
 8000912:	8812      	ldrh	r2, [r2, #0]
 8000914:	4611      	mov	r1, r2
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <delay_xms+0x68>)
 8000918:	fb01 f303 	mul.w	r3, r1, r3
 800091c:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           			//清空计数器
 800091e:	4b13      	ldr	r3, [pc, #76]	; (800096c <delay_xms+0x68>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <delay_xms+0x68>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a10      	ldr	r2, [pc, #64]	; (800096c <delay_xms+0x68>)
 800092a:	f043 0301 	orr.w	r3, r3, #1
 800092e:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <delay_xms+0x68>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	60fb      	str	r3, [r7, #12]
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f003 0301 	and.w	r3, r3, #1
 800093c:	2b00      	cmp	r3, #0
 800093e:	d004      	beq.n	800094a <delay_xms+0x46>
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0f2      	beq.n	8000930 <delay_xms+0x2c>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <delay_xms+0x68>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a07      	ldr	r2, [pc, #28]	; (800096c <delay_xms+0x68>)
 8000950:	f023 0301 	bic.w	r3, r3, #1
 8000954:	6013      	str	r3, [r2, #0]
	SysTick->VAL =0X00;     		  		//清空计数器	  	    
 8000956:	4b05      	ldr	r3, [pc, #20]	; (800096c <delay_xms+0x68>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
} 
 800095c:	bf00      	nop
 800095e:	3714      	adds	r7, #20
 8000960:	46bd      	mov	sp, r7
 8000962:	bc80      	pop	{r7}
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000074 	.word	0x20000074
 800096c:	e000e010 	.word	0xe000e010

08000970 <delay_ms>:
//延时nms 
//nms:0~65535
void delay_ms(u16 nms)
{	 	 
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	4603      	mov	r3, r0
 8000978:	80fb      	strh	r3, [r7, #6]
	u8 repeat=nms/540;						//这里用540,是考虑到某些客户可能超频使用,
 800097a:	88fb      	ldrh	r3, [r7, #6]
 800097c:	4a13      	ldr	r2, [pc, #76]	; (80009cc <delay_ms+0x5c>)
 800097e:	fba2 2303 	umull	r2, r3, r2, r3
 8000982:	0a5b      	lsrs	r3, r3, #9
 8000984:	b29b      	uxth	r3, r3
 8000986:	73fb      	strb	r3, [r7, #15]
											//比如超频到248M的时候,delay_xms最大只能延时541ms左右了
	u16 remain=nms%540;
 8000988:	88fb      	ldrh	r3, [r7, #6]
 800098a:	4a10      	ldr	r2, [pc, #64]	; (80009cc <delay_ms+0x5c>)
 800098c:	fba2 1203 	umull	r1, r2, r2, r3
 8000990:	0a52      	lsrs	r2, r2, #9
 8000992:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8000996:	fb01 f202 	mul.w	r2, r1, r2
 800099a:	1a9b      	subs	r3, r3, r2
 800099c:	81bb      	strh	r3, [r7, #12]
	while(repeat)
 800099e:	e006      	b.n	80009ae <delay_ms+0x3e>
	{
		delay_xms(540);
 80009a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80009a4:	f7ff ffae 	bl	8000904 <delay_xms>
		repeat--;
 80009a8:	7bfb      	ldrb	r3, [r7, #15]
 80009aa:	3b01      	subs	r3, #1
 80009ac:	73fb      	strb	r3, [r7, #15]
	while(repeat)
 80009ae:	7bfb      	ldrb	r3, [r7, #15]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d1f5      	bne.n	80009a0 <delay_ms+0x30>
	}
	if(remain)delay_xms(remain);
 80009b4:	89bb      	ldrh	r3, [r7, #12]
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d003      	beq.n	80009c2 <delay_ms+0x52>
 80009ba:	89bb      	ldrh	r3, [r7, #12]
 80009bc:	4618      	mov	r0, r3
 80009be:	f7ff ffa1 	bl	8000904 <delay_xms>
} 
 80009c2:	bf00      	nop
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	f2b9d649 	.word	0xf2b9d649

080009d0 <sys_SWJ_REMAP_Config>:
  *     @arg SWJ_NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  *     @arg SWJ_DISABLE: Full SWJ Disabled (JTAG-DP + SW-DP)
  * @retval None
  */
void sys_SWJ_REMAP_Config(uint8_t SWJ_REMAP)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]

    switch (SWJ_REMAP)
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b03      	cmp	r3, #3
 80009de:	d81a      	bhi.n	8000a16 <sys_SWJ_REMAP_Config+0x46>
 80009e0:	a201      	add	r2, pc, #4	; (adr r2, 80009e8 <sys_SWJ_REMAP_Config+0x18>)
 80009e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e6:	bf00      	nop
 80009e8:	08000a17 	.word	0x08000a17
 80009ec:	080009f9 	.word	0x080009f9
 80009f0:	08000a03 	.word	0x08000a03
 80009f4:	08000a0d 	.word	0x08000a0d
        /* Full SWJ Enable (JTAG-DP + SW-DP) */
        break;

    case SWJ_NONJTRST:
        /* Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_NoJTRST, ENABLE);
 80009f8:	2101      	movs	r1, #1
 80009fa:	4809      	ldr	r0, [pc, #36]	; (8000a20 <sys_SWJ_REMAP_Config+0x50>)
 80009fc:	f000 fb7c 	bl	80010f8 <GPIO_PinRemapConfig>
        break;
 8000a00:	e00a      	b.n	8000a18 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_NOJTAG:
        /* JTAG-DP Disabled and SW-DP Enabled */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 8000a02:	2101      	movs	r1, #1
 8000a04:	4807      	ldr	r0, [pc, #28]	; (8000a24 <sys_SWJ_REMAP_Config+0x54>)
 8000a06:	f000 fb77 	bl	80010f8 <GPIO_PinRemapConfig>
    break;
 8000a0a:	e005      	b.n	8000a18 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_DISABLE:
        /* Full SWJ Disabled (JTAG-DP + SW-DP) */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4806      	ldr	r0, [pc, #24]	; (8000a28 <sys_SWJ_REMAP_Config+0x58>)
 8000a10:	f000 fb72 	bl	80010f8 <GPIO_PinRemapConfig>
    break;
 8000a14:	e000      	b.n	8000a18 <sys_SWJ_REMAP_Config+0x48>

    default:
        break;
 8000a16:	bf00      	nop
    }

}
 8000a18:	bf00      	nop
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	00300100 	.word	0x00300100
 8000a24:	00300200 	.word	0x00300200
 8000a28:	00300400 	.word	0x00300400

08000a2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a30:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <SystemInit+0x5c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <SystemInit+0x5c>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <SystemInit+0x5c>)
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	4911      	ldr	r1, [pc, #68]	; (8000a88 <SystemInit+0x5c>)
 8000a42:	4b12      	ldr	r3, [pc, #72]	; (8000a8c <SystemInit+0x60>)
 8000a44:	4013      	ands	r3, r2
 8000a46:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <SystemInit+0x5c>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <SystemInit+0x5c>)
 8000a4e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a56:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a58:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <SystemInit+0x5c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <SystemInit+0x5c>)
 8000a5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a62:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <SystemInit+0x5c>)
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	4a07      	ldr	r2, [pc, #28]	; (8000a88 <SystemInit+0x5c>)
 8000a6a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a6e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000a70:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <SystemInit+0x5c>)
 8000a72:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000a76:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000a78:	f000 f87e 	bl	8000b78 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a7c:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <SystemInit+0x64>)
 8000a7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a82:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	f8ff0000 	.word	0xf8ff0000
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000aa6:	4b2f      	ldr	r3, [pc, #188]	; (8000b64 <SystemCoreClockUpdate+0xd0>)
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 030c 	and.w	r3, r3, #12
 8000aae:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	2b08      	cmp	r3, #8
 8000ab4:	d011      	beq.n	8000ada <SystemCoreClockUpdate+0x46>
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	2b08      	cmp	r3, #8
 8000aba:	d83a      	bhi.n	8000b32 <SystemCoreClockUpdate+0x9e>
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d003      	beq.n	8000aca <SystemCoreClockUpdate+0x36>
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b04      	cmp	r3, #4
 8000ac6:	d004      	beq.n	8000ad2 <SystemCoreClockUpdate+0x3e>
 8000ac8:	e033      	b.n	8000b32 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000aca:	4b27      	ldr	r3, [pc, #156]	; (8000b68 <SystemCoreClockUpdate+0xd4>)
 8000acc:	4a27      	ldr	r2, [pc, #156]	; (8000b6c <SystemCoreClockUpdate+0xd8>)
 8000ace:	601a      	str	r2, [r3, #0]
      break;
 8000ad0:	e033      	b.n	8000b3a <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000ad2:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <SystemCoreClockUpdate+0xd4>)
 8000ad4:	4a25      	ldr	r2, [pc, #148]	; (8000b6c <SystemCoreClockUpdate+0xd8>)
 8000ad6:	601a      	str	r2, [r3, #0]
      break;
 8000ad8:	e02f      	b.n	8000b3a <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <SystemCoreClockUpdate+0xd0>)
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000ae2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <SystemCoreClockUpdate+0xd0>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aec:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000aee:	68bb      	ldr	r3, [r7, #8]
 8000af0:	0c9b      	lsrs	r3, r3, #18
 8000af2:	3302      	adds	r3, #2
 8000af4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d106      	bne.n	8000b0a <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4a1c      	ldr	r2, [pc, #112]	; (8000b70 <SystemCoreClockUpdate+0xdc>)
 8000b00:	fb02 f303 	mul.w	r3, r2, r3
 8000b04:	4a18      	ldr	r2, [pc, #96]	; (8000b68 <SystemCoreClockUpdate+0xd4>)
 8000b06:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000b08:	e017      	b.n	8000b3a <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <SystemCoreClockUpdate+0xd0>)
 8000b0c:	685b      	ldr	r3, [r3, #4]
 8000b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d006      	beq.n	8000b24 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000b16:	68bb      	ldr	r3, [r7, #8]
 8000b18:	4a15      	ldr	r2, [pc, #84]	; (8000b70 <SystemCoreClockUpdate+0xdc>)
 8000b1a:	fb02 f303 	mul.w	r3, r2, r3
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <SystemCoreClockUpdate+0xd4>)
 8000b20:	6013      	str	r3, [r2, #0]
      break;
 8000b22:	e00a      	b.n	8000b3a <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <SystemCoreClockUpdate+0xd8>)
 8000b28:	fb02 f303 	mul.w	r3, r2, r3
 8000b2c:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <SystemCoreClockUpdate+0xd4>)
 8000b2e:	6013      	str	r3, [r2, #0]
      break;
 8000b30:	e003      	b.n	8000b3a <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000b32:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <SystemCoreClockUpdate+0xd4>)
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <SystemCoreClockUpdate+0xd8>)
 8000b36:	601a      	str	r2, [r3, #0]
      break;
 8000b38:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000b3a:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <SystemCoreClockUpdate+0xd0>)
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	091b      	lsrs	r3, r3, #4
 8000b40:	f003 030f 	and.w	r3, r3, #15
 8000b44:	4a0b      	ldr	r2, [pc, #44]	; (8000b74 <SystemCoreClockUpdate+0xe0>)
 8000b46:	5cd3      	ldrb	r3, [r2, r3]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemCoreClockUpdate+0xd4>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	fa22 f303 	lsr.w	r3, r2, r3
 8000b56:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <SystemCoreClockUpdate+0xd4>)
 8000b58:	6013      	str	r3, [r2, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	40021000 	.word	0x40021000
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	007a1200 	.word	0x007a1200
 8000b70:	003d0900 	.word	0x003d0900
 8000b74:	20000008 	.word	0x20000008

08000b78 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000b7c:	f000 f802 	bl	8000b84 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	2300      	movs	r3, #0
 8000b90:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000b92:	4b3a      	ldr	r3, [pc, #232]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a39      	ldr	r2, [pc, #228]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b9c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000b9e:	4b37      	ldr	r3, [pc, #220]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	3301      	adds	r3, #1
 8000bac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d103      	bne.n	8000bbc <SetSysClockTo72+0x38>
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000bba:	d1f0      	bne.n	8000b9e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000bbc:	4b2f      	ldr	r3, [pc, #188]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d002      	beq.n	8000bce <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	e001      	b.n	8000bd2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d14b      	bne.n	8000c70 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000bd8:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <SetSysClockTo72+0xfc>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a28      	ldr	r2, [pc, #160]	; (8000c80 <SetSysClockTo72+0xfc>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000be4:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <SetSysClockTo72+0xfc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a25      	ldr	r2, [pc, #148]	; (8000c80 <SetSysClockTo72+0xfc>)
 8000bea:	f023 0307 	bic.w	r3, r3, #7
 8000bee:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000bf0:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <SetSysClockTo72+0xfc>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a22      	ldr	r2, [pc, #136]	; (8000c80 <SetSysClockTo72+0xfc>)
 8000bf6:	f043 0302 	orr.w	r3, r3, #2
 8000bfa:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000bfc:	4b1f      	ldr	r3, [pc, #124]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000bfe:	4a1f      	ldr	r2, [pc, #124]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000c04:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c06:	4a1d      	ldr	r2, [pc, #116]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c16:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000c18:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	4a17      	ldr	r2, [pc, #92]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c1e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000c22:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000c24:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	4a14      	ldr	r2, [pc, #80]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c2a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000c2e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a11      	ldr	r2, [pc, #68]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c3a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000c3c:	bf00      	nop
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f9      	beq.n	8000c3e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	4a0b      	ldr	r2, [pc, #44]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c50:	f023 0303 	bic.w	r3, r3, #3
 8000c54:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c5c:	f043 0302 	orr.w	r3, r3, #2
 8000c60:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000c62:	bf00      	nop
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SetSysClockTo72+0xf8>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f003 030c 	and.w	r3, r3, #12
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d1f9      	bne.n	8000c64 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000c70:	bf00      	nop
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bc80      	pop	{r7}
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	40022000 	.word	0x40022000

08000c84 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <NVIC_PriorityGroupConfig+0x20>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	60d3      	str	r3, [r2, #12]
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	230f      	movs	r3, #15
 8000cba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	78db      	ldrb	r3, [r3, #3]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d03a      	beq.n	8000d3a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cc4:	4b27      	ldr	r3, [pc, #156]	; (8000d64 <NVIC_Init+0xbc>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	43db      	mvns	r3, r3
 8000cca:	0a1b      	lsrs	r3, r3, #8
 8000ccc:	f003 0307 	and.w	r3, r3, #7
 8000cd0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f1c3 0304 	rsb	r3, r3, #4
 8000cd8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000cda:	68fa      	ldr	r2, [r7, #12]
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce2:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	785b      	ldrb	r3, [r3, #1]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4013      	ands	r3, r2
 8000cfc:	697a      	ldr	r2, [r7, #20]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000d02:	697b      	ldr	r3, [r7, #20]
 8000d04:	011b      	lsls	r3, r3, #4
 8000d06:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d08:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <NVIC_Init+0xc0>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	6979      	ldr	r1, [r7, #20]
 8000d10:	b2c9      	uxtb	r1, r1
 8000d12:	4413      	add	r3, r2
 8000d14:	460a      	mov	r2, r1
 8000d16:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d22:	4911      	ldr	r1, [pc, #68]	; (8000d68 <NVIC_Init+0xc0>)
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	0952      	lsrs	r2, r2, #5
 8000d2a:	b2d2      	uxtb	r2, r2
 8000d2c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d34:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d38:	e00f      	b.n	8000d5a <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d42:	4909      	ldr	r1, [pc, #36]	; (8000d68 <NVIC_Init+0xc0>)
 8000d44:	687a      	ldr	r2, [r7, #4]
 8000d46:	7812      	ldrb	r2, [r2, #0]
 8000d48:	0952      	lsrs	r2, r2, #5
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d4e:	2201      	movs	r2, #1
 8000d50:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d52:	f100 0320 	add.w	r3, r0, #32
 8000d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d5a:	bf00      	nop
 8000d5c:	371c      	adds	r7, #28
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00
 8000d68:	e000e100 	.word	0xe000e100

08000d6c <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d106      	bne.n	8000d88 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <SysTick_CLKSourceConfig+0x34>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <SysTick_CLKSourceConfig+0x34>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8000d86:	e005      	b.n	8000d94 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <SysTick_CLKSourceConfig+0x34>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <SysTick_CLKSourceConfig+0x34>)
 8000d8e:	f023 0304 	bic.w	r3, r3, #4
 8000d92:	6013      	str	r3, [r2, #0]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	e000e010 	.word	0xe000e010

08000da4 <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	460b      	mov	r3, r1
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000db2:	7afb      	ldrb	r3, [r7, #11]
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	331b      	adds	r3, #27
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	4413      	add	r3, r2
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	7a1b      	ldrb	r3, [r3, #8]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10b      	bne.n	8000dea <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8000dd2:	7afb      	ldrb	r3, [r7, #11]
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	331b      	adds	r3, #27
 8000dd8:	011b      	lsls	r3, r3, #4
 8000dda:	4413      	add	r3, r2
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	0d5b      	lsrs	r3, r3, #21
 8000de0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	e00a      	b.n	8000e00 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 8000dea:	7afb      	ldrb	r3, [r7, #11]
 8000dec:	68fa      	ldr	r2, [r7, #12]
 8000dee:	331b      	adds	r3, #27
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	4413      	add	r3, r2
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	08db      	lsrs	r3, r3, #3
 8000df8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8000e00:	7afb      	ldrb	r3, [r7, #11]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	331b      	adds	r3, #27
 8000e06:	011b      	lsls	r3, r3, #4
 8000e08:	4413      	add	r3, r2
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	b2da      	uxtb	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 8000e18:	7afb      	ldrb	r3, [r7, #11]
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	331b      	adds	r3, #27
 8000e1e:	011b      	lsls	r3, r3, #4
 8000e20:	4413      	add	r3, r2
 8000e22:	3304      	adds	r3, #4
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	f003 030f 	and.w	r3, r3, #15
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 8000e32:	7afb      	ldrb	r3, [r7, #11]
 8000e34:	68fa      	ldr	r2, [r7, #12]
 8000e36:	331b      	adds	r3, #27
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	4413      	add	r3, r2
 8000e3c:	3304      	adds	r3, #4
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 8000e48:	7afb      	ldrb	r3, [r7, #11]
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	4413      	add	r3, r2
 8000e50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8000e5c:	7afb      	ldrb	r3, [r7, #11]
 8000e5e:	68fa      	ldr	r2, [r7, #12]
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	4413      	add	r3, r2
 8000e64:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	0a1b      	lsrs	r3, r3, #8
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8000e72:	7afb      	ldrb	r3, [r7, #11]
 8000e74:	68fa      	ldr	r2, [r7, #12]
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	4413      	add	r3, r2
 8000e7a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	0c1b      	lsrs	r3, r3, #16
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 8000e88:	7afb      	ldrb	r3, [r7, #11]
 8000e8a:	68fa      	ldr	r2, [r7, #12]
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	4413      	add	r3, r2
 8000e90:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	0e1b      	lsrs	r3, r3, #24
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8000e9e:	7afb      	ldrb	r3, [r7, #11]
 8000ea0:	68fa      	ldr	r2, [r7, #12]
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	4413      	add	r3, r2
 8000ea6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	b2da      	uxtb	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8000eb2:	7afb      	ldrb	r3, [r7, #11]
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	4413      	add	r3, r2
 8000eba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 8000ec8:	7afb      	ldrb	r3, [r7, #11]
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	011b      	lsls	r3, r3, #4
 8000ece:	4413      	add	r3, r2
 8000ed0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	0c1b      	lsrs	r3, r3, #16
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 8000ede:	7afb      	ldrb	r3, [r7, #11]
 8000ee0:	68fa      	ldr	r2, [r7, #12]
 8000ee2:	011b      	lsls	r3, r3, #4
 8000ee4:	4413      	add	r3, r2
 8000ee6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	0e1b      	lsrs	r3, r3, #24
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 8000ef4:	7afb      	ldrb	r3, [r7, #11]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	f043 0220 	orr.w	r2, r3, #32
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 8000f06:	e005      	b.n	8000f14 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	f043 0220 	orr.w	r2, r3, #32
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	611a      	str	r2, [r3, #16]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr

08000f1e <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	b089      	sub	sp, #36	; 0x24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	61fb      	str	r3, [r7, #28]
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	78db      	ldrb	r3, [r3, #3]
 8000f44:	f003 030f 	and.w	r3, r3, #15
 8000f48:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	78db      	ldrb	r3, [r3, #3]
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d005      	beq.n	8000f62 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	789b      	ldrb	r3, [r3, #2]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	881b      	ldrh	r3, [r3, #0]
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d044      	beq.n	8000ff6 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	e038      	b.n	8000fea <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000f78:	2201      	movs	r2, #1
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	881b      	ldrh	r3, [r3, #0]
 8000f86:	461a      	mov	r2, r3
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d126      	bne.n	8000fe4 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000f9c:	220f      	movs	r2, #15
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000fa6:	68bb      	ldr	r3, [r7, #8]
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4013      	ands	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000fb0:	69fa      	ldr	r2, [r7, #28]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	78db      	ldrb	r3, [r3, #3]
 8000fc2:	2b28      	cmp	r3, #40	; 0x28
 8000fc4:	d105      	bne.n	8000fd2 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	615a      	str	r2, [r3, #20]
 8000fd0:	e008      	b.n	8000fe4 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	78db      	ldrb	r3, [r3, #3]
 8000fd6:	2b48      	cmp	r3, #72	; 0x48
 8000fd8:	d104      	bne.n	8000fe4 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000fda:	2201      	movs	r2, #1
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2b07      	cmp	r3, #7
 8000fee:	d9c3      	bls.n	8000f78 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	2bff      	cmp	r3, #255	; 0xff
 8000ffc:	d946      	bls.n	800108c <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
 8001008:	e03a      	b.n	8001080 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	3308      	adds	r3, #8
 800100e:	2201      	movs	r2, #1
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	429a      	cmp	r2, r3
 8001028:	d127      	bne.n	800107a <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001030:	220f      	movs	r2, #15
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	43db      	mvns	r3, r3
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001044:	69fa      	ldr	r2, [r7, #28]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	4313      	orrs	r3, r2
 8001050:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	78db      	ldrb	r3, [r3, #3]
 8001056:	2b28      	cmp	r3, #40	; 0x28
 8001058:	d105      	bne.n	8001066 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	3308      	adds	r3, #8
 800105e:	2201      	movs	r2, #1
 8001060:	409a      	lsls	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	2b48      	cmp	r3, #72	; 0x48
 800106c:	d105      	bne.n	800107a <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	3308      	adds	r3, #8
 8001072:	2201      	movs	r2, #1
 8001074:	409a      	lsls	r2, r3
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	3301      	adds	r3, #1
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	2b07      	cmp	r3, #7
 8001084:	d9c1      	bls.n	800100a <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	697a      	ldr	r2, [r7, #20]
 800108a:	605a      	str	r2, [r3, #4]
  }
}
 800108c:	bf00      	nop
 800108e:	3724      	adds	r7, #36	; 0x24
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr

08001096 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001096:	b480      	push	{r7}
 8001098:	b085      	sub	sp, #20
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
 800109e:	460b      	mov	r3, r1
 80010a0:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	887b      	ldrh	r3, [r7, #2]
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d002      	beq.n	80010b8 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80010b2:	2301      	movs	r3, #1
 80010b4:	73fb      	strb	r3, [r7, #15]
 80010b6:	e001      	b.n	80010bc <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	807b      	strh	r3, [r7, #2]
 80010d4:	4613      	mov	r3, r2
 80010d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80010d8:	787b      	ldrb	r3, [r7, #1]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d003      	beq.n	80010e6 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010de:	887a      	ldrh	r2, [r7, #2]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80010e4:	e002      	b.n	80010ec <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	615a      	str	r2, [r3, #20]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr
	...

080010f8 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b087      	sub	sp, #28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	613b      	str	r3, [r7, #16]
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	da03      	bge.n	8001122 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <GPIO_PinRemapConfig+0xdc>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	e002      	b.n	8001128 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8001122:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <GPIO_PinRemapConfig+0xdc>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	0c1b      	lsrs	r3, r3, #16
 800112c:	f003 030f 	and.w	r3, r3, #15
 8001130:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	b29b      	uxth	r3, r3
 8001136:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800113e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001142:	d10a      	bne.n	800115a <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800114a:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800114c:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <GPIO_PinRemapConfig+0xdc>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <GPIO_PinRemapConfig+0xdc>)
 8001152:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001156:	6053      	str	r3, [r2, #4]
 8001158:	e021      	b.n	800119e <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d00e      	beq.n	8001182 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001164:	2203      	movs	r2, #3
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4013      	ands	r3, r2
 8001176:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800117e:	617b      	str	r3, [r7, #20]
 8001180:	e00d      	b.n	800119e <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	0d5b      	lsrs	r3, r3, #21
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	4013      	ands	r3, r2
 8001194:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800119c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800119e:	78fb      	ldrb	r3, [r7, #3]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d008      	beq.n	80011b6 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	0d5b      	lsrs	r3, r3, #21
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	697a      	ldr	r2, [r7, #20]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da03      	bge.n	80011c4 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 80011bc:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <GPIO_PinRemapConfig+0xdc>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 80011c2:	e002      	b.n	80011ca <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 80011c4:	4a03      	ldr	r2, [pc, #12]	; (80011d4 <GPIO_PinRemapConfig+0xdc>)
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	6053      	str	r3, [r2, #4]
}
 80011ca:	bf00      	nop
 80011cc:	371c      	adds	r7, #28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40010000 	.word	0x40010000

080011d8 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80011e0:	4a03      	ldr	r2, [pc, #12]	; (80011f0 <RCC_USBCLKConfig+0x18>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	424200d8 	.word	0x424200d8

080011f4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <RCC_ADCCLKConfig+0x34>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800120c:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800120e:	68fa      	ldr	r2, [r7, #12]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	4313      	orrs	r3, r2
 8001214:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001216:	4a04      	ldr	r2, [pc, #16]	; (8001228 <RCC_ADCCLKConfig+0x34>)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6053      	str	r3, [r2, #4]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40021000 	.word	0x40021000

0800122c <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <RCC_LSEConfig+0x3c>)
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 800123c:	4b0a      	ldr	r3, [pc, #40]	; (8001268 <RCC_LSEConfig+0x3c>)
 800123e:	2200      	movs	r2, #0
 8001240:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d002      	beq.n	800124e <RCC_LSEConfig+0x22>
 8001248:	2b04      	cmp	r3, #4
 800124a:	d004      	beq.n	8001256 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 800124c:	e007      	b.n	800125e <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <RCC_LSEConfig+0x3c>)
 8001250:	2201      	movs	r2, #1
 8001252:	701a      	strb	r2, [r3, #0]
      break;
 8001254:	e003      	b.n	800125e <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <RCC_LSEConfig+0x3c>)
 8001258:	2205      	movs	r2, #5
 800125a:	701a      	strb	r2, [r3, #0]
      break;            
 800125c:	bf00      	nop
  }
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	40021020 	.word	0x40021020

0800126c <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001274:	4b05      	ldr	r3, [pc, #20]	; (800128c <RCC_RTCCLKConfig+0x20>)
 8001276:	6a1a      	ldr	r2, [r3, #32]
 8001278:	4904      	ldr	r1, [pc, #16]	; (800128c <RCC_RTCCLKConfig+0x20>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4313      	orrs	r3, r2
 800127e:	620b      	str	r3, [r1, #32]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 800129a:	4a04      	ldr	r2, [pc, #16]	; (80012ac <RCC_RTCCLKCmd+0x1c>)
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bc80      	pop	{r7}
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	4242043c 	.word	0x4242043c

080012b0 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b087      	sub	sp, #28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	2300      	movs	r3, #0
 80012be:	613b      	str	r3, [r7, #16]
 80012c0:	2300      	movs	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80012c8:	4b4f      	ldr	r3, [pc, #316]	; (8001408 <RCC_GetClocksFreq+0x158>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 030c 	and.w	r3, r3, #12
 80012d0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d011      	beq.n	80012fc <RCC_GetClocksFreq+0x4c>
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2b08      	cmp	r3, #8
 80012dc:	d83a      	bhi.n	8001354 <RCC_GetClocksFreq+0xa4>
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <RCC_GetClocksFreq+0x3c>
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2b04      	cmp	r3, #4
 80012e8:	d004      	beq.n	80012f4 <RCC_GetClocksFreq+0x44>
 80012ea:	e033      	b.n	8001354 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a47      	ldr	r2, [pc, #284]	; (800140c <RCC_GetClocksFreq+0x15c>)
 80012f0:	601a      	str	r2, [r3, #0]
      break;
 80012f2:	e033      	b.n	800135c <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a45      	ldr	r2, [pc, #276]	; (800140c <RCC_GetClocksFreq+0x15c>)
 80012f8:	601a      	str	r2, [r3, #0]
      break;
 80012fa:	e02f      	b.n	800135c <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80012fc:	4b42      	ldr	r3, [pc, #264]	; (8001408 <RCC_GetClocksFreq+0x158>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001304:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001306:	4b40      	ldr	r3, [pc, #256]	; (8001408 <RCC_GetClocksFreq+0x158>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800130e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	0c9b      	lsrs	r3, r3, #18
 8001314:	3302      	adds	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d106      	bne.n	800132c <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4a3b      	ldr	r2, [pc, #236]	; (8001410 <RCC_GetClocksFreq+0x160>)
 8001322:	fb03 f202 	mul.w	r2, r3, r2
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800132a:	e017      	b.n	800135c <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800132c:	4b36      	ldr	r3, [pc, #216]	; (8001408 <RCC_GetClocksFreq+0x158>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	4a35      	ldr	r2, [pc, #212]	; (8001410 <RCC_GetClocksFreq+0x160>)
 800133c:	fb03 f202 	mul.w	r2, r3, r2
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	601a      	str	r2, [r3, #0]
      break;
 8001344:	e00a      	b.n	800135c <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4a30      	ldr	r2, [pc, #192]	; (800140c <RCC_GetClocksFreq+0x15c>)
 800134a:	fb03 f202 	mul.w	r2, r3, r2
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	601a      	str	r2, [r3, #0]
      break;
 8001352:	e003      	b.n	800135c <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a2d      	ldr	r2, [pc, #180]	; (800140c <RCC_GetClocksFreq+0x15c>)
 8001358:	601a      	str	r2, [r3, #0]
      break;
 800135a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <RCC_GetClocksFreq+0x158>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001364:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	091b      	lsrs	r3, r3, #4
 800136a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800136c:	4a29      	ldr	r2, [pc, #164]	; (8001414 <RCC_GetClocksFreq+0x164>)
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4413      	add	r3, r2
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	b2db      	uxtb	r3, r3
 8001376:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	40da      	lsrs	r2, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001384:	4b20      	ldr	r3, [pc, #128]	; (8001408 <RCC_GetClocksFreq+0x158>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800138c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	0a1b      	lsrs	r3, r3, #8
 8001392:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001394:	4a1f      	ldr	r2, [pc, #124]	; (8001414 <RCC_GetClocksFreq+0x164>)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	4413      	add	r3, r2
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	40da      	lsrs	r2, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80013ac:	4b16      	ldr	r3, [pc, #88]	; (8001408 <RCC_GetClocksFreq+0x158>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80013b4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	0adb      	lsrs	r3, r3, #11
 80013ba:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80013bc:	4a15      	ldr	r2, [pc, #84]	; (8001414 <RCC_GetClocksFreq+0x164>)
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	4413      	add	r3, r2
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685a      	ldr	r2, [r3, #4]
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	40da      	lsrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <RCC_GetClocksFreq+0x158>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013dc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	0b9b      	lsrs	r3, r3, #14
 80013e2:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80013e4:	4a0c      	ldr	r2, [pc, #48]	; (8001418 <RCC_GetClocksFreq+0x168>)
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	4413      	add	r3, r2
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68da      	ldr	r2, [r3, #12]
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	fbb2 f2f3 	udiv	r2, r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]
}
 80013fe:	bf00      	nop
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	40021000 	.word	0x40021000
 800140c:	007a1200 	.word	0x007a1200
 8001410:	003d0900 	.word	0x003d0900
 8001414:	20000018 	.word	0x20000018
 8001418:	20000028 	.word	0x20000028

0800141c <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001428:	78fb      	ldrb	r3, [r7, #3]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d006      	beq.n	800143c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <RCC_AHBPeriphClockCmd+0x38>)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <RCC_AHBPeriphClockCmd+0x38>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4313      	orrs	r3, r2
 8001438:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 800143a:	e006      	b.n	800144a <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <RCC_AHBPeriphClockCmd+0x38>)
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	43db      	mvns	r3, r3
 8001444:	4903      	ldr	r1, [pc, #12]	; (8001454 <RCC_AHBPeriphClockCmd+0x38>)
 8001446:	4013      	ands	r3, r2
 8001448:	614b      	str	r3, [r1, #20]
}
 800144a:	bf00      	nop
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr
 8001454:	40021000 	.word	0x40021000

08001458 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <RCC_APB2PeriphClockCmd+0x38>)
 800146c:	699a      	ldr	r2, [r3, #24]
 800146e:	4908      	ldr	r1, [pc, #32]	; (8001490 <RCC_APB2PeriphClockCmd+0x38>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4313      	orrs	r3, r2
 8001474:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001476:	e006      	b.n	8001486 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <RCC_APB2PeriphClockCmd+0x38>)
 800147a:	699a      	ldr	r2, [r3, #24]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	43db      	mvns	r3, r3
 8001480:	4903      	ldr	r1, [pc, #12]	; (8001490 <RCC_APB2PeriphClockCmd+0x38>)
 8001482:	4013      	ands	r3, r2
 8001484:	618b      	str	r3, [r1, #24]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr
 8001490:	40021000 	.word	0x40021000

08001494 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d006      	beq.n	80014b4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <RCC_APB1PeriphClockCmd+0x38>)
 80014a8:	69da      	ldr	r2, [r3, #28]
 80014aa:	4908      	ldr	r1, [pc, #32]	; (80014cc <RCC_APB1PeriphClockCmd+0x38>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80014b2:	e006      	b.n	80014c2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <RCC_APB1PeriphClockCmd+0x38>)
 80014b6:	69da      	ldr	r2, [r3, #28]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	4903      	ldr	r1, [pc, #12]	; (80014cc <RCC_APB1PeriphClockCmd+0x38>)
 80014be:	4013      	ands	r3, r2
 80014c0:	61cb      	str	r3, [r1, #28]
}
 80014c2:	bf00      	nop
 80014c4:	370c      	adds	r7, #12
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	40021000 	.word	0x40021000

080014d0 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 80014da:	4a04      	ldr	r2, [pc, #16]	; (80014ec <RCC_MCOConfig+0x1c>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	7013      	strb	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40021007 	.word	0x40021007

080014f0 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	887a      	ldrh	r2, [r7, #2]
 8001500:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001518:	b29b      	uxth	r3, r3
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr

08001524 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001530:	b29b      	uxth	r3, r3
}
 8001532:	4618      	mov	r0, r3
 8001534:	370c      	adds	r7, #12
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr

0800153c <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 800154c:	2300      	movs	r3, #0
 800154e:	81bb      	strh	r3, [r7, #12]
 8001550:	2300      	movs	r3, #0
 8001552:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	8a1b      	ldrh	r3, [r3, #16]
 8001558:	b29a      	uxth	r2, r3
 800155a:	887b      	ldrh	r3, [r7, #2]
 800155c:	4013      	ands	r3, r2
 800155e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	899b      	ldrh	r3, [r3, #12]
 8001564:	b29a      	uxth	r2, r3
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	4013      	ands	r3, r2
 800156a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800156c:	89bb      	ldrh	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d005      	beq.n	800157e <TIM_GetITStatus+0x42>
 8001572:	897b      	ldrh	r3, [r7, #10]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d002      	beq.n	800157e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
 800157c:	e001      	b.n	8001582 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001582:	7bfb      	ldrb	r3, [r7, #15]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
 8001596:	460b      	mov	r3, r1
 8001598:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	43db      	mvns	r3, r3
 800159e:	b29a      	uxth	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	821a      	strh	r2, [r3, #16]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr
	...

080015b0 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015be:	2300      	movs	r3, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80015c2:	2300      	movs	r3, #0
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	8a1b      	ldrh	r3, [r3, #16]
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80015da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015dc:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80015e0:	4013      	ands	r3, r2
 80015e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	88db      	ldrh	r3, [r3, #6]
 80015e8:	461a      	mov	r2, r3
 80015ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ec:	4313      	orrs	r3, r2
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80015f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	899b      	ldrh	r3, [r3, #12]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001602:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 8001606:	4013      	ands	r3, r2
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	889a      	ldrh	r2, [r3, #4]
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	891b      	ldrh	r3, [r3, #8]
 8001612:	4313      	orrs	r3, r2
 8001614:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800161a:	4313      	orrs	r3, r2
 800161c:	b29b      	uxth	r3, r3
 800161e:	461a      	mov	r2, r3
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	4313      	orrs	r3, r2
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001628:	b29a      	uxth	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	8a9b      	ldrh	r3, [r3, #20]
 8001632:	b29b      	uxth	r3, r3
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001638:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 800163c:	4013      	ands	r3, r2
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	899b      	ldrh	r3, [r3, #12]
 8001644:	461a      	mov	r2, r3
 8001646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001648:	4313      	orrs	r3, r2
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fe29 	bl	80012b0 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	4a2e      	ldr	r2, [pc, #184]	; (800171c <USART_Init+0x16c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d102      	bne.n	800166c <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
 800166a:	e001      	b.n	8001670 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	899b      	ldrh	r3, [r3, #12]
 8001674:	b29b      	uxth	r3, r3
 8001676:	b21b      	sxth	r3, r3
 8001678:	2b00      	cmp	r3, #0
 800167a:	da0c      	bge.n	8001696 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800167c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	009a      	lsls	r2, r3, #2
 8001686:	441a      	add	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001692:	627b      	str	r3, [r7, #36]	; 0x24
 8001694:	e00b      	b.n	80016ae <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001698:	4613      	mov	r3, r2
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	4413      	add	r3, r2
 800169e:	009a      	lsls	r2, r3, #2
 80016a0:	441a      	add	r2, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	009b      	lsls	r3, r3, #2
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80016ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <USART_Init+0x170>)
 80016b2:	fba2 2303 	umull	r2, r3, r2, r3
 80016b6:	095b      	lsrs	r3, r3, #5
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80016bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016be:	091b      	lsrs	r3, r3, #4
 80016c0:	2264      	movs	r2, #100	; 0x64
 80016c2:	fb02 f303 	mul.w	r3, r2, r3
 80016c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	899b      	ldrh	r3, [r3, #12]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da0c      	bge.n	80016f2 <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80016d8:	6a3b      	ldr	r3, [r7, #32]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	3332      	adds	r3, #50	; 0x32
 80016de:	4a10      	ldr	r2, [pc, #64]	; (8001720 <USART_Init+0x170>)
 80016e0:	fba2 2303 	umull	r2, r3, r2, r3
 80016e4:	095b      	lsrs	r3, r3, #5
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ec:	4313      	orrs	r3, r2
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016f0:	e00b      	b.n	800170a <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80016f2:	6a3b      	ldr	r3, [r7, #32]
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	3332      	adds	r3, #50	; 0x32
 80016f8:	4a09      	ldr	r2, [pc, #36]	; (8001720 <USART_Init+0x170>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	095b      	lsrs	r3, r3, #5
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001706:	4313      	orrs	r3, r2
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 800170a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170c:	b29a      	uxth	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	811a      	strh	r2, [r3, #8]
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	; 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40013800 	.word	0x40013800
 8001720:	51eb851f 	.word	0x51eb851f

08001724 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	460b      	mov	r3, r1
 800172e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d008      	beq.n	8001748 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	899b      	ldrh	r3, [r3, #12]
 800173a:	b29b      	uxth	r3, r3
 800173c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001740:	b29a      	uxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001746:	e007      	b.n	8001758 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	899b      	ldrh	r3, [r3, #12]
 800174c:	b29b      	uxth	r3, r3
 800174e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001752:	b29a      	uxth	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	819a      	strh	r2, [r3, #12]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001762:	b480      	push	{r7}
 8001764:	b087      	sub	sp, #28
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	460b      	mov	r3, r1
 800176c:	807b      	strh	r3, [r7, #2]
 800176e:	4613      	mov	r3, r2
 8001770:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	2300      	movs	r3, #0
 800177c:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001786:	887b      	ldrh	r3, [r7, #2]
 8001788:	b2db      	uxtb	r3, r3
 800178a:	095b      	lsrs	r3, r3, #5
 800178c:	b2db      	uxtb	r3, r3
 800178e:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001790:	887b      	ldrh	r3, [r7, #2]
 8001792:	f003 031f 	and.w	r3, r3, #31
 8001796:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001798:	2201      	movs	r2, #1
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d103      	bne.n	80017b0 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	330c      	adds	r3, #12
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e009      	b.n	80017c4 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d103      	bne.n	80017be <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	3310      	adds	r3, #16
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	e002      	b.n	80017c4 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	3314      	adds	r3, #20
 80017c2:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80017c4:	787b      	ldrb	r3, [r7, #1]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d006      	beq.n	80017d8 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	6819      	ldr	r1, [r3, #0]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	68ba      	ldr	r2, [r7, #8]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80017d6:	e006      	b.n	80017e6 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	6819      	ldr	r1, [r3, #0]
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	43da      	mvns	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	400a      	ands	r2, r1
 80017e4:	601a      	str	r2, [r3, #0]
}
 80017e6:	bf00      	nop
 80017e8:	371c      	adds	r7, #28
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bc80      	pop	{r7}
 80017ee:	4770      	bx	lr

080017f0 <main>:
#endif

uint8_t data;

int main(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0

  // SYS CLK Init 
  BSP_RCC_Init();
 80017f6:	f7fe fccb 	bl	8000190 <BSP_RCC_Init>

  /** Config SWJ Reamp 
    *   If using the PA15、PA14、PA13、PB4、PB3 for Remapping Pin, these Clock Must be Config before SWJ REMAP config Function!
    */
  sys_SWJ_REMAP_Config(SWJ_ENABLE);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff f8e8 	bl	80009d0 <sys_SWJ_REMAP_Config>

  BSP_USART_Init(USART2,9600);
 8001800:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001804:	4813      	ldr	r0, [pc, #76]	; (8001854 <main+0x64>)
 8001806:	f7fe fd75 	bl	80002f4 <BSP_USART_Init>

  while (1)
  {

    for (int i = 0; i < 12; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	e019      	b.n	8001844 <main+0x54>
    {
      data = TM_ID_GetUnique8(i);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db09      	blt.n	800182a <main+0x3a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b0b      	cmp	r3, #11
 800181a:	dc06      	bgt.n	800182a <main+0x3a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8001822:	f6a3 0318 	subw	r3, r3, #2072	; 0x818
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	e000      	b.n	800182c <main+0x3c>
 800182a:	2300      	movs	r3, #0
 800182c:	4a0a      	ldr	r2, [pc, #40]	; (8001858 <main+0x68>)
 800182e:	7013      	strb	r3, [r2, #0]
      BSP_USART_SendData(USART2,data);
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <main+0x68>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4619      	mov	r1, r3
 8001838:	4806      	ldr	r0, [pc, #24]	; (8001854 <main+0x64>)
 800183a:	f7fe fde5 	bl	8000408 <BSP_USART_SendData>
    for (int i = 0; i < 12; i++)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3301      	adds	r3, #1
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2b0b      	cmp	r3, #11
 8001848:	dde2      	ble.n	8001810 <main+0x20>
    }
    
    delay_ms(100);
 800184a:	2064      	movs	r0, #100	; 0x64
 800184c:	f7ff f890 	bl	8000970 <delay_ms>
    for (int i = 0; i < 12; i++)
 8001850:	e7db      	b.n	800180a <main+0x1a>
 8001852:	bf00      	nop
 8001854:	40004400 	.word	0x40004400
 8001858:	20000076 	.word	0x20000076

0800185c <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800186c:	e7fe      	b.n	800186c <HardFault_Handler+0x4>

0800186e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800186e:	b480      	push	{r7}
 8001870:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001872:	e7fe      	b.n	8001872 <MemManage_Handler+0x4>

08001874 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001878:	e7fe      	b.n	8001878 <BusFault_Handler+0x4>

0800187a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800187e:	e7fe      	b.n	800187e <UsageFault_Handler+0x4>

08001880 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
}
 8001884:	bf00      	nop
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr

080018b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018b0:	480d      	ldr	r0, [pc, #52]	; (80018e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80018b4:	f7ff f8ba 	bl	8000a2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <LoopForever+0x6>)
  ldr r1, =_edata
 80018ba:	490d      	ldr	r1, [pc, #52]	; (80018f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018bc:	4a0d      	ldr	r2, [pc, #52]	; (80018f4 <LoopForever+0xe>)
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018c0:	e002      	b.n	80018c8 <LoopCopyDataInit>

080018c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c6:	3304      	adds	r3, #4

080018c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018cc:	d3f9      	bcc.n	80018c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018d0:	4c0a      	ldr	r4, [pc, #40]	; (80018fc <LoopForever+0x16>)
  movs r3, #0
 80018d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d4:	e001      	b.n	80018da <LoopFillZerobss>

080018d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d8:	3204      	adds	r2, #4

080018da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018dc:	d3fb      	bcc.n	80018d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80018de:	f000 f811 	bl	8001904 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018e2:	f7ff ff85 	bl	80017f0 <main>

080018e6 <LoopForever>:

LoopForever:
  b LoopForever
 80018e6:	e7fe      	b.n	80018e6 <LoopForever>
  ldr   r0, =_estack
 80018e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80018ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018f0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80018f4:	0800196c 	.word	0x0800196c
  ldr r2, =_sbss
 80018f8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80018fc:	20000078 	.word	0x20000078

08001900 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001900:	e7fe      	b.n	8001900 <ADC1_2_IRQHandler>
	...

08001904 <__libc_init_array>:
 8001904:	b570      	push	{r4, r5, r6, lr}
 8001906:	2600      	movs	r6, #0
 8001908:	4d0c      	ldr	r5, [pc, #48]	; (800193c <__libc_init_array+0x38>)
 800190a:	4c0d      	ldr	r4, [pc, #52]	; (8001940 <__libc_init_array+0x3c>)
 800190c:	1b64      	subs	r4, r4, r5
 800190e:	10a4      	asrs	r4, r4, #2
 8001910:	42a6      	cmp	r6, r4
 8001912:	d109      	bne.n	8001928 <__libc_init_array+0x24>
 8001914:	f000 f81a 	bl	800194c <_init>
 8001918:	2600      	movs	r6, #0
 800191a:	4d0a      	ldr	r5, [pc, #40]	; (8001944 <__libc_init_array+0x40>)
 800191c:	4c0a      	ldr	r4, [pc, #40]	; (8001948 <__libc_init_array+0x44>)
 800191e:	1b64      	subs	r4, r4, r5
 8001920:	10a4      	asrs	r4, r4, #2
 8001922:	42a6      	cmp	r6, r4
 8001924:	d105      	bne.n	8001932 <__libc_init_array+0x2e>
 8001926:	bd70      	pop	{r4, r5, r6, pc}
 8001928:	f855 3b04 	ldr.w	r3, [r5], #4
 800192c:	4798      	blx	r3
 800192e:	3601      	adds	r6, #1
 8001930:	e7ee      	b.n	8001910 <__libc_init_array+0xc>
 8001932:	f855 3b04 	ldr.w	r3, [r5], #4
 8001936:	4798      	blx	r3
 8001938:	3601      	adds	r6, #1
 800193a:	e7f2      	b.n	8001922 <__libc_init_array+0x1e>
 800193c:	08001964 	.word	0x08001964
 8001940:	08001964 	.word	0x08001964
 8001944:	08001964 	.word	0x08001964
 8001948:	08001968 	.word	0x08001968

0800194c <_init>:
 800194c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800194e:	bf00      	nop
 8001950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001952:	bc08      	pop	{r3}
 8001954:	469e      	mov	lr, r3
 8001956:	4770      	bx	lr

08001958 <_fini>:
 8001958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800195a:	bf00      	nop
 800195c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800195e:	bc08      	pop	{r3}
 8001960:	469e      	mov	lr, r3
 8001962:	4770      	bx	lr
