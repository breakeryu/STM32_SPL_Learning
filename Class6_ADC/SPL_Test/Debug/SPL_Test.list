
SPL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001350  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001480  08001480  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001480  08001480  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001480  08001480  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001480  08001480  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001480  08001480  00011480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001484  08001484  00011484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000002c  080014b4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080014b4  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006743  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001477  00000000  00000000  00026798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  00027c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000790  00000000  00000000  00028488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010a13  00000000  00000000  00028c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000893e  00000000  00000000  0003962b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055681  00000000  00000000  00041f69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000975ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022cc  00000000  00000000  0009763c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001468 	.word	0x08001468

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08001468 	.word	0x08001468

08000170 <BSP_ADC_Init>:
/*----------------------------------------------------------------------------------*/

uint16_t ADCConvertedValue;

void BSP_ADC_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b092      	sub	sp, #72	; 0x48
 8000174:	af00      	add	r7, sp, #0
    ADC_InitTypeDef ADC_InitStructure;
    DMA_InitTypeDef DMA_InitStructure;
    GPIO_InitTypeDef GPIO_InitStructure;

    /* Enable DMA1 clock */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 8000176:	2101      	movs	r1, #1
 8000178:	2001      	movs	r0, #1
 800017a:	f001 f845 	bl	8001208 <RCC_AHBPeriphClockCmd>

    /* Enable ADC1 and GPIOC clock */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800017e:	2101      	movs	r1, #1
 8000180:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000184:	f001 f85e 	bl	8001244 <RCC_APB2PeriphClockCmd>


     

    /* Configure PA.00 (ADC Channel123_0) as analog input -------------------------*/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 8000188:	2301      	movs	r3, #1
 800018a:	80bb      	strh	r3, [r7, #4]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 800018c:	2300      	movs	r3, #0
 800018e:	71fb      	strb	r3, [r7, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000190:	1d3b      	adds	r3, r7, #4
 8000192:	4619      	mov	r1, r3
 8000194:	4834      	ldr	r0, [pc, #208]	; (8000268 <BSP_ADC_Init+0xf8>)
 8000196:	f000 fdb9 	bl	8000d0c <GPIO_Init>


    /* DMA1 channel1 configuration ----------------------------------------------*/
    DMA_DeInit(DMA1_Channel1);
 800019a:	4834      	ldr	r0, [pc, #208]	; (800026c <BSP_ADC_Init+0xfc>)
 800019c:	f000 fca0 	bl	8000ae0 <DMA_DeInit>
    DMA_InitStructure.DMA_PeripheralBaseAddr = ADC1_DR_Address;
 80001a0:	4b33      	ldr	r3, [pc, #204]	; (8000270 <BSP_ADC_Init+0x100>)
 80001a2:	60bb      	str	r3, [r7, #8]
    DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)&ADCConvertedValue;
 80001a4:	4b33      	ldr	r3, [pc, #204]	; (8000274 <BSP_ADC_Init+0x104>)
 80001a6:	60fb      	str	r3, [r7, #12]
    DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 80001a8:	2300      	movs	r3, #0
 80001aa:	613b      	str	r3, [r7, #16]
    DMA_InitStructure.DMA_BufferSize = 1;
 80001ac:	2301      	movs	r3, #1
 80001ae:	617b      	str	r3, [r7, #20]
    DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80001b0:	2300      	movs	r3, #0
 80001b2:	61bb      	str	r3, [r7, #24]
    DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Disable;
 80001b4:	2300      	movs	r3, #0
 80001b6:	61fb      	str	r3, [r7, #28]
    DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 80001b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80001bc:	623b      	str	r3, [r7, #32]
    DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 80001be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001c2:	627b      	str	r3, [r7, #36]	; 0x24
    DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 80001c4:	2320      	movs	r3, #32
 80001c6:	62bb      	str	r3, [r7, #40]	; 0x28
    DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 80001c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80001cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 80001ce:	2300      	movs	r3, #0
 80001d0:	633b      	str	r3, [r7, #48]	; 0x30
    DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 80001d2:	f107 0308 	add.w	r3, r7, #8
 80001d6:	4619      	mov	r1, r3
 80001d8:	4824      	ldr	r0, [pc, #144]	; (800026c <BSP_ADC_Init+0xfc>)
 80001da:	f000 fd3d 	bl	8000c58 <DMA_Init>
    
    /* Enable DMA1 channel1 */
    DMA_Cmd(DMA1_Channel1, ENABLE);
 80001de:	2101      	movs	r1, #1
 80001e0:	4822      	ldr	r0, [pc, #136]	; (800026c <BSP_ADC_Init+0xfc>)
 80001e2:	f000 fd77 	bl	8000cd4 <DMA_Cmd>
    
    /* ADC1 configuration ------------------------------------------------------*/
    ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 80001e6:	2300      	movs	r3, #0
 80001e8:	637b      	str	r3, [r7, #52]	; 0x34
    ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80001f0:	2301      	movs	r3, #1
 80001f2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 80001f6:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 80001fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80001fc:	2300      	movs	r3, #0
 80001fe:	643b      	str	r3, [r7, #64]	; 0x40
    ADC_InitStructure.ADC_NbrOfChannel = 1;
 8000200:	2301      	movs	r3, #1
 8000202:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    ADC_Init(ADC1, &ADC_InitStructure);
 8000206:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800020a:	4619      	mov	r1, r3
 800020c:	481a      	ldr	r0, [pc, #104]	; (8000278 <BSP_ADC_Init+0x108>)
 800020e:	f000 faaf 	bl	8000770 <ADC_Init>

    /* ADC1 regular channel14 configuration */ 
    ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_55Cycles5);
 8000212:	2305      	movs	r3, #5
 8000214:	2201      	movs	r2, #1
 8000216:	2100      	movs	r1, #0
 8000218:	4817      	ldr	r0, [pc, #92]	; (8000278 <BSP_ADC_Init+0x108>)
 800021a:	f000 fb98 	bl	800094e <ADC_RegularChannelConfig>

    /* Enable ADC1 DMA */
    ADC_DMACmd(ADC1, ENABLE);
 800021e:	2101      	movs	r1, #1
 8000220:	4815      	ldr	r0, [pc, #84]	; (8000278 <BSP_ADC_Init+0x108>)
 8000222:	f000 fb12 	bl	800084a <ADC_DMACmd>
    
    /* Enable ADC1 */
    ADC_Cmd(ADC1, ENABLE);
 8000226:	2101      	movs	r1, #1
 8000228:	4813      	ldr	r0, [pc, #76]	; (8000278 <BSP_ADC_Init+0x108>)
 800022a:	f000 faf3 	bl	8000814 <ADC_Cmd>

    /* Enable ADC1 reset calibration register */   
    ADC_ResetCalibration(ADC1);
 800022e:	4812      	ldr	r0, [pc, #72]	; (8000278 <BSP_ADC_Init+0x108>)
 8000230:	f000 fb26 	bl	8000880 <ADC_ResetCalibration>
    /* Check the end of ADC1 reset calibration register */
    while(ADC_GetResetCalibrationStatus(ADC1));
 8000234:	bf00      	nop
 8000236:	4810      	ldr	r0, [pc, #64]	; (8000278 <BSP_ADC_Init+0x108>)
 8000238:	f000 fb31 	bl	800089e <ADC_GetResetCalibrationStatus>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d1f9      	bne.n	8000236 <BSP_ADC_Init+0xc6>

    /* Start ADC1 calibration */
    ADC_StartCalibration(ADC1);
 8000242:	480d      	ldr	r0, [pc, #52]	; (8000278 <BSP_ADC_Init+0x108>)
 8000244:	f000 fb42 	bl	80008cc <ADC_StartCalibration>
    /* Check the end of ADC1 calibration */
    while(ADC_GetCalibrationStatus(ADC1));
 8000248:	bf00      	nop
 800024a:	480b      	ldr	r0, [pc, #44]	; (8000278 <BSP_ADC_Init+0x108>)
 800024c:	f000 fb4d 	bl	80008ea <ADC_GetCalibrationStatus>
 8000250:	4603      	mov	r3, r0
 8000252:	2b00      	cmp	r3, #0
 8000254:	d1f9      	bne.n	800024a <BSP_ADC_Init+0xda>
        
    /* Start ADC1 Software Conversion */ 
    ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 8000256:	2101      	movs	r1, #1
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <BSP_ADC_Init+0x108>)
 800025a:	f000 fb5d 	bl	8000918 <ADC_SoftwareStartConvCmd>

}
 800025e:	bf00      	nop
 8000260:	3748      	adds	r7, #72	; 0x48
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40010800 	.word	0x40010800
 800026c:	40020008 	.word	0x40020008
 8000270:	4001244c 	.word	0x4001244c
 8000274:	20000048 	.word	0x20000048
 8000278:	40012400 	.word	0x40012400

0800027c <BSP_ADC_Val2Vltg>:

const uint32_t ADC_uRef_C = 3300;	//3300mv

int16_t adc_vltg;
void BSP_ADC_Val2Vltg(void)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
    int32_t vltg;

    vltg = ((int32_t)ADCConvertedValue * ADC_uRef_C);
 8000282:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <BSP_ADC_Val2Vltg+0x58>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	461a      	mov	r2, r3
 8000288:	f640 43e4 	movw	r3, #3300	; 0xce4
 800028c:	fb02 f303 	mul.w	r3, r2, r3
 8000290:	607b      	str	r3, [r7, #4]
	vltg /= 8;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	2b00      	cmp	r3, #0
 8000296:	da00      	bge.n	800029a <BSP_ADC_Val2Vltg+0x1e>
 8000298:	3307      	adds	r3, #7
 800029a:	10db      	asrs	r3, r3, #3
 800029c:	607b      	str	r3, [r7, #4]
	vltg /= 8;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	da00      	bge.n	80002a6 <BSP_ADC_Val2Vltg+0x2a>
 80002a4:	3307      	adds	r3, #7
 80002a6:	10db      	asrs	r3, r3, #3
 80002a8:	607b      	str	r3, [r7, #4]
	vltg /= 8;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	da00      	bge.n	80002b2 <BSP_ADC_Val2Vltg+0x36>
 80002b0:	3307      	adds	r3, #7
 80002b2:	10db      	asrs	r3, r3, #3
 80002b4:	607b      	str	r3, [r7, #4]
	vltg /= 8;
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	da00      	bge.n	80002be <BSP_ADC_Val2Vltg+0x42>
 80002bc:	3307      	adds	r3, #7
 80002be:	10db      	asrs	r3, r3, #3
 80002c0:	607b      	str	r3, [r7, #4]

	adc_vltg =  (int16_t)vltg;
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	b21a      	sxth	r2, r3
 80002c6:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <BSP_ADC_Val2Vltg+0x5c>)
 80002c8:	801a      	strh	r2, [r3, #0]
    
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr
 80002d4:	20000048 	.word	0x20000048
 80002d8:	2000004a 	.word	0x2000004a

080002dc <BSP_RCC_Init>:




void BSP_RCC_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  SystemInit();
 80002e0:	f000 f8fe 	bl	80004e0 <SystemInit>

  /* Configure the System Peripheral clock prescalers */
  BSP_RCC_Periph_Clock_Init();
 80002e4:	f000 f80c 	bl	8000300 <BSP_RCC_Periph_Clock_Init>

  //Update SystemCoreClock variable according to Clock Register Values
  SystemCoreClockUpdate();
 80002e8:	f000 f92e 	bl	8000548 <SystemCoreClockUpdate>

  /* This function fills the RCC_ClockFreq structure with the current
  frequencies of different on chip clocks (for debug purpose) */
  RCC_GetClocksFreq(&RCC_ClockFreq);
 80002ec:	4803      	ldr	r0, [pc, #12]	; (80002fc <BSP_RCC_Init+0x20>)
 80002ee:	f000 fed5 	bl	800109c <RCC_GetClocksFreq>

  /* NVIC configuration ------------------------------------------------------*/
  //BSP_RCC_NVIC_Configuration();

  delay_init(72);
 80002f2:	2048      	movs	r0, #72	; 0x48
 80002f4:	f000 f8a4 	bl	8000440 <delay_init>

  // _mcu_rev_id = DBGMCU_GetREVID();
  // _mcu_dev_id = DBGMCU_GetDEVID();

}
 80002f8:	bf00      	nop
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	2000004c 	.word	0x2000004c

08000300 <BSP_RCC_Periph_Clock_Init>:


void BSP_RCC_Periph_Clock_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0



  //ADC CLK Prescaler, ADC CLK = 72 / 6 = 12 Mhz
  RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8000304:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000308:	f000 fe6a 	bl	8000fe0 <RCC_ADCCLKConfig>
  //USB OTG CLK FS Prescaler, when PLL = 72Mhz, OTGFSPRE = 0
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 800030c:	2000      	movs	r0, #0
 800030e:	f000 fe59 	bl	8000fc4 <RCC_USBCLKConfig>
  //MCO 
  RCC_MCOConfig(RCC_MCO_NoClock);
 8000312:	2000      	movs	r0, #0
 8000314:	f000 ffb4 	bl	8001280 <RCC_MCOConfig>


  //Clear Clock interrupt register
  RCC->CIR = 0;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <BSP_RCC_Periph_Clock_Init+0x58>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]

  //Reset APB2 and APB1 Peripheral
  RCC->APB2RSTR = 0;
 800031e:	4b0e      	ldr	r3, [pc, #56]	; (8000358 <BSP_RCC_Periph_Clock_Init+0x58>)
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  RCC->APB1RSTR = 0;
 8000324:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <BSP_RCC_Periph_Clock_Init+0x58>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]

  //AHB Peripheral CLK Enable
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SRAM  | RCC_AHBPeriph_FLITF , ENABLE);
 800032a:	2101      	movs	r1, #1
 800032c:	2014      	movs	r0, #20
 800032e:	f000 ff6b 	bl	8001208 <RCC_AHBPeriphClockCmd>
  

  //APB2 Peripheral CLK Enable
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA  |
 8000332:	2101      	movs	r1, #1
 8000334:	201d      	movs	r0, #29
 8000336:	f000 ff85 	bl	8001244 <RCC_APB2PeriphClockCmd>
                          RCC_APB2Periph_GPIOB  | RCC_APB2Periph_GPIOC,
                        ENABLE);

  //APB1 Peripheral CLK Enable
  RCC->APB1ENR = 0;
 800033a:	4b07      	ldr	r3, [pc, #28]	; (8000358 <BSP_RCC_Periph_Clock_Init+0x58>)
 800033c:	2200      	movs	r2, #0
 800033e:	61da      	str	r2, [r3, #28]
  
  //RTC CLK
  RCC_LSEConfig(RCC_LSE_ON);
 8000340:	2001      	movs	r0, #1
 8000342:	f000 fe69 	bl	8001018 <RCC_LSEConfig>
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 8000346:	f44f 7000 	mov.w	r0, #512	; 0x200
 800034a:	f000 fe85 	bl	8001058 <RCC_RTCCLKConfig>
  RCC_RTCCLKCmd(ENABLE);
 800034e:	2001      	movs	r0, #1
 8000350:	f000 fe94 	bl	800107c <RCC_RTCCLKCmd>




}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	40021000 	.word	0x40021000

0800035c <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM4, TIM_IT_CC1) != RESET)
 8000360:	2102      	movs	r1, #2
 8000362:	4815      	ldr	r0, [pc, #84]	; (80003b8 <TIM4_IRQHandler+0x5c>)
 8000364:	f000 ffc2 	bl	80012ec <TIM_GetITStatus>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d021      	beq.n	80003b2 <TIM4_IRQHandler+0x56>
  {
    TIM_ClearITPendingBit(TIM4, TIM_IT_CC1);
 800036e:	2102      	movs	r1, #2
 8000370:	4811      	ldr	r0, [pc, #68]	; (80003b8 <TIM4_IRQHandler+0x5c>)
 8000372:	f000 ffe4 	bl	800133e <TIM_ClearITPendingBit>

    /* Pin PC.06 toggling with frequency = 500 Hz */
    GPIO_WriteBit(GPIOB, GPIO_Pin_6, (BitAction)(1 - GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_6)));
 8000376:	2140      	movs	r1, #64	; 0x40
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <TIM4_IRQHandler+0x60>)
 800037a:	f000 fd83 	bl	8000e84 <GPIO_ReadOutputDataBit>
 800037e:	4603      	mov	r3, r0
 8000380:	f1c3 0301 	rsb	r3, r3, #1
 8000384:	b2db      	uxtb	r3, r3
 8000386:	461a      	mov	r2, r3
 8000388:	2140      	movs	r1, #64	; 0x40
 800038a:	480c      	ldr	r0, [pc, #48]	; (80003bc <TIM4_IRQHandler+0x60>)
 800038c:	f000 fd93 	bl	8000eb6 <GPIO_WriteBit>

    
    capture = TIM_GetCapture1(TIM4);
 8000390:	4809      	ldr	r0, [pc, #36]	; (80003b8 <TIM4_IRQHandler+0x5c>)
 8000392:	f000 ff93 	bl	80012bc <TIM_GetCapture1>
 8000396:	4603      	mov	r3, r0
 8000398:	461a      	mov	r2, r3
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <TIM4_IRQHandler+0x64>)
 800039c:	801a      	strh	r2, [r3, #0]
    TIM_SetCompare1(TIM4, capture + CCR1_Val);
 800039e:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <TIM4_IRQHandler+0x64>)
 80003a0:	881a      	ldrh	r2, [r3, #0]
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <TIM4_IRQHandler+0x68>)
 80003a4:	881b      	ldrh	r3, [r3, #0]
 80003a6:	4413      	add	r3, r2
 80003a8:	b29b      	uxth	r3, r3
 80003aa:	4619      	mov	r1, r3
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <TIM4_IRQHandler+0x5c>)
 80003ae:	f000 ff77 	bl	80012a0 <TIM_SetCompare1>
  }

}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40000800 	.word	0x40000800
 80003bc:	40010c00 	.word	0x40010c00
 80003c0:	20000060 	.word	0x20000060
 80003c4:	20000000 	.word	0x20000000

080003c8 <TIM5_IRQHandler>:
  * @brief  This function handles TIM5 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM5_IRQHandler(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
 /* Clear TIM3 Capture compare interrupt pending bit */
  TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
 80003cc:	2102      	movs	r1, #2
 80003ce:	4817      	ldr	r0, [pc, #92]	; (800042c <TIM5_IRQHandler+0x64>)
 80003d0:	f000 ffb5 	bl	800133e <TIM_ClearITPendingBit>

  /* Get the Input Capture value */
  IC1Value = TIM_GetCapture1(TIM5);
 80003d4:	4815      	ldr	r0, [pc, #84]	; (800042c <TIM5_IRQHandler+0x64>)
 80003d6:	f000 ff71 	bl	80012bc <TIM_GetCapture1>
 80003da:	4603      	mov	r3, r0
 80003dc:	461a      	mov	r2, r3
 80003de:	4b14      	ldr	r3, [pc, #80]	; (8000430 <TIM5_IRQHandler+0x68>)
 80003e0:	801a      	strh	r2, [r3, #0]

  if (IC1Value != 0)
 80003e2:	4b13      	ldr	r3, [pc, #76]	; (8000430 <TIM5_IRQHandler+0x68>)
 80003e4:	881b      	ldrh	r3, [r3, #0]
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d017      	beq.n	800041a <TIM5_IRQHandler+0x52>
  {
    /* Duty cycle computation */
    DutyCycle = ( TIM_GetCapture2(TIM5) * 100) / IC1Value;
 80003ea:	4810      	ldr	r0, [pc, #64]	; (800042c <TIM5_IRQHandler+0x64>)
 80003ec:	f000 ff72 	bl	80012d4 <TIM_GetCapture2>
 80003f0:	4603      	mov	r3, r0
 80003f2:	461a      	mov	r2, r3
 80003f4:	2364      	movs	r3, #100	; 0x64
 80003f6:	fb02 f303 	mul.w	r3, r2, r3
 80003fa:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <TIM5_IRQHandler+0x68>)
 80003fc:	8812      	ldrh	r2, [r2, #0]
 80003fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8000402:	b29a      	uxth	r2, r3
 8000404:	4b0b      	ldr	r3, [pc, #44]	; (8000434 <TIM5_IRQHandler+0x6c>)
 8000406:	801a      	strh	r2, [r3, #0]

    /* Frequency computation */
    Frequency = SystemCoreClock / IC1Value;
 8000408:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <TIM5_IRQHandler+0x70>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a08      	ldr	r2, [pc, #32]	; (8000430 <TIM5_IRQHandler+0x68>)
 800040e:	8812      	ldrh	r2, [r2, #0]
 8000410:	fbb3 f3f2 	udiv	r3, r3, r2
 8000414:	4a09      	ldr	r2, [pc, #36]	; (800043c <TIM5_IRQHandler+0x74>)
 8000416:	6013      	str	r3, [r2, #0]
  {
    DutyCycle = 0;
    Frequency = 0;
  }

}
 8000418:	e005      	b.n	8000426 <TIM5_IRQHandler+0x5e>
    DutyCycle = 0;
 800041a:	4b06      	ldr	r3, [pc, #24]	; (8000434 <TIM5_IRQHandler+0x6c>)
 800041c:	2200      	movs	r2, #0
 800041e:	801a      	strh	r2, [r3, #0]
    Frequency = 0;
 8000420:	4b06      	ldr	r3, [pc, #24]	; (800043c <TIM5_IRQHandler+0x74>)
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
}
 8000426:	bf00      	nop
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	40000c00 	.word	0x40000c00
 8000430:	20000062 	.word	0x20000062
 8000434:	20000064 	.word	0x20000064
 8000438:	20000004 	.word	0x20000004
 800043c:	20000068 	.word	0x20000068

08000440 <delay_init>:
//初始化延迟函数
//当使用OS的时候,此函数会初始化OS的时钟节拍
//SYSTICK的时钟固定为AHB时钟的1/8
//SYSCLK:系统时钟频率
void delay_init(u8 SYSCLK)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
 800044a:	f06f 0004 	mvn.w	r0, #4
 800044e:	f000 f973 	bl	8000738 <SysTick_CLKSourceConfig>
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	08db      	lsrs	r3, r3, #3
 8000456:	b2da      	uxtb	r2, r3
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <delay_init+0x3c>)
 800045a:	701a      	strb	r2, [r3, #0]
	fac_ms=1000/delay_ostickspersec;		//代表OS可以延时的最少单位	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; 	//开启SYSTICK    
#else
	fac_ms=(u16)fac_us*1000;				//非OS下,代表每个ms需要的systick时钟数   
 800045c:	4b07      	ldr	r3, [pc, #28]	; (800047c <delay_init+0x3c>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	b29b      	uxth	r3, r3
 8000462:	461a      	mov	r2, r3
 8000464:	0152      	lsls	r2, r2, #5
 8000466:	1ad2      	subs	r2, r2, r3
 8000468:	0092      	lsls	r2, r2, #2
 800046a:	4413      	add	r3, r2
 800046c:	00db      	lsls	r3, r3, #3
 800046e:	b29a      	uxth	r2, r3
 8000470:	4b03      	ldr	r3, [pc, #12]	; (8000480 <delay_init+0x40>)
 8000472:	801a      	strh	r2, [r3, #0]
#endif
}								    
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000006c 	.word	0x2000006c
 8000480:	2000006e 	.word	0x2000006e

08000484 <sys_SWJ_REMAP_Config>:
  *     @arg SWJ_NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  *     @arg SWJ_DISABLE: Full SWJ Disabled (JTAG-DP + SW-DP)
  * @retval None
  */
void sys_SWJ_REMAP_Config(uint8_t SWJ_REMAP)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	71fb      	strb	r3, [r7, #7]

    switch (SWJ_REMAP)
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	2b03      	cmp	r3, #3
 8000492:	d81a      	bhi.n	80004ca <sys_SWJ_REMAP_Config+0x46>
 8000494:	a201      	add	r2, pc, #4	; (adr r2, 800049c <sys_SWJ_REMAP_Config+0x18>)
 8000496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800049a:	bf00      	nop
 800049c:	080004cb 	.word	0x080004cb
 80004a0:	080004ad 	.word	0x080004ad
 80004a4:	080004b7 	.word	0x080004b7
 80004a8:	080004c1 	.word	0x080004c1
        /* Full SWJ Enable (JTAG-DP + SW-DP) */
        break;

    case SWJ_NONJTRST:
        /* Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_NoJTRST, ENABLE);
 80004ac:	2101      	movs	r1, #1
 80004ae:	4809      	ldr	r0, [pc, #36]	; (80004d4 <sys_SWJ_REMAP_Config+0x50>)
 80004b0:	f000 fd18 	bl	8000ee4 <GPIO_PinRemapConfig>
        break;
 80004b4:	e00a      	b.n	80004cc <sys_SWJ_REMAP_Config+0x48>

    case SWJ_NOJTAG:
        /* JTAG-DP Disabled and SW-DP Enabled */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 80004b6:	2101      	movs	r1, #1
 80004b8:	4807      	ldr	r0, [pc, #28]	; (80004d8 <sys_SWJ_REMAP_Config+0x54>)
 80004ba:	f000 fd13 	bl	8000ee4 <GPIO_PinRemapConfig>
    break;
 80004be:	e005      	b.n	80004cc <sys_SWJ_REMAP_Config+0x48>

    case SWJ_DISABLE:
        /* Full SWJ Disabled (JTAG-DP + SW-DP) */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
 80004c0:	2101      	movs	r1, #1
 80004c2:	4806      	ldr	r0, [pc, #24]	; (80004dc <sys_SWJ_REMAP_Config+0x58>)
 80004c4:	f000 fd0e 	bl	8000ee4 <GPIO_PinRemapConfig>
    break;
 80004c8:	e000      	b.n	80004cc <sys_SWJ_REMAP_Config+0x48>

    default:
        break;
 80004ca:	bf00      	nop
    }

}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	00300100 	.word	0x00300100
 80004d8:	00300200 	.word	0x00300200
 80004dc:	00300400 	.word	0x00300400

080004e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004e4:	4b15      	ldr	r3, [pc, #84]	; (800053c <SystemInit+0x5c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <SystemInit+0x5c>)
 80004ea:	f043 0301 	orr.w	r3, r3, #1
 80004ee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80004f0:	4b12      	ldr	r3, [pc, #72]	; (800053c <SystemInit+0x5c>)
 80004f2:	685a      	ldr	r2, [r3, #4]
 80004f4:	4911      	ldr	r1, [pc, #68]	; (800053c <SystemInit+0x5c>)
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <SystemInit+0x60>)
 80004f8:	4013      	ands	r3, r2
 80004fa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004fc:	4b0f      	ldr	r3, [pc, #60]	; (800053c <SystemInit+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0e      	ldr	r2, [pc, #56]	; (800053c <SystemInit+0x5c>)
 8000502:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800050a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <SystemInit+0x5c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a0a      	ldr	r2, [pc, #40]	; (800053c <SystemInit+0x5c>)
 8000512:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000516:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <SystemInit+0x5c>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	4a07      	ldr	r2, [pc, #28]	; (800053c <SystemInit+0x5c>)
 800051e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000522:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <SystemInit+0x5c>)
 8000526:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800052a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800052c:	f000 f87e 	bl	800062c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <SystemInit+0x64>)
 8000532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000536:	609a      	str	r2, [r3, #8]
#endif 
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021000 	.word	0x40021000
 8000540:	f8ff0000 	.word	0xf8ff0000
 8000544:	e000ed00 	.word	0xe000ed00

08000548 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000548:	b480      	push	{r7}
 800054a:	b085      	sub	sp, #20
 800054c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800055a:	4b2f      	ldr	r3, [pc, #188]	; (8000618 <SystemCoreClockUpdate+0xd0>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	f003 030c 	and.w	r3, r3, #12
 8000562:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	2b08      	cmp	r3, #8
 8000568:	d011      	beq.n	800058e <SystemCoreClockUpdate+0x46>
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	2b08      	cmp	r3, #8
 800056e:	d83a      	bhi.n	80005e6 <SystemCoreClockUpdate+0x9e>
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d003      	beq.n	800057e <SystemCoreClockUpdate+0x36>
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2b04      	cmp	r3, #4
 800057a:	d004      	beq.n	8000586 <SystemCoreClockUpdate+0x3e>
 800057c:	e033      	b.n	80005e6 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 800057e:	4b27      	ldr	r3, [pc, #156]	; (800061c <SystemCoreClockUpdate+0xd4>)
 8000580:	4a27      	ldr	r2, [pc, #156]	; (8000620 <SystemCoreClockUpdate+0xd8>)
 8000582:	601a      	str	r2, [r3, #0]
      break;
 8000584:	e033      	b.n	80005ee <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <SystemCoreClockUpdate+0xd4>)
 8000588:	4a25      	ldr	r2, [pc, #148]	; (8000620 <SystemCoreClockUpdate+0xd8>)
 800058a:	601a      	str	r2, [r3, #0]
      break;
 800058c:	e02f      	b.n	80005ee <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800058e:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemCoreClockUpdate+0xd0>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000596:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemCoreClockUpdate+0xd0>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005a0:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	0c9b      	lsrs	r3, r3, #18
 80005a6:	3302      	adds	r3, #2
 80005a8:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d106      	bne.n	80005be <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	4a1c      	ldr	r2, [pc, #112]	; (8000624 <SystemCoreClockUpdate+0xdc>)
 80005b4:	fb02 f303 	mul.w	r3, r2, r3
 80005b8:	4a18      	ldr	r2, [pc, #96]	; (800061c <SystemCoreClockUpdate+0xd4>)
 80005ba:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80005bc:	e017      	b.n	80005ee <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <SystemCoreClockUpdate+0xd0>)
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d006      	beq.n	80005d8 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	4a15      	ldr	r2, [pc, #84]	; (8000624 <SystemCoreClockUpdate+0xdc>)
 80005ce:	fb02 f303 	mul.w	r3, r2, r3
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <SystemCoreClockUpdate+0xd4>)
 80005d4:	6013      	str	r3, [r2, #0]
      break;
 80005d6:	e00a      	b.n	80005ee <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <SystemCoreClockUpdate+0xd8>)
 80005dc:	fb02 f303 	mul.w	r3, r2, r3
 80005e0:	4a0e      	ldr	r2, [pc, #56]	; (800061c <SystemCoreClockUpdate+0xd4>)
 80005e2:	6013      	str	r3, [r2, #0]
      break;
 80005e4:	e003      	b.n	80005ee <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <SystemCoreClockUpdate+0xd4>)
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <SystemCoreClockUpdate+0xd8>)
 80005ea:	601a      	str	r2, [r3, #0]
      break;
 80005ec:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80005ee:	4b0a      	ldr	r3, [pc, #40]	; (8000618 <SystemCoreClockUpdate+0xd0>)
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	091b      	lsrs	r3, r3, #4
 80005f4:	f003 030f 	and.w	r3, r3, #15
 80005f8:	4a0b      	ldr	r2, [pc, #44]	; (8000628 <SystemCoreClockUpdate+0xe0>)
 80005fa:	5cd3      	ldrb	r3, [r2, r3]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <SystemCoreClockUpdate+0xd4>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	fa22 f303 	lsr.w	r3, r2, r3
 800060a:	4a04      	ldr	r2, [pc, #16]	; (800061c <SystemCoreClockUpdate+0xd4>)
 800060c:	6013      	str	r3, [r2, #0]
}
 800060e:	bf00      	nop
 8000610:	3714      	adds	r7, #20
 8000612:	46bd      	mov	sp, r7
 8000614:	bc80      	pop	{r7}
 8000616:	4770      	bx	lr
 8000618:	40021000 	.word	0x40021000
 800061c:	20000004 	.word	0x20000004
 8000620:	007a1200 	.word	0x007a1200
 8000624:	003d0900 	.word	0x003d0900
 8000628:	20000008 	.word	0x20000008

0800062c <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000630:	f000 f802 	bl	8000638 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	2300      	movs	r3, #0
 8000644:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000646:	4b3a      	ldr	r3, [pc, #232]	; (8000730 <SetSysClockTo72+0xf8>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	4a39      	ldr	r2, [pc, #228]	; (8000730 <SetSysClockTo72+0xf8>)
 800064c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000650:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000652:	4b37      	ldr	r3, [pc, #220]	; (8000730 <SetSysClockTo72+0xf8>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800065a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d103      	bne.n	8000670 <SetSysClockTo72+0x38>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800066e:	d1f0      	bne.n	8000652 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000670:	4b2f      	ldr	r3, [pc, #188]	; (8000730 <SetSysClockTo72+0xf8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800067c:	2301      	movs	r3, #1
 800067e:	603b      	str	r3, [r7, #0]
 8000680:	e001      	b.n	8000686 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000682:	2300      	movs	r3, #0
 8000684:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	2b01      	cmp	r3, #1
 800068a:	d14b      	bne.n	8000724 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800068c:	4b29      	ldr	r3, [pc, #164]	; (8000734 <SetSysClockTo72+0xfc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a28      	ldr	r2, [pc, #160]	; (8000734 <SetSysClockTo72+0xfc>)
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <SetSysClockTo72+0xfc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a25      	ldr	r2, [pc, #148]	; (8000734 <SetSysClockTo72+0xfc>)
 800069e:	f023 0307 	bic.w	r3, r3, #7
 80006a2:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <SetSysClockTo72+0xfc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a22      	ldr	r2, [pc, #136]	; (8000734 <SetSysClockTo72+0xfc>)
 80006aa:	f043 0302 	orr.w	r3, r3, #2
 80006ae:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SetSysClockTo72+0xf8>)
 80006b2:	4a1f      	ldr	r2, [pc, #124]	; (8000730 <SetSysClockTo72+0xf8>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <SetSysClockTo72+0xf8>)
 80006ba:	4a1d      	ldr	r2, [pc, #116]	; (8000730 <SetSysClockTo72+0xf8>)
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80006c0:	4b1b      	ldr	r3, [pc, #108]	; (8000730 <SetSysClockTo72+0xf8>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	4a1a      	ldr	r2, [pc, #104]	; (8000730 <SetSysClockTo72+0xf8>)
 80006c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80006ca:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80006cc:	4b18      	ldr	r3, [pc, #96]	; (8000730 <SetSysClockTo72+0xf8>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	4a17      	ldr	r2, [pc, #92]	; (8000730 <SetSysClockTo72+0xf8>)
 80006d2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80006d6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80006d8:	4b15      	ldr	r3, [pc, #84]	; (8000730 <SetSysClockTo72+0xf8>)
 80006da:	685b      	ldr	r3, [r3, #4]
 80006dc:	4a14      	ldr	r2, [pc, #80]	; (8000730 <SetSysClockTo72+0xf8>)
 80006de:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80006e2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <SetSysClockTo72+0xf8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a11      	ldr	r2, [pc, #68]	; (8000730 <SetSysClockTo72+0xf8>)
 80006ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006ee:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80006f0:	bf00      	nop
 80006f2:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <SetSysClockTo72+0xf8>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d0f9      	beq.n	80006f2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <SetSysClockTo72+0xf8>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <SetSysClockTo72+0xf8>)
 8000704:	f023 0303 	bic.w	r3, r3, #3
 8000708:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <SetSysClockTo72+0xf8>)
 800070c:	685b      	ldr	r3, [r3, #4]
 800070e:	4a08      	ldr	r2, [pc, #32]	; (8000730 <SetSysClockTo72+0xf8>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000716:	bf00      	nop
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SetSysClockTo72+0xf8>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	f003 030c 	and.w	r3, r3, #12
 8000720:	2b08      	cmp	r3, #8
 8000722:	d1f9      	bne.n	8000718 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40021000 	.word	0x40021000
 8000734:	40022000 	.word	0x40022000

08000738 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b04      	cmp	r3, #4
 8000744:	d106      	bne.n	8000754 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <SysTick_CLKSourceConfig+0x34>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <SysTick_CLKSourceConfig+0x34>)
 800074c:	f043 0304 	orr.w	r3, r3, #4
 8000750:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8000752:	e005      	b.n	8000760 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000754:	4b05      	ldr	r3, [pc, #20]	; (800076c <SysTick_CLKSourceConfig+0x34>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a04      	ldr	r2, [pc, #16]	; (800076c <SysTick_CLKSourceConfig+0x34>)
 800075a:	f023 0304 	bic.w	r3, r3, #4
 800075e:	6013      	str	r3, [r2, #0]
}
 8000760:	bf00      	nop
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	bc80      	pop	{r7}
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000e010 	.word	0xe000e010

08000770 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800077e:	2300      	movs	r3, #0
 8000780:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800078e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000792:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	021b      	lsls	r3, r3, #8
 800079e:	4313      	orrs	r3, r2
 80007a0:	68fa      	ldr	r2, [r7, #12]
 80007a2:	4313      	orrs	r3, r2
 80007a4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	68fa      	ldr	r2, [r7, #12]
 80007aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <ADC_Init+0xa0>)
 80007b6:	4013      	ands	r3, r2
 80007b8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	68da      	ldr	r2, [r3, #12]
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	795b      	ldrb	r3, [r3, #5]
 80007c8:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 80007ca:	4313      	orrs	r3, r2
 80007cc:	68fa      	ldr	r2, [r7, #12]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007dc:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80007e4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	7c1b      	ldrb	r3, [r3, #16]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	7afb      	ldrb	r3, [r7, #11]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 80007f4:	7afb      	ldrb	r3, [r7, #11]
 80007f6:	051b      	lsls	r3, r3, #20
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68fa      	ldr	r2, [r7, #12]
 8000802:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000804:	bf00      	nop
 8000806:	3714      	adds	r7, #20
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	fff1f7fd 	.word	0xfff1f7fd

08000814 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000820:	78fb      	ldrb	r3, [r7, #3]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d006      	beq.n	8000834 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	689b      	ldr	r3, [r3, #8]
 800082a:	f043 0201 	orr.w	r2, r3, #1
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 8000832:	e005      	b.n	8000840 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	689b      	ldr	r3, [r3, #8]
 8000838:	f023 0201 	bic.w	r2, r3, #1
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	609a      	str	r2, [r3, #8]
}
 8000840:	bf00      	nop
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	bc80      	pop	{r7}
 8000848:	4770      	bx	lr

0800084a <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 800084a:	b480      	push	{r7}
 800084c:	b083      	sub	sp, #12
 800084e:	af00      	add	r7, sp, #0
 8000850:	6078      	str	r0, [r7, #4]
 8000852:	460b      	mov	r3, r1
 8000854:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000856:	78fb      	ldrb	r3, [r7, #3]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d006      	beq.n	800086a <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= CR2_DMA_Set;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= CR2_DMA_Reset;
  }
}
 8000868:	e005      	b.n	8000876 <ADC_DMACmd+0x2c>
    ADCx->CR2 &= CR2_DMA_Reset;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	689b      	ldr	r3, [r3, #8]
 800086e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	609a      	str	r2, [r3, #8]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	f043 0208 	orr.w	r2, r3, #8
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	609a      	str	r2, [r3, #8]
}
 8000894:	bf00      	nop
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr

0800089e <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 800089e:	b480      	push	{r7}
 80008a0:	b085      	sub	sp, #20
 80008a2:	af00      	add	r7, sp, #0
 80008a4:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80008a6:	2300      	movs	r3, #0
 80008a8:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d002      	beq.n	80008bc <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 80008b6:	2301      	movs	r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
 80008ba:	e001      	b.n	80008c0 <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 80008bc:	2300      	movs	r3, #0
 80008be:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 80008c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	f043 0204 	orr.w	r2, r3, #4
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	609a      	str	r2, [r3, #8]
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 80008ea:	b480      	push	{r7}
 80008ec:	b085      	sub	sp, #20
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	689b      	ldr	r3, [r3, #8]
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d002      	beq.n	8000908 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 8000902:	2301      	movs	r3, #1
 8000904:	73fb      	strb	r3, [r7, #15]
 8000906:	e001      	b.n	800090c <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000908:	2300      	movs	r3, #0
 800090a:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 800090c:	7bfb      	ldrb	r3, [r7, #15]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3714      	adds	r7, #20
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr

08000918 <ADC_SoftwareStartConvCmd>:
  * @param  NewState: new state of the selected ADC software start conversion.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	460b      	mov	r3, r1
 8000922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000924:	78fb      	ldrb	r3, [r7, #3]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d006      	beq.n	8000938 <ADC_SoftwareStartConvCmd+0x20>
  {
    /* Enable the selected ADC conversion on external event and start the selected
       ADC conversion */
    ADCx->CR2 |= CR2_EXTTRIG_SWSTART_Set;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	609a      	str	r2, [r3, #8]
  {
    /* Disable the selected ADC conversion on external event and stop the selected
       ADC conversion */
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
  }
}
 8000936:	e005      	b.n	8000944 <ADC_SoftwareStartConvCmd+0x2c>
    ADCx->CR2 &= CR2_EXTTRIG_SWSTART_Reset;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	f423 02a0 	bic.w	r2, r3, #5242880	; 0x500000
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	609a      	str	r2, [r3, #8]
}
 8000944:	bf00      	nop
 8000946:	370c      	adds	r7, #12
 8000948:	46bd      	mov	sp, r7
 800094a:	bc80      	pop	{r7}
 800094c:	4770      	bx	lr

0800094e <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800094e:	b480      	push	{r7}
 8000950:	b085      	sub	sp, #20
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
 8000956:	4608      	mov	r0, r1
 8000958:	4611      	mov	r1, r2
 800095a:	461a      	mov	r2, r3
 800095c:	4603      	mov	r3, r0
 800095e:	70fb      	strb	r3, [r7, #3]
 8000960:	460b      	mov	r3, r1
 8000962:	70bb      	strb	r3, [r7, #2]
 8000964:	4613      	mov	r3, r2
 8000966:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000970:	78fb      	ldrb	r3, [r7, #3]
 8000972:	2b09      	cmp	r3, #9
 8000974:	d923      	bls.n	80009be <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	68db      	ldr	r3, [r3, #12]
 800097a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 800097c:	78fb      	ldrb	r3, [r7, #3]
 800097e:	f1a3 020a 	sub.w	r2, r3, #10
 8000982:	4613      	mov	r3, r2
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4413      	add	r3, r2
 8000988:	2207      	movs	r2, #7
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	43db      	mvns	r3, r3
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4013      	ands	r3, r2
 8000998:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800099a:	7879      	ldrb	r1, [r7, #1]
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	f1a3 020a 	sub.w	r2, r3, #10
 80009a2:	4613      	mov	r3, r2
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ac:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	68fa      	ldr	r2, [r7, #12]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	e01e      	b.n	80009fc <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80009c4:	78fa      	ldrb	r2, [r7, #3]
 80009c6:	4613      	mov	r3, r2
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4413      	add	r3, r2
 80009cc:	2207      	movs	r2, #7
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	43db      	mvns	r3, r3
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	4013      	ands	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80009de:	7879      	ldrb	r1, [r7, #1]
 80009e0:	78fa      	ldrb	r2, [r7, #3]
 80009e2:	4613      	mov	r3, r2
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	4413      	add	r3, r2
 80009e8:	fa01 f303 	lsl.w	r3, r1, r3
 80009ec:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80009fc:	78bb      	ldrb	r3, [r7, #2]
 80009fe:	2b06      	cmp	r3, #6
 8000a00:	d821      	bhi.n	8000a46 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a06:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 8000a08:	78bb      	ldrb	r3, [r7, #2]
 8000a0a:	1e5a      	subs	r2, r3, #1
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	009b      	lsls	r3, r3, #2
 8000a10:	4413      	add	r3, r2
 8000a12:	221f      	movs	r2, #31
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	43db      	mvns	r3, r3
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	4013      	ands	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000a24:	78f9      	ldrb	r1, [r7, #3]
 8000a26:	78bb      	ldrb	r3, [r7, #2]
 8000a28:	1e5a      	subs	r2, r3, #1
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	4413      	add	r3, r2
 8000a30:	fa01 f303 	lsl.w	r3, r1, r3
 8000a34:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000a36:	68fa      	ldr	r2, [r7, #12]
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000a44:	e047      	b.n	8000ad6 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000a46:	78bb      	ldrb	r3, [r7, #2]
 8000a48:	2b0c      	cmp	r3, #12
 8000a4a:	d821      	bhi.n	8000a90 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a50:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8000a52:	78bb      	ldrb	r3, [r7, #2]
 8000a54:	1fda      	subs	r2, r3, #7
 8000a56:	4613      	mov	r3, r2
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	4413      	add	r3, r2
 8000a5c:	221f      	movs	r2, #31
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	43db      	mvns	r3, r3
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	4013      	ands	r3, r2
 8000a6c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000a6e:	78f9      	ldrb	r1, [r7, #3]
 8000a70:	78bb      	ldrb	r3, [r7, #2]
 8000a72:	1fda      	subs	r2, r3, #7
 8000a74:	4613      	mov	r3, r2
 8000a76:	009b      	lsls	r3, r3, #2
 8000a78:	4413      	add	r3, r2
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000a8e:	e022      	b.n	8000ad6 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a94:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 8000a96:	78bb      	ldrb	r3, [r7, #2]
 8000a98:	f1a3 020d 	sub.w	r2, r3, #13
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	221f      	movs	r2, #31
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	68fa      	ldr	r2, [r7, #12]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000ab4:	78f9      	ldrb	r1, [r7, #3]
 8000ab6:	78bb      	ldrb	r3, [r7, #2]
 8000ab8:	f1a3 020d 	sub.w	r2, r3, #13
 8000abc:	4613      	mov	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	4413      	add	r3, r2
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000ac8:	68fa      	ldr	r2, [r7, #12]
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	68fa      	ldr	r2, [r7, #12]
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <DMA_DeInit>:
  * @param  DMAy_Channelx: where y can be 1 or 2 to select the DMA and
  *   x can be 1 to 7 for DMA1 and 1 to 5 for DMA2 to select the DMA Channel.
  * @retval None
  */
void DMA_DeInit(DMA_Channel_TypeDef* DMAy_Channelx)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  
  /* Disable the selected DMAy Channelx */
  DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000af0:	4013      	ands	r3, r2
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
  
  /* Reset DMAy Channelx control register */
  DMAy_Channelx->CCR  = 0;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Channelx remaining bytes register */
  DMAy_Channelx->CNDTR = 0;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Channelx peripheral address register */
  DMAy_Channelx->CPAR  = 0;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Channelx memory address register */
  DMAy_Channelx->CMAR = 0;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  
  if (DMAy_Channelx == DMA1_Channel1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4a43      	ldr	r2, [pc, #268]	; (8000c20 <DMA_DeInit+0x140>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d106      	bne.n	8000b24 <DMA_DeInit+0x44>
  {
    /* Reset interrupt pending bits for DMA1 Channel1 */
    DMA1->IFCR |= DMA1_Channel1_IT_Mask;
 8000b16:	4b43      	ldr	r3, [pc, #268]	; (8000c24 <DMA_DeInit+0x144>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4a42      	ldr	r2, [pc, #264]	; (8000c24 <DMA_DeInit+0x144>)
 8000b1c:	f043 030f 	orr.w	r3, r3, #15
 8000b20:	6053      	str	r3, [r2, #4]
    {
      /* Reset interrupt pending bits for DMA2 Channel5 */
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
    }
  }
}
 8000b22:	e077      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel2)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a40      	ldr	r2, [pc, #256]	; (8000c28 <DMA_DeInit+0x148>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d106      	bne.n	8000b3a <DMA_DeInit+0x5a>
    DMA1->IFCR |= DMA1_Channel2_IT_Mask;
 8000b2c:	4b3d      	ldr	r3, [pc, #244]	; (8000c24 <DMA_DeInit+0x144>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	4a3c      	ldr	r2, [pc, #240]	; (8000c24 <DMA_DeInit+0x144>)
 8000b32:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000b36:	6053      	str	r3, [r2, #4]
}
 8000b38:	e06c      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel3)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a3b      	ldr	r2, [pc, #236]	; (8000c2c <DMA_DeInit+0x14c>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d106      	bne.n	8000b50 <DMA_DeInit+0x70>
    DMA1->IFCR |= DMA1_Channel3_IT_Mask;
 8000b42:	4b38      	ldr	r3, [pc, #224]	; (8000c24 <DMA_DeInit+0x144>)
 8000b44:	685b      	ldr	r3, [r3, #4]
 8000b46:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <DMA_DeInit+0x144>)
 8000b48:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000b4c:	6053      	str	r3, [r2, #4]
}
 8000b4e:	e061      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel4)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4a37      	ldr	r2, [pc, #220]	; (8000c30 <DMA_DeInit+0x150>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d106      	bne.n	8000b66 <DMA_DeInit+0x86>
    DMA1->IFCR |= DMA1_Channel4_IT_Mask;
 8000b58:	4b32      	ldr	r3, [pc, #200]	; (8000c24 <DMA_DeInit+0x144>)
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	4a31      	ldr	r2, [pc, #196]	; (8000c24 <DMA_DeInit+0x144>)
 8000b5e:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000b62:	6053      	str	r3, [r2, #4]
}
 8000b64:	e056      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel5)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <DMA_DeInit+0x154>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d106      	bne.n	8000b7c <DMA_DeInit+0x9c>
    DMA1->IFCR |= DMA1_Channel5_IT_Mask;
 8000b6e:	4b2d      	ldr	r3, [pc, #180]	; (8000c24 <DMA_DeInit+0x144>)
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	4a2c      	ldr	r2, [pc, #176]	; (8000c24 <DMA_DeInit+0x144>)
 8000b74:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000b78:	6053      	str	r3, [r2, #4]
}
 8000b7a:	e04b      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel6)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a2e      	ldr	r2, [pc, #184]	; (8000c38 <DMA_DeInit+0x158>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d106      	bne.n	8000b92 <DMA_DeInit+0xb2>
    DMA1->IFCR |= DMA1_Channel6_IT_Mask;
 8000b84:	4b27      	ldr	r3, [pc, #156]	; (8000c24 <DMA_DeInit+0x144>)
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	4a26      	ldr	r2, [pc, #152]	; (8000c24 <DMA_DeInit+0x144>)
 8000b8a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b8e:	6053      	str	r3, [r2, #4]
}
 8000b90:	e040      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA1_Channel7)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a29      	ldr	r2, [pc, #164]	; (8000c3c <DMA_DeInit+0x15c>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d106      	bne.n	8000ba8 <DMA_DeInit+0xc8>
    DMA1->IFCR |= DMA1_Channel7_IT_Mask;
 8000b9a:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <DMA_DeInit+0x144>)
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <DMA_DeInit+0x144>)
 8000ba0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000ba4:	6053      	str	r3, [r2, #4]
}
 8000ba6:	e035      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel1)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a25      	ldr	r2, [pc, #148]	; (8000c40 <DMA_DeInit+0x160>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d106      	bne.n	8000bbe <DMA_DeInit+0xde>
    DMA2->IFCR |= DMA2_Channel1_IT_Mask;
 8000bb0:	4b24      	ldr	r3, [pc, #144]	; (8000c44 <DMA_DeInit+0x164>)
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	4a23      	ldr	r2, [pc, #140]	; (8000c44 <DMA_DeInit+0x164>)
 8000bb6:	f043 030f 	orr.w	r3, r3, #15
 8000bba:	6053      	str	r3, [r2, #4]
}
 8000bbc:	e02a      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel2)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <DMA_DeInit+0x168>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d106      	bne.n	8000bd4 <DMA_DeInit+0xf4>
    DMA2->IFCR |= DMA2_Channel2_IT_Mask;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <DMA_DeInit+0x164>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	4a1e      	ldr	r2, [pc, #120]	; (8000c44 <DMA_DeInit+0x164>)
 8000bcc:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8000bd0:	6053      	str	r3, [r2, #4]
}
 8000bd2:	e01f      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel3)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <DMA_DeInit+0x16c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d106      	bne.n	8000bea <DMA_DeInit+0x10a>
    DMA2->IFCR |= DMA2_Channel3_IT_Mask;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <DMA_DeInit+0x164>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	4a18      	ldr	r2, [pc, #96]	; (8000c44 <DMA_DeInit+0x164>)
 8000be2:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
 8000be6:	6053      	str	r3, [r2, #4]
}
 8000be8:	e014      	b.n	8000c14 <DMA_DeInit+0x134>
  else if (DMAy_Channelx == DMA2_Channel4)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <DMA_DeInit+0x170>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d106      	bne.n	8000c00 <DMA_DeInit+0x120>
    DMA2->IFCR |= DMA2_Channel4_IT_Mask;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <DMA_DeInit+0x164>)
 8000bf4:	685b      	ldr	r3, [r3, #4]
 8000bf6:	4a13      	ldr	r2, [pc, #76]	; (8000c44 <DMA_DeInit+0x164>)
 8000bf8:	f443 4370 	orr.w	r3, r3, #61440	; 0xf000
 8000bfc:	6053      	str	r3, [r2, #4]
}
 8000bfe:	e009      	b.n	8000c14 <DMA_DeInit+0x134>
    if (DMAy_Channelx == DMA2_Channel5)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4a14      	ldr	r2, [pc, #80]	; (8000c54 <DMA_DeInit+0x174>)
 8000c04:	4293      	cmp	r3, r2
 8000c06:	d105      	bne.n	8000c14 <DMA_DeInit+0x134>
      DMA2->IFCR |= DMA2_Channel5_IT_Mask;
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <DMA_DeInit+0x164>)
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	4a0d      	ldr	r2, [pc, #52]	; (8000c44 <DMA_DeInit+0x164>)
 8000c0e:	f443 2370 	orr.w	r3, r3, #983040	; 0xf0000
 8000c12:	6053      	str	r3, [r2, #4]
}
 8000c14:	bf00      	nop
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40020008 	.word	0x40020008
 8000c24:	40020000 	.word	0x40020000
 8000c28:	4002001c 	.word	0x4002001c
 8000c2c:	40020030 	.word	0x40020030
 8000c30:	40020044 	.word	0x40020044
 8000c34:	40020058 	.word	0x40020058
 8000c38:	4002006c 	.word	0x4002006c
 8000c3c:	40020080 	.word	0x40020080
 8000c40:	40020408 	.word	0x40020408
 8000c44:	40020400 	.word	0x40020400
 8000c48:	4002041c 	.word	0x4002041c
 8000c4c:	40020430 	.word	0x40020430
 8000c50:	40020444 	.word	0x40020444
 8000c54:	40020458 	.word	0x40020458

08000c58 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_Mask;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000c76:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	6a1b      	ldr	r3, [r3, #32]
 8000c80:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	691b      	ldr	r3, [r3, #16]
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000c86:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	695b      	ldr	r3, [r3, #20]
 8000c8c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	699b      	ldr	r3, [r3, #24]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c92:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	69db      	ldr	r3, [r3, #28]
 8000c98:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c9e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ca4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68fa      	ldr	r2, [r7, #12]
 8000cb0:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	60da      	str	r2, [r3, #12]
}
 8000cca:	bf00      	nop
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr

08000cd4 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d006      	beq.n	8000cf4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f043 0201 	orr.w	r2, r3, #1
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000cf2:	e006      	b.n	8000d02 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6013      	str	r3, [r2, #0]
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61bb      	str	r3, [r7, #24]
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	78db      	ldrb	r3, [r3, #3]
 8000d32:	f003 030f 	and.w	r3, r3, #15
 8000d36:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	78db      	ldrb	r3, [r3, #3]
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d005      	beq.n	8000d50 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	789b      	ldrb	r3, [r3, #2]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	881b      	ldrh	r3, [r3, #0]
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d044      	beq.n	8000de4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000d60:	2300      	movs	r3, #0
 8000d62:	61bb      	str	r3, [r7, #24]
 8000d64:	e038      	b.n	8000dd8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000d66:	2201      	movs	r2, #1
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	881b      	ldrh	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d126      	bne.n	8000dd2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	697a      	ldr	r2, [r7, #20]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000d9e:	69fa      	ldr	r2, [r7, #28]
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	78db      	ldrb	r3, [r3, #3]
 8000db0:	2b28      	cmp	r3, #40	; 0x28
 8000db2:	d105      	bne.n	8000dc0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000db4:	2201      	movs	r2, #1
 8000db6:	69bb      	ldr	r3, [r7, #24]
 8000db8:	409a      	lsls	r2, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	615a      	str	r2, [r3, #20]
 8000dbe:	e008      	b.n	8000dd2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	78db      	ldrb	r3, [r3, #3]
 8000dc4:	2b48      	cmp	r3, #72	; 0x48
 8000dc6:	d104      	bne.n	8000dd2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69bb      	ldr	r3, [r7, #24]
 8000dcc:	409a      	lsls	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	2b07      	cmp	r3, #7
 8000ddc:	d9c3      	bls.n	8000d66 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	2bff      	cmp	r3, #255	; 0xff
 8000dea:	d946      	bls.n	8000e7a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000df2:	2300      	movs	r3, #0
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	e03a      	b.n	8000e6e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000df8:	69bb      	ldr	r3, [r7, #24]
 8000dfa:	3308      	adds	r3, #8
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d127      	bne.n	8000e68 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	009b      	lsls	r3, r3, #2
 8000e1c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000e1e:	220f      	movs	r2, #15
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	697a      	ldr	r2, [r7, #20]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	78db      	ldrb	r3, [r3, #3]
 8000e44:	2b28      	cmp	r3, #40	; 0x28
 8000e46:	d105      	bne.n	8000e54 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	3308      	adds	r3, #8
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	78db      	ldrb	r3, [r3, #3]
 8000e58:	2b48      	cmp	r3, #72	; 0x48
 8000e5a:	d105      	bne.n	8000e68 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	3308      	adds	r3, #8
 8000e60:	2201      	movs	r2, #1
 8000e62:	409a      	lsls	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61bb      	str	r3, [r7, #24]
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	2b07      	cmp	r3, #7
 8000e72:	d9c1      	bls.n	8000df8 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	697a      	ldr	r2, [r7, #20]
 8000e78:	605a      	str	r2, [r3, #4]
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bc80      	pop	{r7}
 8000e82:	4770      	bx	lr

08000e84 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	887b      	ldrh	r3, [r7, #2]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	73fb      	strb	r3, [r7, #15]
 8000ea4:	e001      	b.n	8000eaa <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr

08000eb6 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	807b      	strh	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000ec6:	787b      	ldrb	r3, [r7, #1]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d003      	beq.n	8000ed4 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ecc:	887a      	ldrh	r2, [r7, #2]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000ed2:	e002      	b.n	8000eda <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8000ed4:	887a      	ldrh	r2, [r7, #2]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	615a      	str	r2, [r3, #20]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b087      	sub	sp, #28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da03      	bge.n	8000f0e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <GPIO_PinRemapConfig+0xdc>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e002      	b.n	8000f14 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <GPIO_PinRemapConfig+0xdc>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	0c1b      	lsrs	r3, r3, #16
 8000f18:	f003 030f 	and.w	r3, r3, #15
 8000f1c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000f2e:	d10a      	bne.n	8000f46 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000f36:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <GPIO_PinRemapConfig+0xdc>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	4a20      	ldr	r2, [pc, #128]	; (8000fc0 <GPIO_PinRemapConfig+0xdc>)
 8000f3e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000f42:	6053      	str	r3, [r2, #4]
 8000f44:	e021      	b.n	8000f8a <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00e      	beq.n	8000f6e <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000f50:	2203      	movs	r2, #3
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	697a      	ldr	r2, [r7, #20]
 8000f60:	4013      	ands	r3, r2
 8000f62:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	e00d      	b.n	8000f8a <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	0d5b      	lsrs	r3, r3, #21
 8000f72:	011b      	lsls	r3, r3, #4
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8000f88:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 8000f8a:	78fb      	ldrb	r3, [r7, #3]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d008      	beq.n	8000fa2 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	0d5b      	lsrs	r3, r3, #21
 8000f94:	011b      	lsls	r3, r3, #4
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	697a      	ldr	r2, [r7, #20]
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	da03      	bge.n	8000fb0 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000fa8:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <GPIO_PinRemapConfig+0xdc>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8000fae:	e002      	b.n	8000fb6 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <GPIO_PinRemapConfig+0xdc>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	6053      	str	r3, [r2, #4]
}
 8000fb6:	bf00      	nop
 8000fb8:	371c      	adds	r7, #28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40010000 	.word	0x40010000

08000fc4 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b083      	sub	sp, #12
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000fcc:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <RCC_USBCLKConfig+0x18>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr
 8000fdc:	424200d8 	.word	0x424200d8

08000fe0 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <RCC_ADCCLKConfig+0x34>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ff8:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001002:	4a04      	ldr	r2, [pc, #16]	; (8001014 <RCC_ADCCLKConfig+0x34>)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	6053      	str	r3, [r2, #4]
}
 8001008:	bf00      	nop
 800100a:	3714      	adds	r7, #20
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40021000 	.word	0x40021000

08001018 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <RCC_LSEConfig+0x3c>)
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001028:	4b0a      	ldr	r3, [pc, #40]	; (8001054 <RCC_LSEConfig+0x3c>)
 800102a:	2200      	movs	r2, #0
 800102c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d002      	beq.n	800103a <RCC_LSEConfig+0x22>
 8001034:	2b04      	cmp	r3, #4
 8001036:	d004      	beq.n	8001042 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8001038:	e007      	b.n	800104a <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800103a:	4b06      	ldr	r3, [pc, #24]	; (8001054 <RCC_LSEConfig+0x3c>)
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
      break;
 8001040:	e003      	b.n	800104a <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001042:	4b04      	ldr	r3, [pc, #16]	; (8001054 <RCC_LSEConfig+0x3c>)
 8001044:	2205      	movs	r2, #5
 8001046:	701a      	strb	r2, [r3, #0]
      break;            
 8001048:	bf00      	nop
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	40021020 	.word	0x40021020

08001058 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <RCC_RTCCLKConfig+0x20>)
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	4904      	ldr	r1, [pc, #16]	; (8001078 <RCC_RTCCLKConfig+0x20>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4313      	orrs	r3, r2
 800106a:	620b      	str	r3, [r1, #32]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40021000 	.word	0x40021000

0800107c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001086:	4a04      	ldr	r2, [pc, #16]	; (8001098 <RCC_RTCCLKCmd+0x1c>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	6013      	str	r3, [r2, #0]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	bc80      	pop	{r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	4242043c 	.word	0x4242043c

0800109c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800109c:	b480      	push	{r7}
 800109e:	b087      	sub	sp, #28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	2300      	movs	r3, #0
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	2300      	movs	r3, #0
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	2300      	movs	r3, #0
 80010b2:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80010b4:	4b4f      	ldr	r3, [pc, #316]	; (80011f4 <RCC_GetClocksFreq+0x158>)
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f003 030c 	and.w	r3, r3, #12
 80010bc:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d011      	beq.n	80010e8 <RCC_GetClocksFreq+0x4c>
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	2b08      	cmp	r3, #8
 80010c8:	d83a      	bhi.n	8001140 <RCC_GetClocksFreq+0xa4>
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <RCC_GetClocksFreq+0x3c>
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d004      	beq.n	80010e0 <RCC_GetClocksFreq+0x44>
 80010d6:	e033      	b.n	8001140 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a47      	ldr	r2, [pc, #284]	; (80011f8 <RCC_GetClocksFreq+0x15c>)
 80010dc:	601a      	str	r2, [r3, #0]
      break;
 80010de:	e033      	b.n	8001148 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a45      	ldr	r2, [pc, #276]	; (80011f8 <RCC_GetClocksFreq+0x15c>)
 80010e4:	601a      	str	r2, [r3, #0]
      break;
 80010e6:	e02f      	b.n	8001148 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80010e8:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <RCC_GetClocksFreq+0x158>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80010f0:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80010f2:	4b40      	ldr	r3, [pc, #256]	; (80011f4 <RCC_GetClocksFreq+0x158>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fa:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	0c9b      	lsrs	r3, r3, #18
 8001100:	3302      	adds	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d106      	bne.n	8001118 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	4a3b      	ldr	r2, [pc, #236]	; (80011fc <RCC_GetClocksFreq+0x160>)
 800110e:	fb03 f202 	mul.w	r2, r3, r2
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001116:	e017      	b.n	8001148 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <RCC_GetClocksFreq+0x158>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d006      	beq.n	8001132 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4a35      	ldr	r2, [pc, #212]	; (80011fc <RCC_GetClocksFreq+0x160>)
 8001128:	fb03 f202 	mul.w	r2, r3, r2
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	601a      	str	r2, [r3, #0]
      break;
 8001130:	e00a      	b.n	8001148 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <RCC_GetClocksFreq+0x15c>)
 8001136:	fb03 f202 	mul.w	r2, r3, r2
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	601a      	str	r2, [r3, #0]
      break;
 800113e:	e003      	b.n	8001148 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <RCC_GetClocksFreq+0x15c>)
 8001144:	601a      	str	r2, [r3, #0]
      break;
 8001146:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <RCC_GetClocksFreq+0x158>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001150:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	091b      	lsrs	r3, r3, #4
 8001156:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001158:	4a29      	ldr	r2, [pc, #164]	; (8001200 <RCC_GetClocksFreq+0x164>)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	4413      	add	r3, r2
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
 8001162:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	40da      	lsrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <RCC_GetClocksFreq+0x158>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001178:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	0a1b      	lsrs	r3, r3, #8
 800117e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001180:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <RCC_GetClocksFreq+0x164>)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	4413      	add	r3, r2
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	40da      	lsrs	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <RCC_GetClocksFreq+0x158>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80011a0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	0adb      	lsrs	r3, r3, #11
 80011a6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80011a8:	4a15      	ldr	r2, [pc, #84]	; (8001200 <RCC_GetClocksFreq+0x164>)
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	40da      	lsrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <RCC_GetClocksFreq+0x158>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	0b9b      	lsrs	r3, r3, #14
 80011ce:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80011d0:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <RCC_GetClocksFreq+0x168>)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	4413      	add	r3, r2
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	611a      	str	r2, [r3, #16]
}
 80011ea:	bf00      	nop
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr
 80011f4:	40021000 	.word	0x40021000
 80011f8:	007a1200 	.word	0x007a1200
 80011fc:	003d0900 	.word	0x003d0900
 8001200:	20000018 	.word	0x20000018
 8001204:	20000028 	.word	0x20000028

08001208 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001214:	78fb      	ldrb	r3, [r7, #3]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d006      	beq.n	8001228 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800121a:	4b09      	ldr	r3, [pc, #36]	; (8001240 <RCC_AHBPeriphClockCmd+0x38>)
 800121c:	695a      	ldr	r2, [r3, #20]
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <RCC_AHBPeriphClockCmd+0x38>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4313      	orrs	r3, r2
 8001224:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001226:	e006      	b.n	8001236 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001228:	4b05      	ldr	r3, [pc, #20]	; (8001240 <RCC_AHBPeriphClockCmd+0x38>)
 800122a:	695a      	ldr	r2, [r3, #20]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	43db      	mvns	r3, r3
 8001230:	4903      	ldr	r1, [pc, #12]	; (8001240 <RCC_AHBPeriphClockCmd+0x38>)
 8001232:	4013      	ands	r3, r2
 8001234:	614b      	str	r3, [r1, #20]
}
 8001236:	bf00      	nop
 8001238:	370c      	adds	r7, #12
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000

08001244 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001250:	78fb      	ldrb	r3, [r7, #3]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <RCC_APB2PeriphClockCmd+0x38>)
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	4908      	ldr	r1, [pc, #32]	; (800127c <RCC_APB2PeriphClockCmd+0x38>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4313      	orrs	r3, r2
 8001260:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001262:	e006      	b.n	8001272 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <RCC_APB2PeriphClockCmd+0x38>)
 8001266:	699a      	ldr	r2, [r3, #24]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	43db      	mvns	r3, r3
 800126c:	4903      	ldr	r1, [pc, #12]	; (800127c <RCC_APB2PeriphClockCmd+0x38>)
 800126e:	4013      	ands	r3, r2
 8001270:	618b      	str	r3, [r1, #24]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	bc80      	pop	{r7}
 800127a:	4770      	bx	lr
 800127c:	40021000 	.word	0x40021000

08001280 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <RCC_MCOConfig+0x1c>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	7013      	strb	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	bc80      	pop	{r7}
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40021007 	.word	0x40021007

080012a0 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	460b      	mov	r3, r1
 80012aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	887a      	ldrh	r2, [r7, #2]
 80012b0:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80012c8:	b29b      	uxth	r3, r3
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80012e0:	b29b      	uxth	r3, r3
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 80012f8:	2300      	movs	r3, #0
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	81bb      	strh	r3, [r7, #12]
 8001300:	2300      	movs	r3, #0
 8001302:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	8a1b      	ldrh	r3, [r3, #16]
 8001308:	b29a      	uxth	r2, r3
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	4013      	ands	r3, r2
 800130e:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	899b      	ldrh	r3, [r3, #12]
 8001314:	b29a      	uxth	r2, r3
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	4013      	ands	r3, r2
 800131a:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 800131c:	89bb      	ldrh	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d005      	beq.n	800132e <TIM_GetITStatus+0x42>
 8001322:	897b      	ldrh	r3, [r7, #10]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d002      	beq.n	800132e <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
 800132c:	e001      	b.n	8001332 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	bc80      	pop	{r7}
 800133c:	4770      	bx	lr

0800133e <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800134a:	887b      	ldrh	r3, [r7, #2]
 800134c:	43db      	mvns	r3, r3
 800134e:	b29a      	uxth	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	821a      	strh	r2, [r3, #16]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 800135e:	b580      	push	{r7, lr}
 8001360:	af00      	add	r7, sp, #0

  // SYS CLK Init 
  BSP_RCC_Init();
 8001362:	f7fe ffbb 	bl	80002dc <BSP_RCC_Init>

  /** Config SWJ Reamp 
    *   If using the PA15、PA14、PA13、PB4、PB3 for Remapping Pin, these Clock Must be Config before SWJ REMAP config Function!
    */
  sys_SWJ_REMAP_Config(SWJ_ENABLE);
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff f88c 	bl	8000484 <sys_SWJ_REMAP_Config>

  BSP_ADC_Init();
 800136c:	f7fe ff00 	bl	8000170 <BSP_ADC_Init>


  while (1)
  {
    BSP_ADC_Val2Vltg();
 8001370:	f7fe ff84 	bl	800027c <BSP_ADC_Val2Vltg>
 8001374:	e7fc      	b.n	8001370 <main+0x12>

08001376 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
}
 800137a:	bf00      	nop
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr

08001382 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001382:	b480      	push	{r7}
 8001384:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001386:	e7fe      	b.n	8001386 <HardFault_Handler+0x4>

08001388 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800138c:	e7fe      	b.n	800138c <MemManage_Handler+0x4>

0800138e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800138e:	b480      	push	{r7}
 8001390:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001392:	e7fe      	b.n	8001392 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001398:	e7fe      	b.n	8001398 <UsageFault_Handler+0x4>

0800139a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr

080013b2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
}
 80013c2:	bf00      	nop
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr
	...

080013cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013ce:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80013d0:	f7ff f886 	bl	80004e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <LoopForever+0x6>)
  ldr r1, =_edata
 80013d6:	490d      	ldr	r1, [pc, #52]	; (800140c <LoopForever+0xa>)
  ldr r2, =_sidata
 80013d8:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <LoopForever+0xe>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013ec:	4c0a      	ldr	r4, [pc, #40]	; (8001418 <LoopForever+0x16>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013fa:	f000 f811 	bl	8001420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013fe:	f7ff ffae 	bl	800135e <main>

08001402 <LoopForever>:

LoopForever:
  b LoopForever
 8001402:	e7fe      	b.n	8001402 <LoopForever>
  ldr   r0, =_estack
 8001404:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800140c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001410:	08001488 	.word	0x08001488
  ldr r2, =_sbss
 8001414:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001418:	20000070 	.word	0x20000070

0800141c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800141c:	e7fe      	b.n	800141c <ADC1_2_IRQHandler>
	...

08001420 <__libc_init_array>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	2600      	movs	r6, #0
 8001424:	4d0c      	ldr	r5, [pc, #48]	; (8001458 <__libc_init_array+0x38>)
 8001426:	4c0d      	ldr	r4, [pc, #52]	; (800145c <__libc_init_array+0x3c>)
 8001428:	1b64      	subs	r4, r4, r5
 800142a:	10a4      	asrs	r4, r4, #2
 800142c:	42a6      	cmp	r6, r4
 800142e:	d109      	bne.n	8001444 <__libc_init_array+0x24>
 8001430:	f000 f81a 	bl	8001468 <_init>
 8001434:	2600      	movs	r6, #0
 8001436:	4d0a      	ldr	r5, [pc, #40]	; (8001460 <__libc_init_array+0x40>)
 8001438:	4c0a      	ldr	r4, [pc, #40]	; (8001464 <__libc_init_array+0x44>)
 800143a:	1b64      	subs	r4, r4, r5
 800143c:	10a4      	asrs	r4, r4, #2
 800143e:	42a6      	cmp	r6, r4
 8001440:	d105      	bne.n	800144e <__libc_init_array+0x2e>
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	f855 3b04 	ldr.w	r3, [r5], #4
 8001448:	4798      	blx	r3
 800144a:	3601      	adds	r6, #1
 800144c:	e7ee      	b.n	800142c <__libc_init_array+0xc>
 800144e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001452:	4798      	blx	r3
 8001454:	3601      	adds	r6, #1
 8001456:	e7f2      	b.n	800143e <__libc_init_array+0x1e>
 8001458:	08001480 	.word	0x08001480
 800145c:	08001480 	.word	0x08001480
 8001460:	08001480 	.word	0x08001480
 8001464:	08001484 	.word	0x08001484

08001468 <_init>:
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	bf00      	nop
 800146c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146e:	bc08      	pop	{r3}
 8001470:	469e      	mov	lr, r3
 8001472:	4770      	bx	lr

08001474 <_fini>:
 8001474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001476:	bf00      	nop
 8001478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147a:	bc08      	pop	{r3}
 800147c:	469e      	mov	lr, r3
 800147e:	4770      	bx	lr
