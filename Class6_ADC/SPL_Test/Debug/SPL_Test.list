
SPL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001208  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001338  08001338  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001338  08001338  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001338  08001338  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001338  08001338  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001338  08001338  00011338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800133c  0800133c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  2000002c  0800136c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  0800136c  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f71  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000f6e  00000000  00000000  00024fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00025f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005f0  00000000  00000000  000265e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d0d  00000000  00000000  00026bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006b27  00000000  00000000  000298dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054377  00000000  00000000  00030404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008477b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b04  00000000  00000000  000847cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001320 	.word	0x08001320

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08001320 	.word	0x08001320

08000170 <BSP_RCC_Init>:




void BSP_RCC_Init(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  SystemInit();
 8000174:	f000 f950 	bl	8000418 <SystemInit>

  /* Configure the System Peripheral clock prescalers */
  BSP_RCC_Periph_Clock_Init();
 8000178:	f000 f80c 	bl	8000194 <BSP_RCC_Periph_Clock_Init>

  //Update SystemCoreClock variable according to Clock Register Values
  SystemCoreClockUpdate();
 800017c:	f000 f980 	bl	8000480 <SystemCoreClockUpdate>

  /* This function fills the RCC_ClockFreq structure with the current
  frequencies of different on chip clocks (for debug purpose) */
  RCC_GetClocksFreq(&RCC_ClockFreq);
 8000180:	4803      	ldr	r0, [pc, #12]	; (8000190 <BSP_RCC_Init+0x20>)
 8000182:	f000 fcbb 	bl	8000afc <RCC_GetClocksFreq>

  /* NVIC configuration ------------------------------------------------------*/
  //BSP_RCC_NVIC_Configuration();

  delay_init(72);
 8000186:	2048      	movs	r0, #72	; 0x48
 8000188:	f000 f8f6 	bl	8000378 <delay_init>

  // _mcu_rev_id = DBGMCU_GetREVID();
  // _mcu_dev_id = DBGMCU_GetDEVID();

}
 800018c:	bf00      	nop
 800018e:	bd80      	pop	{r7, pc}
 8000190:	20000048 	.word	0x20000048

08000194 <BSP_RCC_Periph_Clock_Init>:


void BSP_RCC_Periph_Clock_Init(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0



  //ADC CLK Prescaler, ADC CLK = 72 / 6 = 12 Mhz
  RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8000198:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800019c:	f000 fc50 	bl	8000a40 <RCC_ADCCLKConfig>
  //USB OTG CLK FS Prescaler, when PLL = 72Mhz, OTGFSPRE = 0
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 80001a0:	2000      	movs	r0, #0
 80001a2:	f000 fc3f 	bl	8000a24 <RCC_USBCLKConfig>
  //MCO 
  RCC_MCOConfig(RCC_MCO_NoClock);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f000 fdb8 	bl	8000d1c <RCC_MCOConfig>


  //Clear Clock interrupt register
  RCC->CIR = 0;
 80001ac:	4b0f      	ldr	r3, [pc, #60]	; (80001ec <BSP_RCC_Periph_Clock_Init+0x58>)
 80001ae:	2200      	movs	r2, #0
 80001b0:	609a      	str	r2, [r3, #8]

  //Reset APB2 and APB1 Peripheral
  RCC->APB2RSTR = 0;
 80001b2:	4b0e      	ldr	r3, [pc, #56]	; (80001ec <BSP_RCC_Periph_Clock_Init+0x58>)
 80001b4:	2200      	movs	r2, #0
 80001b6:	60da      	str	r2, [r3, #12]
  RCC->APB1RSTR = 0;
 80001b8:	4b0c      	ldr	r3, [pc, #48]	; (80001ec <BSP_RCC_Periph_Clock_Init+0x58>)
 80001ba:	2200      	movs	r2, #0
 80001bc:	611a      	str	r2, [r3, #16]

  //AHB Peripheral CLK Enable
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SRAM  | RCC_AHBPeriph_FLITF , ENABLE);
 80001be:	2101      	movs	r1, #1
 80001c0:	2014      	movs	r0, #20
 80001c2:	f000 fd51 	bl	8000c68 <RCC_AHBPeriphClockCmd>
  

  //APB2 Peripheral CLK Enable
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA  |
 80001c6:	2101      	movs	r1, #1
 80001c8:	201d      	movs	r0, #29
 80001ca:	f000 fd6b 	bl	8000ca4 <RCC_APB2PeriphClockCmd>
                          RCC_APB2Periph_GPIOB  | RCC_APB2Periph_GPIOC,
                        ENABLE);

  //APB1 Peripheral CLK Enable
  RCC->APB1ENR = 0;
 80001ce:	4b07      	ldr	r3, [pc, #28]	; (80001ec <BSP_RCC_Periph_Clock_Init+0x58>)
 80001d0:	2200      	movs	r2, #0
 80001d2:	61da      	str	r2, [r3, #28]
  
  //RTC CLK
  RCC_LSEConfig(RCC_LSE_ON);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f000 fc4f 	bl	8000a78 <RCC_LSEConfig>
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 80001da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80001de:	f000 fc6b 	bl	8000ab8 <RCC_RTCCLKConfig>
  RCC_RTCCLKCmd(ENABLE);
 80001e2:	2001      	movs	r0, #1
 80001e4:	f000 fc7a 	bl	8000adc <RCC_RTCCLKCmd>




}
 80001e8:	bf00      	nop
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40021000 	.word	0x40021000

080001f0 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM4, TIM_IT_CC1) != RESET)
 80001f4:	2102      	movs	r1, #2
 80001f6:	4815      	ldr	r0, [pc, #84]	; (800024c <TIM4_IRQHandler+0x5c>)
 80001f8:	f000 feed 	bl	8000fd6 <TIM_GetITStatus>
 80001fc:	4603      	mov	r3, r0
 80001fe:	2b00      	cmp	r3, #0
 8000200:	d021      	beq.n	8000246 <TIM4_IRQHandler+0x56>
  {
    TIM_ClearITPendingBit(TIM4, TIM_IT_CC1);
 8000202:	2102      	movs	r1, #2
 8000204:	4811      	ldr	r0, [pc, #68]	; (800024c <TIM4_IRQHandler+0x5c>)
 8000206:	f000 ff0f 	bl	8001028 <TIM_ClearITPendingBit>

    /* Pin PC.06 toggling with frequency = 500 Hz */
    GPIO_WriteBit(GPIOB, GPIO_Pin_6, (BitAction)(1 - GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_6)));
 800020a:	2140      	movs	r1, #64	; 0x40
 800020c:	4810      	ldr	r0, [pc, #64]	; (8000250 <TIM4_IRQHandler+0x60>)
 800020e:	f000 fb69 	bl	80008e4 <GPIO_ReadOutputDataBit>
 8000212:	4603      	mov	r3, r0
 8000214:	f1c3 0301 	rsb	r3, r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	461a      	mov	r2, r3
 800021c:	2140      	movs	r1, #64	; 0x40
 800021e:	480c      	ldr	r0, [pc, #48]	; (8000250 <TIM4_IRQHandler+0x60>)
 8000220:	f000 fb79 	bl	8000916 <GPIO_WriteBit>
    capture = TIM_GetCapture1(TIM4);
 8000224:	4809      	ldr	r0, [pc, #36]	; (800024c <TIM4_IRQHandler+0x5c>)
 8000226:	f000 febe 	bl	8000fa6 <TIM_GetCapture1>
 800022a:	4603      	mov	r3, r0
 800022c:	461a      	mov	r2, r3
 800022e:	4b09      	ldr	r3, [pc, #36]	; (8000254 <TIM4_IRQHandler+0x64>)
 8000230:	801a      	strh	r2, [r3, #0]
    TIM_SetCompare1(TIM4, capture + CCR1_Val);
 8000232:	4b08      	ldr	r3, [pc, #32]	; (8000254 <TIM4_IRQHandler+0x64>)
 8000234:	881a      	ldrh	r2, [r3, #0]
 8000236:	4b08      	ldr	r3, [pc, #32]	; (8000258 <TIM4_IRQHandler+0x68>)
 8000238:	881b      	ldrh	r3, [r3, #0]
 800023a:	4413      	add	r3, r2
 800023c:	b29b      	uxth	r3, r3
 800023e:	4619      	mov	r1, r3
 8000240:	4802      	ldr	r0, [pc, #8]	; (800024c <TIM4_IRQHandler+0x5c>)
 8000242:	f000 fe6a 	bl	8000f1a <TIM_SetCompare1>
  }

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40000800 	.word	0x40000800
 8000250:	40010c00 	.word	0x40010c00
 8000254:	2000005c 	.word	0x2000005c
 8000258:	20000000 	.word	0x20000000

0800025c <BSP_PWM_INPUT_Init>:
  TIM_Cmd(TIM4, ENABLE);
}

//PA0 TIM5 CH1
void BSP_PWM_INPUT_Init(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b086      	sub	sp, #24
 8000260:	af00      	add	r7, sp, #0

  TIM_ICInitTypeDef  TIM_ICInitStructure;
  GPIO_InitTypeDef GPIO_InitStructure;
  NVIC_InitTypeDef NVIC_InitStructure;
   /* TIM5 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
 8000262:	2101      	movs	r1, #1
 8000264:	2008      	movs	r0, #8
 8000266:	f000 fd3b 	bl	8000ce0 <RCC_APB1PeriphClockCmd>


  /* GPIOA clock enable In BSP_RCC*/

  //Configure the TIM4 Ouput Channel 1 as alternate function push-pull 
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;
 800026a:	2301      	movs	r3, #1
 800026c:	813b      	strh	r3, [r7, #8]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 800026e:	2304      	movs	r3, #4
 8000270:	72fb      	strb	r3, [r7, #11]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000272:	2303      	movs	r3, #3
 8000274:	72bb      	strb	r3, [r7, #10]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4619      	mov	r1, r3
 800027c:	481b      	ldr	r0, [pc, #108]	; (80002ec <BSP_PWM_INPUT_Init+0x90>)
 800027e:	f000 fa75 	bl	800076c <GPIO_Init>

  /* Enable the TIM5 global Interrupt */
  NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
 8000282:	2332      	movs	r3, #50	; 0x32
 8000284:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000286:	2300      	movs	r3, #0
 8000288:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
 800028a:	2301      	movs	r3, #1
 800028c:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800028e:	2301      	movs	r3, #1
 8000290:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8000292:	1d3b      	adds	r3, r7, #4
 8000294:	4618      	mov	r0, r3
 8000296:	f000 f9eb 	bl	8000670 <NVIC_Init>
     The Rising edge is used as active edge,
     The TIM5 CCR2 is used to compute the frequency value 
     The TIM5 CCR1 is used to compute the duty cycle value
  ------------------------------------------------------------ */

  TIM_ICInitStructure.TIM_Channel = TIM_Channel_1;
 800029a:	2300      	movs	r3, #0
 800029c:	81bb      	strh	r3, [r7, #12]
  TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;
 800029e:	2300      	movs	r3, #0
 80002a0:	81fb      	strh	r3, [r7, #14]
  TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
 80002a2:	2301      	movs	r3, #1
 80002a4:	823b      	strh	r3, [r7, #16]
  TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80002a6:	2300      	movs	r3, #0
 80002a8:	827b      	strh	r3, [r7, #18]
  TIM_ICInitStructure.TIM_ICFilter = 0x0;
 80002aa:	2300      	movs	r3, #0
 80002ac:	82bb      	strh	r3, [r7, #20]

  TIM_PWMIConfig(TIM5, &TIM_ICInitStructure);
 80002ae:	f107 030c 	add.w	r3, r7, #12
 80002b2:	4619      	mov	r1, r3
 80002b4:	480e      	ldr	r0, [pc, #56]	; (80002f0 <BSP_PWM_INPUT_Init+0x94>)
 80002b6:	f000 fd41 	bl	8000d3c <TIM_PWMIConfig>

  /* Select the TIM5 Input Trigger: TI2FP2 */
  TIM_SelectInputTrigger(TIM5, TIM_TS_TI1FP1);
 80002ba:	2150      	movs	r1, #80	; 0x50
 80002bc:	480c      	ldr	r0, [pc, #48]	; (80002f0 <BSP_PWM_INPUT_Init+0x94>)
 80002be:	f000 fddb 	bl	8000e78 <TIM_SelectInputTrigger>

  /* Select the slave Mode: Reset Mode */
  TIM_SelectSlaveMode(TIM5, TIM_SlaveMode_Reset);
 80002c2:	2104      	movs	r1, #4
 80002c4:	480a      	ldr	r0, [pc, #40]	; (80002f0 <BSP_PWM_INPUT_Init+0x94>)
 80002c6:	f000 fdf2 	bl	8000eae <TIM_SelectSlaveMode>

  /* Enable the Master/Slave Mode */
  TIM_SelectMasterSlaveMode(TIM5, TIM_MasterSlaveMode_Enable);
 80002ca:	2180      	movs	r1, #128	; 0x80
 80002cc:	4808      	ldr	r0, [pc, #32]	; (80002f0 <BSP_PWM_INPUT_Init+0x94>)
 80002ce:	f000 fe09 	bl	8000ee4 <TIM_SelectMasterSlaveMode>

  /* TIM enable counter */
  TIM_Cmd(TIM5, ENABLE);
 80002d2:	2101      	movs	r1, #1
 80002d4:	4806      	ldr	r0, [pc, #24]	; (80002f0 <BSP_PWM_INPUT_Init+0x94>)
 80002d6:	f000 fd8d 	bl	8000df4 <TIM_Cmd>

  /* Enable the CC1 Interrupt Request */
  TIM_ITConfig(TIM5, TIM_IT_CC1, ENABLE);
 80002da:	2201      	movs	r2, #1
 80002dc:	2102      	movs	r1, #2
 80002de:	4804      	ldr	r0, [pc, #16]	; (80002f0 <BSP_PWM_INPUT_Init+0x94>)
 80002e0:	f000 fda7 	bl	8000e32 <TIM_ITConfig>


}
 80002e4:	bf00      	nop
 80002e6:	3718      	adds	r7, #24
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40010800 	.word	0x40010800
 80002f0:	40000c00 	.word	0x40000c00

080002f4 <TIM5_IRQHandler>:
  * @brief  This function handles TIM5 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM5_IRQHandler(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
 /* Clear TIM3 Capture compare interrupt pending bit */
  TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
 80002f8:	2102      	movs	r1, #2
 80002fa:	4819      	ldr	r0, [pc, #100]	; (8000360 <TIM5_IRQHandler+0x6c>)
 80002fc:	f000 fe94 	bl	8001028 <TIM_ClearITPendingBit>

  /* Get the Input Capture value */
  IC1Value = TIM_GetCapture1(TIM5);
 8000300:	4817      	ldr	r0, [pc, #92]	; (8000360 <TIM5_IRQHandler+0x6c>)
 8000302:	f000 fe50 	bl	8000fa6 <TIM_GetCapture1>
 8000306:	4603      	mov	r3, r0
 8000308:	461a      	mov	r2, r3
 800030a:	4b16      	ldr	r3, [pc, #88]	; (8000364 <TIM5_IRQHandler+0x70>)
 800030c:	801a      	strh	r2, [r3, #0]

  if (IC1Value != 0)
 800030e:	4b15      	ldr	r3, [pc, #84]	; (8000364 <TIM5_IRQHandler+0x70>)
 8000310:	881b      	ldrh	r3, [r3, #0]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d01c      	beq.n	8000350 <TIM5_IRQHandler+0x5c>
  {
    /* Duty cycle computation */
    temp = TIM_GetCapture2(TIM5);
 8000316:	4812      	ldr	r0, [pc, #72]	; (8000360 <TIM5_IRQHandler+0x6c>)
 8000318:	f000 fe51 	bl	8000fbe <TIM_GetCapture2>
 800031c:	4603      	mov	r3, r0
 800031e:	461a      	mov	r2, r3
 8000320:	4b11      	ldr	r3, [pc, #68]	; (8000368 <TIM5_IRQHandler+0x74>)
 8000322:	801a      	strh	r2, [r3, #0]
    DutyCycle = ( temp * 100) / IC1Value;
 8000324:	4b10      	ldr	r3, [pc, #64]	; (8000368 <TIM5_IRQHandler+0x74>)
 8000326:	881b      	ldrh	r3, [r3, #0]
 8000328:	461a      	mov	r2, r3
 800032a:	2364      	movs	r3, #100	; 0x64
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	4a0c      	ldr	r2, [pc, #48]	; (8000364 <TIM5_IRQHandler+0x70>)
 8000332:	8812      	ldrh	r2, [r2, #0]
 8000334:	fb93 f3f2 	sdiv	r3, r3, r2
 8000338:	b29a      	uxth	r2, r3
 800033a:	4b0c      	ldr	r3, [pc, #48]	; (800036c <TIM5_IRQHandler+0x78>)
 800033c:	801a      	strh	r2, [r3, #0]

    /* Frequency computation */
    Frequency = SystemCoreClock / IC1Value;
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <TIM5_IRQHandler+0x7c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a08      	ldr	r2, [pc, #32]	; (8000364 <TIM5_IRQHandler+0x70>)
 8000344:	8812      	ldrh	r2, [r2, #0]
 8000346:	fbb3 f3f2 	udiv	r3, r3, r2
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <TIM5_IRQHandler+0x80>)
 800034c:	6013      	str	r3, [r2, #0]
  {
    DutyCycle = 0;
    Frequency = 0;
  }

}
 800034e:	e005      	b.n	800035c <TIM5_IRQHandler+0x68>
    DutyCycle = 0;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <TIM5_IRQHandler+0x78>)
 8000352:	2200      	movs	r2, #0
 8000354:	801a      	strh	r2, [r3, #0]
    Frequency = 0;
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <TIM5_IRQHandler+0x80>)
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
}
 800035c:	bf00      	nop
 800035e:	bd80      	pop	{r7, pc}
 8000360:	40000c00 	.word	0x40000c00
 8000364:	2000005e 	.word	0x2000005e
 8000368:	20000068 	.word	0x20000068
 800036c:	20000060 	.word	0x20000060
 8000370:	20000004 	.word	0x20000004
 8000374:	20000064 	.word	0x20000064

08000378 <delay_init>:
//初始化延迟函数
//当使用OS的时候,此函数会初始化OS的时钟节拍
//SYSTICK的时钟固定为AHB时钟的1/8
//SYSCLK:系统时钟频率
void delay_init(u8 SYSCLK)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	4603      	mov	r3, r0
 8000380:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
 8000382:	f06f 0004 	mvn.w	r0, #4
 8000386:	f000 f9d5 	bl	8000734 <SysTick_CLKSourceConfig>
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	08db      	lsrs	r3, r3, #3
 800038e:	b2da      	uxtb	r2, r3
 8000390:	4b08      	ldr	r3, [pc, #32]	; (80003b4 <delay_init+0x3c>)
 8000392:	701a      	strb	r2, [r3, #0]
	fac_ms=1000/delay_ostickspersec;		//代表OS可以延时的最少单位	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; 	//开启SYSTICK    
#else
	fac_ms=(u16)fac_us*1000;				//非OS下,代表每个ms需要的systick时钟数   
 8000394:	4b07      	ldr	r3, [pc, #28]	; (80003b4 <delay_init+0x3c>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	b29b      	uxth	r3, r3
 800039a:	461a      	mov	r2, r3
 800039c:	0152      	lsls	r2, r2, #5
 800039e:	1ad2      	subs	r2, r2, r3
 80003a0:	0092      	lsls	r2, r2, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	00db      	lsls	r3, r3, #3
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	4b03      	ldr	r3, [pc, #12]	; (80003b8 <delay_init+0x40>)
 80003aa:	801a      	strh	r2, [r3, #0]
#endif
}								    
 80003ac:	bf00      	nop
 80003ae:	3708      	adds	r7, #8
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bd80      	pop	{r7, pc}
 80003b4:	2000006a 	.word	0x2000006a
 80003b8:	2000006c 	.word	0x2000006c

080003bc <sys_SWJ_REMAP_Config>:
  *     @arg SWJ_NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  *     @arg SWJ_DISABLE: Full SWJ Disabled (JTAG-DP + SW-DP)
  * @retval None
  */
void sys_SWJ_REMAP_Config(uint8_t SWJ_REMAP)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]

    switch (SWJ_REMAP)
 80003c6:	79fb      	ldrb	r3, [r7, #7]
 80003c8:	2b03      	cmp	r3, #3
 80003ca:	d81a      	bhi.n	8000402 <sys_SWJ_REMAP_Config+0x46>
 80003cc:	a201      	add	r2, pc, #4	; (adr r2, 80003d4 <sys_SWJ_REMAP_Config+0x18>)
 80003ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003d2:	bf00      	nop
 80003d4:	08000403 	.word	0x08000403
 80003d8:	080003e5 	.word	0x080003e5
 80003dc:	080003ef 	.word	0x080003ef
 80003e0:	080003f9 	.word	0x080003f9
        /* Full SWJ Enable (JTAG-DP + SW-DP) */
        break;

    case SWJ_NONJTRST:
        /* Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_NoJTRST, ENABLE);
 80003e4:	2101      	movs	r1, #1
 80003e6:	4809      	ldr	r0, [pc, #36]	; (800040c <sys_SWJ_REMAP_Config+0x50>)
 80003e8:	f000 faac 	bl	8000944 <GPIO_PinRemapConfig>
        break;
 80003ec:	e00a      	b.n	8000404 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_NOJTAG:
        /* JTAG-DP Disabled and SW-DP Enabled */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 80003ee:	2101      	movs	r1, #1
 80003f0:	4807      	ldr	r0, [pc, #28]	; (8000410 <sys_SWJ_REMAP_Config+0x54>)
 80003f2:	f000 faa7 	bl	8000944 <GPIO_PinRemapConfig>
    break;
 80003f6:	e005      	b.n	8000404 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_DISABLE:
        /* Full SWJ Disabled (JTAG-DP + SW-DP) */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
 80003f8:	2101      	movs	r1, #1
 80003fa:	4806      	ldr	r0, [pc, #24]	; (8000414 <sys_SWJ_REMAP_Config+0x58>)
 80003fc:	f000 faa2 	bl	8000944 <GPIO_PinRemapConfig>
    break;
 8000400:	e000      	b.n	8000404 <sys_SWJ_REMAP_Config+0x48>

    default:
        break;
 8000402:	bf00      	nop
    }

}
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	00300100 	.word	0x00300100
 8000410:	00300200 	.word	0x00300200
 8000414:	00300400 	.word	0x00300400

08000418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800041c:	4b15      	ldr	r3, [pc, #84]	; (8000474 <SystemInit+0x5c>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a14      	ldr	r2, [pc, #80]	; (8000474 <SystemInit+0x5c>)
 8000422:	f043 0301 	orr.w	r3, r3, #1
 8000426:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000428:	4b12      	ldr	r3, [pc, #72]	; (8000474 <SystemInit+0x5c>)
 800042a:	685a      	ldr	r2, [r3, #4]
 800042c:	4911      	ldr	r1, [pc, #68]	; (8000474 <SystemInit+0x5c>)
 800042e:	4b12      	ldr	r3, [pc, #72]	; (8000478 <SystemInit+0x60>)
 8000430:	4013      	ands	r3, r2
 8000432:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000434:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <SystemInit+0x5c>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	4a0e      	ldr	r2, [pc, #56]	; (8000474 <SystemInit+0x5c>)
 800043a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800043e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000442:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <SystemInit+0x5c>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <SystemInit+0x5c>)
 800044a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800044e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <SystemInit+0x5c>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <SystemInit+0x5c>)
 8000456:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800045a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <SystemInit+0x5c>)
 800045e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000462:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000464:	f000 f87e 	bl	8000564 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000468:	4b04      	ldr	r3, [pc, #16]	; (800047c <SystemInit+0x64>)
 800046a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800046e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000470:	bf00      	nop
 8000472:	bd80      	pop	{r7, pc}
 8000474:	40021000 	.word	0x40021000
 8000478:	f8ff0000 	.word	0xf8ff0000
 800047c:	e000ed00 	.word	0xe000ed00

08000480 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000486:	2300      	movs	r3, #0
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
 800048e:	2300      	movs	r3, #0
 8000490:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000492:	4b2f      	ldr	r3, [pc, #188]	; (8000550 <SystemCoreClockUpdate+0xd0>)
 8000494:	685b      	ldr	r3, [r3, #4]
 8000496:	f003 030c 	and.w	r3, r3, #12
 800049a:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	2b08      	cmp	r3, #8
 80004a0:	d011      	beq.n	80004c6 <SystemCoreClockUpdate+0x46>
 80004a2:	68fb      	ldr	r3, [r7, #12]
 80004a4:	2b08      	cmp	r3, #8
 80004a6:	d83a      	bhi.n	800051e <SystemCoreClockUpdate+0x9e>
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d003      	beq.n	80004b6 <SystemCoreClockUpdate+0x36>
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	2b04      	cmp	r3, #4
 80004b2:	d004      	beq.n	80004be <SystemCoreClockUpdate+0x3e>
 80004b4:	e033      	b.n	800051e <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80004b6:	4b27      	ldr	r3, [pc, #156]	; (8000554 <SystemCoreClockUpdate+0xd4>)
 80004b8:	4a27      	ldr	r2, [pc, #156]	; (8000558 <SystemCoreClockUpdate+0xd8>)
 80004ba:	601a      	str	r2, [r3, #0]
      break;
 80004bc:	e033      	b.n	8000526 <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80004be:	4b25      	ldr	r3, [pc, #148]	; (8000554 <SystemCoreClockUpdate+0xd4>)
 80004c0:	4a25      	ldr	r2, [pc, #148]	; (8000558 <SystemCoreClockUpdate+0xd8>)
 80004c2:	601a      	str	r2, [r3, #0]
      break;
 80004c4:	e02f      	b.n	8000526 <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80004c6:	4b22      	ldr	r3, [pc, #136]	; (8000550 <SystemCoreClockUpdate+0xd0>)
 80004c8:	685b      	ldr	r3, [r3, #4]
 80004ca:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80004ce:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <SystemCoreClockUpdate+0xd0>)
 80004d2:	685b      	ldr	r3, [r3, #4]
 80004d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80004d8:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	0c9b      	lsrs	r3, r3, #18
 80004de:	3302      	adds	r3, #2
 80004e0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d106      	bne.n	80004f6 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	4a1c      	ldr	r2, [pc, #112]	; (800055c <SystemCoreClockUpdate+0xdc>)
 80004ec:	fb02 f303 	mul.w	r3, r2, r3
 80004f0:	4a18      	ldr	r2, [pc, #96]	; (8000554 <SystemCoreClockUpdate+0xd4>)
 80004f2:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80004f4:	e017      	b.n	8000526 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 80004f6:	4b16      	ldr	r3, [pc, #88]	; (8000550 <SystemCoreClockUpdate+0xd0>)
 80004f8:	685b      	ldr	r3, [r3, #4]
 80004fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d006      	beq.n	8000510 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	4a15      	ldr	r2, [pc, #84]	; (800055c <SystemCoreClockUpdate+0xdc>)
 8000506:	fb02 f303 	mul.w	r3, r2, r3
 800050a:	4a12      	ldr	r2, [pc, #72]	; (8000554 <SystemCoreClockUpdate+0xd4>)
 800050c:	6013      	str	r3, [r2, #0]
      break;
 800050e:	e00a      	b.n	8000526 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	4a11      	ldr	r2, [pc, #68]	; (8000558 <SystemCoreClockUpdate+0xd8>)
 8000514:	fb02 f303 	mul.w	r3, r2, r3
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <SystemCoreClockUpdate+0xd4>)
 800051a:	6013      	str	r3, [r2, #0]
      break;
 800051c:	e003      	b.n	8000526 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 800051e:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <SystemCoreClockUpdate+0xd4>)
 8000520:	4a0d      	ldr	r2, [pc, #52]	; (8000558 <SystemCoreClockUpdate+0xd8>)
 8000522:	601a      	str	r2, [r3, #0]
      break;
 8000524:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <SystemCoreClockUpdate+0xd0>)
 8000528:	685b      	ldr	r3, [r3, #4]
 800052a:	091b      	lsrs	r3, r3, #4
 800052c:	f003 030f 	and.w	r3, r3, #15
 8000530:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <SystemCoreClockUpdate+0xe0>)
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	b2db      	uxtb	r3, r3
 8000536:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <SystemCoreClockUpdate+0xd4>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	fa22 f303 	lsr.w	r3, r2, r3
 8000542:	4a04      	ldr	r2, [pc, #16]	; (8000554 <SystemCoreClockUpdate+0xd4>)
 8000544:	6013      	str	r3, [r2, #0]
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000
 8000554:	20000004 	.word	0x20000004
 8000558:	007a1200 	.word	0x007a1200
 800055c:	003d0900 	.word	0x003d0900
 8000560:	20000008 	.word	0x20000008

08000564 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000568:	f000 f802 	bl	8000570 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	2300      	movs	r3, #0
 800057c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800057e:	4b3a      	ldr	r3, [pc, #232]	; (8000668 <SetSysClockTo72+0xf8>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a39      	ldr	r2, [pc, #228]	; (8000668 <SetSysClockTo72+0xf8>)
 8000584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000588:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800058a:	4b37      	ldr	r3, [pc, #220]	; (8000668 <SetSysClockTo72+0xf8>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000592:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d103      	bne.n	80005a8 <SetSysClockTo72+0x38>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005a6:	d1f0      	bne.n	800058a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005a8:	4b2f      	ldr	r3, [pc, #188]	; (8000668 <SetSysClockTo72+0xf8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d002      	beq.n	80005ba <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005b4:	2301      	movs	r3, #1
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	e001      	b.n	80005be <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	2b01      	cmp	r3, #1
 80005c2:	d14b      	bne.n	800065c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80005c4:	4b29      	ldr	r3, [pc, #164]	; (800066c <SetSysClockTo72+0xfc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a28      	ldr	r2, [pc, #160]	; (800066c <SetSysClockTo72+0xfc>)
 80005ca:	f043 0310 	orr.w	r3, r3, #16
 80005ce:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80005d0:	4b26      	ldr	r3, [pc, #152]	; (800066c <SetSysClockTo72+0xfc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a25      	ldr	r2, [pc, #148]	; (800066c <SetSysClockTo72+0xfc>)
 80005d6:	f023 0307 	bic.w	r3, r3, #7
 80005da:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80005dc:	4b23      	ldr	r3, [pc, #140]	; (800066c <SetSysClockTo72+0xfc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a22      	ldr	r2, [pc, #136]	; (800066c <SetSysClockTo72+0xfc>)
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <SetSysClockTo72+0xf8>)
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <SetSysClockTo72+0xf8>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80005f0:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <SetSysClockTo72+0xf8>)
 80005f2:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <SetSysClockTo72+0xf8>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <SetSysClockTo72+0xf8>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	4a1a      	ldr	r2, [pc, #104]	; (8000668 <SetSysClockTo72+0xf8>)
 80005fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000602:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <SetSysClockTo72+0xf8>)
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	4a17      	ldr	r2, [pc, #92]	; (8000668 <SetSysClockTo72+0xf8>)
 800060a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800060e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <SetSysClockTo72+0xf8>)
 8000612:	685b      	ldr	r3, [r3, #4]
 8000614:	4a14      	ldr	r2, [pc, #80]	; (8000668 <SetSysClockTo72+0xf8>)
 8000616:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800061a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <SetSysClockTo72+0xf8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a11      	ldr	r2, [pc, #68]	; (8000668 <SetSysClockTo72+0xf8>)
 8000622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000626:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000628:	bf00      	nop
 800062a:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <SetSysClockTo72+0xf8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0f9      	beq.n	800062a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <SetSysClockTo72+0xf8>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	4a0b      	ldr	r2, [pc, #44]	; (8000668 <SetSysClockTo72+0xf8>)
 800063c:	f023 0303 	bic.w	r3, r3, #3
 8000640:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <SetSysClockTo72+0xf8>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	4a08      	ldr	r2, [pc, #32]	; (8000668 <SetSysClockTo72+0xf8>)
 8000648:	f043 0302 	orr.w	r3, r3, #2
 800064c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800064e:	bf00      	nop
 8000650:	4b05      	ldr	r3, [pc, #20]	; (8000668 <SetSysClockTo72+0xf8>)
 8000652:	685b      	ldr	r3, [r3, #4]
 8000654:	f003 030c 	and.w	r3, r3, #12
 8000658:	2b08      	cmp	r3, #8
 800065a:	d1f9      	bne.n	8000650 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40021000 	.word	0x40021000
 800066c:	40022000 	.word	0x40022000

08000670 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000670:	b480      	push	{r7}
 8000672:	b087      	sub	sp, #28
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000678:	2300      	movs	r3, #0
 800067a:	617b      	str	r3, [r7, #20]
 800067c:	2300      	movs	r3, #0
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	78db      	ldrb	r3, [r3, #3]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d03a      	beq.n	8000702 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800068c:	4b27      	ldr	r3, [pc, #156]	; (800072c <NVIC_Init+0xbc>)
 800068e:	68db      	ldr	r3, [r3, #12]
 8000690:	43db      	mvns	r3, r3
 8000692:	0a1b      	lsrs	r3, r3, #8
 8000694:	f003 0307 	and.w	r3, r3, #7
 8000698:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	f1c3 0304 	rsb	r3, r3, #4
 80006a0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	fa22 f303 	lsr.w	r3, r2, r3
 80006aa:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	785b      	ldrb	r3, [r3, #1]
 80006b0:	461a      	mov	r2, r3
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	789b      	ldrb	r3, [r3, #2]
 80006be:	461a      	mov	r2, r3
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	4013      	ands	r3, r2
 80006c4:	697a      	ldr	r2, [r7, #20]
 80006c6:	4313      	orrs	r3, r2
 80006c8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	011b      	lsls	r3, r3, #4
 80006ce:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80006d0:	4a17      	ldr	r2, [pc, #92]	; (8000730 <NVIC_Init+0xc0>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	6979      	ldr	r1, [r7, #20]
 80006d8:	b2c9      	uxtb	r1, r1
 80006da:	4413      	add	r3, r2
 80006dc:	460a      	mov	r2, r1
 80006de:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006ea:	4911      	ldr	r1, [pc, #68]	; (8000730 <NVIC_Init+0xc0>)
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	7812      	ldrb	r2, [r2, #0]
 80006f0:	0952      	lsrs	r2, r2, #5
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80006f6:	2201      	movs	r2, #1
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80006fc:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000700:	e00f      	b.n	8000722 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800070a:	4909      	ldr	r1, [pc, #36]	; (8000730 <NVIC_Init+0xc0>)
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	7812      	ldrb	r2, [r2, #0]
 8000710:	0952      	lsrs	r2, r2, #5
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000716:	2201      	movs	r2, #1
 8000718:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800071a:	f100 0320 	add.w	r3, r0, #32
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000722:	bf00      	nop
 8000724:	371c      	adds	r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	e000ed00 	.word	0xe000ed00
 8000730:	e000e100 	.word	0xe000e100

08000734 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	2b04      	cmp	r3, #4
 8000740:	d106      	bne.n	8000750 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <SysTick_CLKSourceConfig+0x34>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <SysTick_CLKSourceConfig+0x34>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 800074e:	e005      	b.n	800075c <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <SysTick_CLKSourceConfig+0x34>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <SysTick_CLKSourceConfig+0x34>)
 8000756:	f023 0304 	bic.w	r3, r3, #4
 800075a:	6013      	str	r3, [r2, #0]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	e000e010 	.word	0xe000e010

0800076c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800076c:	b480      	push	{r7}
 800076e:	b089      	sub	sp, #36	; 0x24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	78db      	ldrb	r3, [r3, #3]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	78db      	ldrb	r3, [r3, #3]
 800079c:	f003 0310 	and.w	r3, r3, #16
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d005      	beq.n	80007b0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	789b      	ldrb	r3, [r3, #2]
 80007a8:	461a      	mov	r2, r3
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d044      	beq.n	8000844 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
 80007c4:	e038      	b.n	8000838 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80007c6:	2201      	movs	r2, #1
 80007c8:	69bb      	ldr	r3, [r7, #24]
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	881b      	ldrh	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	4013      	ands	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80007dc:	693a      	ldr	r2, [r7, #16]
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d126      	bne.n	8000832 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80007ea:	220f      	movs	r2, #15
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	43db      	mvns	r3, r3
 80007f8:	697a      	ldr	r2, [r7, #20]
 80007fa:	4013      	ands	r3, r2
 80007fc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80007fe:	69fa      	ldr	r2, [r7, #28]
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	fa02 f303 	lsl.w	r3, r2, r3
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	4313      	orrs	r3, r2
 800080a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	78db      	ldrb	r3, [r3, #3]
 8000810:	2b28      	cmp	r3, #40	; 0x28
 8000812:	d105      	bne.n	8000820 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000814:	2201      	movs	r2, #1
 8000816:	69bb      	ldr	r3, [r7, #24]
 8000818:	409a      	lsls	r2, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	615a      	str	r2, [r3, #20]
 800081e:	e008      	b.n	8000832 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	78db      	ldrb	r3, [r3, #3]
 8000824:	2b48      	cmp	r3, #72	; 0x48
 8000826:	d104      	bne.n	8000832 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000828:	2201      	movs	r2, #1
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	409a      	lsls	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	3301      	adds	r3, #1
 8000836:	61bb      	str	r3, [r7, #24]
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	2b07      	cmp	r3, #7
 800083c:	d9c3      	bls.n	80007c6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	697a      	ldr	r2, [r7, #20]
 8000842:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	2bff      	cmp	r3, #255	; 0xff
 800084a:	d946      	bls.n	80008da <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000852:	2300      	movs	r3, #0
 8000854:	61bb      	str	r3, [r7, #24]
 8000856:	e03a      	b.n	80008ce <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	3308      	adds	r3, #8
 800085c:	2201      	movs	r2, #1
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	881b      	ldrh	r3, [r3, #0]
 8000868:	461a      	mov	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000870:	693a      	ldr	r2, [r7, #16]
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	429a      	cmp	r2, r3
 8000876:	d127      	bne.n	80008c8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800087e:	220f      	movs	r2, #15
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	43db      	mvns	r3, r3
 800088c:	697a      	ldr	r2, [r7, #20]
 800088e:	4013      	ands	r3, r2
 8000890:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000892:	69fa      	ldr	r2, [r7, #28]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	697a      	ldr	r2, [r7, #20]
 800089c:	4313      	orrs	r3, r2
 800089e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	78db      	ldrb	r3, [r3, #3]
 80008a4:	2b28      	cmp	r3, #40	; 0x28
 80008a6:	d105      	bne.n	80008b4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80008a8:	69bb      	ldr	r3, [r7, #24]
 80008aa:	3308      	adds	r3, #8
 80008ac:	2201      	movs	r2, #1
 80008ae:	409a      	lsls	r2, r3
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	78db      	ldrb	r3, [r3, #3]
 80008b8:	2b48      	cmp	r3, #72	; 0x48
 80008ba:	d105      	bne.n	80008c8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	3308      	adds	r3, #8
 80008c0:	2201      	movs	r2, #1
 80008c2:	409a      	lsls	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	3301      	adds	r3, #1
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2b07      	cmp	r3, #7
 80008d2:	d9c1      	bls.n	8000858 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	697a      	ldr	r2, [r7, #20]
 80008d8:	605a      	str	r2, [r3, #4]
  }
}
 80008da:	bf00      	nop
 80008dc:	3724      	adds	r7, #36	; 0x24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr

080008e4 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	460b      	mov	r3, r1
 80008ee:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80008f0:	2300      	movs	r3, #0
 80008f2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	68da      	ldr	r2, [r3, #12]
 80008f8:	887b      	ldrh	r3, [r7, #2]
 80008fa:	4013      	ands	r3, r2
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d002      	beq.n	8000906 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000900:	2301      	movs	r3, #1
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e001      	b.n	800090a <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800090a:	7bfb      	ldrb	r3, [r7, #15]
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr

08000916 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
 800091e:	460b      	mov	r3, r1
 8000920:	807b      	strh	r3, [r7, #2]
 8000922:	4613      	mov	r3, r2
 8000924:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8000926:	787b      	ldrb	r3, [r7, #1]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800092c:	887a      	ldrh	r2, [r7, #2]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000932:	e002      	b.n	800093a <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8000934:	887a      	ldrh	r2, [r7, #2]
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	615a      	str	r2, [r3, #20]
}
 800093a:	bf00      	nop
 800093c:	370c      	adds	r7, #12
 800093e:	46bd      	mov	sp, r7
 8000940:	bc80      	pop	{r7}
 8000942:	4770      	bx	lr

08000944 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8000944:	b480      	push	{r7}
 8000946:	b087      	sub	sp, #28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
 800094c:	460b      	mov	r3, r1
 800094e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	2300      	movs	r3, #0
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b00      	cmp	r3, #0
 8000964:	da03      	bge.n	800096e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <GPIO_PinRemapConfig+0xdc>)
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	617b      	str	r3, [r7, #20]
 800096c:	e002      	b.n	8000974 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800096e:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <GPIO_PinRemapConfig+0xdc>)
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	0c1b      	lsrs	r3, r3, #16
 8000978:	f003 030f 	and.w	r3, r3, #15
 800097c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	b29b      	uxth	r3, r3
 8000982:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800098a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800098e:	d10a      	bne.n	80009a6 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000996:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8000998:	4b21      	ldr	r3, [pc, #132]	; (8000a20 <GPIO_PinRemapConfig+0xdc>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	4a20      	ldr	r2, [pc, #128]	; (8000a20 <GPIO_PinRemapConfig+0xdc>)
 800099e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80009a2:	6053      	str	r3, [r2, #4]
 80009a4:	e021      	b.n	80009ea <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d00e      	beq.n	80009ce <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80009b0:	2203      	movs	r2, #3
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	43db      	mvns	r3, r3
 80009be:	697a      	ldr	r2, [r7, #20]
 80009c0:	4013      	ands	r3, r2
 80009c2:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	e00d      	b.n	80009ea <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	0d5b      	lsrs	r3, r3, #21
 80009d2:	011b      	lsls	r3, r3, #4
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	697a      	ldr	r2, [r7, #20]
 80009de:	4013      	ands	r3, r2
 80009e0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80009e8:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80009ea:	78fb      	ldrb	r3, [r7, #3]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d008      	beq.n	8000a02 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	0d5b      	lsrs	r3, r3, #21
 80009f4:	011b      	lsls	r3, r3, #4
 80009f6:	693a      	ldr	r2, [r7, #16]
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	4313      	orrs	r3, r2
 8000a00:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	da03      	bge.n	8000a10 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <GPIO_PinRemapConfig+0xdc>)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8000a0e:	e002      	b.n	8000a16 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8000a10:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <GPIO_PinRemapConfig+0xdc>)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	6053      	str	r3, [r2, #4]
}
 8000a16:	bf00      	nop
 8000a18:	371c      	adds	r7, #28
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40010000 	.word	0x40010000

08000a24 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 8000a2c:	4a03      	ldr	r2, [pc, #12]	; (8000a3c <RCC_USBCLKConfig+0x18>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6013      	str	r3, [r2, #0]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	424200d8 	.word	0x424200d8

08000a40 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <RCC_ADCCLKConfig+0x34>)
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a58:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000a62:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <RCC_ADCCLKConfig+0x34>)
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	6053      	str	r3, [r2, #4]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000

08000a78 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <RCC_LSEConfig+0x3c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a88:	4b0a      	ldr	r3, [pc, #40]	; (8000ab4 <RCC_LSEConfig+0x3c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d002      	beq.n	8000a9a <RCC_LSEConfig+0x22>
 8000a94:	2b04      	cmp	r3, #4
 8000a96:	d004      	beq.n	8000aa2 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8000a98:	e007      	b.n	8000aaa <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <RCC_LSEConfig+0x3c>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	701a      	strb	r2, [r3, #0]
      break;
 8000aa0:	e003      	b.n	8000aaa <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000aa2:	4b04      	ldr	r3, [pc, #16]	; (8000ab4 <RCC_LSEConfig+0x3c>)
 8000aa4:	2205      	movs	r2, #5
 8000aa6:	701a      	strb	r2, [r3, #0]
      break;            
 8000aa8:	bf00      	nop
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr
 8000ab4:	40021020 	.word	0x40021020

08000ab8 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <RCC_RTCCLKConfig+0x20>)
 8000ac2:	6a1a      	ldr	r2, [r3, #32]
 8000ac4:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <RCC_RTCCLKConfig+0x20>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	620b      	str	r3, [r1, #32]
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40021000 	.word	0x40021000

08000adc <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000ae6:	4a04      	ldr	r2, [pc, #16]	; (8000af8 <RCC_RTCCLKCmd+0x1c>)
 8000ae8:	79fb      	ldrb	r3, [r7, #7]
 8000aea:	6013      	str	r3, [r2, #0]
}
 8000aec:	bf00      	nop
 8000aee:	370c      	adds	r7, #12
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	4242043c 	.word	0x4242043c

08000afc <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b087      	sub	sp, #28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000b14:	4b4f      	ldr	r3, [pc, #316]	; (8000c54 <RCC_GetClocksFreq+0x158>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f003 030c 	and.w	r3, r3, #12
 8000b1c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	2b08      	cmp	r3, #8
 8000b22:	d011      	beq.n	8000b48 <RCC_GetClocksFreq+0x4c>
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	2b08      	cmp	r3, #8
 8000b28:	d83a      	bhi.n	8000ba0 <RCC_GetClocksFreq+0xa4>
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <RCC_GetClocksFreq+0x3c>
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	d004      	beq.n	8000b40 <RCC_GetClocksFreq+0x44>
 8000b36:	e033      	b.n	8000ba0 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	4a47      	ldr	r2, [pc, #284]	; (8000c58 <RCC_GetClocksFreq+0x15c>)
 8000b3c:	601a      	str	r2, [r3, #0]
      break;
 8000b3e:	e033      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	4a45      	ldr	r2, [pc, #276]	; (8000c58 <RCC_GetClocksFreq+0x15c>)
 8000b44:	601a      	str	r2, [r3, #0]
      break;
 8000b46:	e02f      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000b48:	4b42      	ldr	r3, [pc, #264]	; (8000c54 <RCC_GetClocksFreq+0x158>)
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000b50:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000b52:	4b40      	ldr	r3, [pc, #256]	; (8000c54 <RCC_GetClocksFreq+0x158>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b5a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	0c9b      	lsrs	r3, r3, #18
 8000b60:	3302      	adds	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d106      	bne.n	8000b78 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	4a3b      	ldr	r2, [pc, #236]	; (8000c5c <RCC_GetClocksFreq+0x160>)
 8000b6e:	fb03 f202 	mul.w	r2, r3, r2
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000b76:	e017      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000b78:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <RCC_GetClocksFreq+0x158>)
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	4a35      	ldr	r2, [pc, #212]	; (8000c5c <RCC_GetClocksFreq+0x160>)
 8000b88:	fb03 f202 	mul.w	r2, r3, r2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	601a      	str	r2, [r3, #0]
      break;
 8000b90:	e00a      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000b92:	693b      	ldr	r3, [r7, #16]
 8000b94:	4a30      	ldr	r2, [pc, #192]	; (8000c58 <RCC_GetClocksFreq+0x15c>)
 8000b96:	fb03 f202 	mul.w	r2, r3, r2
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	601a      	str	r2, [r3, #0]
      break;
 8000b9e:	e003      	b.n	8000ba8 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a2d      	ldr	r2, [pc, #180]	; (8000c58 <RCC_GetClocksFreq+0x15c>)
 8000ba4:	601a      	str	r2, [r3, #0]
      break;
 8000ba6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	; (8000c54 <RCC_GetClocksFreq+0x158>)
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000bb0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	091b      	lsrs	r3, r3, #4
 8000bb6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000bb8:	4a29      	ldr	r2, [pc, #164]	; (8000c60 <RCC_GetClocksFreq+0x164>)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	40da      	lsrs	r2, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <RCC_GetClocksFreq+0x158>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bd8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000be0:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <RCC_GetClocksFreq+0x164>)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	4413      	add	r3, r2
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685a      	ldr	r2, [r3, #4]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	40da      	lsrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000bf8:	4b16      	ldr	r3, [pc, #88]	; (8000c54 <RCC_GetClocksFreq+0x158>)
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c00:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	0adb      	lsrs	r3, r3, #11
 8000c06:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000c08:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <RCC_GetClocksFreq+0x164>)
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685a      	ldr	r2, [r3, #4]
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	40da      	lsrs	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000c20:	4b0c      	ldr	r3, [pc, #48]	; (8000c54 <RCC_GetClocksFreq+0x158>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c28:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	0b9b      	lsrs	r3, r3, #14
 8000c2e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000c30:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <RCC_GetClocksFreq+0x168>)
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	4413      	add	r3, r2
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	fbb2 f2f3 	udiv	r2, r2, r3
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	611a      	str	r2, [r3, #16]
}
 8000c4a:	bf00      	nop
 8000c4c:	371c      	adds	r7, #28
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	007a1200 	.word	0x007a1200
 8000c5c:	003d0900 	.word	0x003d0900
 8000c60:	20000018 	.word	0x20000018
 8000c64:	20000028 	.word	0x20000028

08000c68 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c74:	78fb      	ldrb	r3, [r7, #3]
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d006      	beq.n	8000c88 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <RCC_AHBPeriphClockCmd+0x38>)
 8000c7c:	695a      	ldr	r2, [r3, #20]
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <RCC_AHBPeriphClockCmd+0x38>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000c86:	e006      	b.n	8000c96 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c88:	4b05      	ldr	r3, [pc, #20]	; (8000ca0 <RCC_AHBPeriphClockCmd+0x38>)
 8000c8a:	695a      	ldr	r2, [r3, #20]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	43db      	mvns	r3, r3
 8000c90:	4903      	ldr	r1, [pc, #12]	; (8000ca0 <RCC_AHBPeriphClockCmd+0x38>)
 8000c92:	4013      	ands	r3, r2
 8000c94:	614b      	str	r3, [r1, #20]
}
 8000c96:	bf00      	nop
 8000c98:	370c      	adds	r7, #12
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	460b      	mov	r3, r1
 8000cae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cb0:	78fb      	ldrb	r3, [r7, #3]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d006      	beq.n	8000cc4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <RCC_APB2PeriphClockCmd+0x38>)
 8000cb8:	699a      	ldr	r2, [r3, #24]
 8000cba:	4908      	ldr	r1, [pc, #32]	; (8000cdc <RCC_APB2PeriphClockCmd+0x38>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000cc2:	e006      	b.n	8000cd2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000cc4:	4b05      	ldr	r3, [pc, #20]	; (8000cdc <RCC_APB2PeriphClockCmd+0x38>)
 8000cc6:	699a      	ldr	r2, [r3, #24]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	4903      	ldr	r1, [pc, #12]	; (8000cdc <RCC_APB2PeriphClockCmd+0x38>)
 8000cce:	4013      	ands	r3, r2
 8000cd0:	618b      	str	r3, [r1, #24]
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cec:	78fb      	ldrb	r3, [r7, #3]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d006      	beq.n	8000d00 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <RCC_APB1PeriphClockCmd+0x38>)
 8000cf4:	69da      	ldr	r2, [r3, #28]
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <RCC_APB1PeriphClockCmd+0x38>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000cfe:	e006      	b.n	8000d0e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <RCC_APB1PeriphClockCmd+0x38>)
 8000d02:	69da      	ldr	r2, [r3, #28]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	43db      	mvns	r3, r3
 8000d08:	4903      	ldr	r1, [pc, #12]	; (8000d18 <RCC_APB1PeriphClockCmd+0x38>)
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	61cb      	str	r3, [r1, #28]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bc80      	pop	{r7}
 8000d16:	4770      	bx	lr
 8000d18:	40021000 	.word	0x40021000

08000d1c <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8000d26:	4a04      	ldr	r2, [pc, #16]	; (8000d38 <RCC_MCOConfig+0x1c>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	7013      	strb	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	40021007 	.word	0x40021007

08000d3c <TIM_PWMIConfig>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
 8000d44:	6039      	str	r1, [r7, #0]
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
 8000d46:	2300      	movs	r3, #0
 8000d48:	81fb      	strh	r3, [r7, #14]
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	81bb      	strh	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	885b      	ldrh	r3, [r3, #2]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d102      	bne.n	8000d5c <TIM_PWMIConfig+0x20>
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 8000d56:	2302      	movs	r3, #2
 8000d58:	81fb      	strh	r3, [r7, #14]
 8000d5a:	e001      	b.n	8000d60 <TIM_PWMIConfig+0x24>
  }
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	81fb      	strh	r3, [r7, #14]
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	889b      	ldrh	r3, [r3, #4]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d102      	bne.n	8000d6e <TIM_PWMIConfig+0x32>
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	81bb      	strh	r3, [r7, #12]
 8000d6c:	e001      	b.n	8000d72 <TIM_PWMIConfig+0x36>
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	81bb      	strh	r3, [r7, #12]
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d11c      	bne.n	8000db4 <TIM_PWMIConfig+0x78>
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	8859      	ldrh	r1, [r3, #2]
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	889a      	ldrh	r2, [r3, #4]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	891b      	ldrh	r3, [r3, #8]
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f95e 	bl	8001048 <TI1_Config>
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	88db      	ldrh	r3, [r3, #6]
 8000d90:	4619      	mov	r1, r3
 8000d92:	6878      	ldr	r0, [r7, #4]
 8000d94:	f000 f8cf 	bl	8000f36 <TIM_SetIC1Prescaler>
    /* TI2 Configuration */
    TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	891b      	ldrh	r3, [r3, #8]
 8000d9c:	89ba      	ldrh	r2, [r7, #12]
 8000d9e:	89f9      	ldrh	r1, [r7, #14]
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 f9c1 	bl	8001128 <TI2_Config>
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	88db      	ldrh	r3, [r3, #6]
 8000daa:	4619      	mov	r1, r3
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f8dd 	bl	8000f6c <TIM_SetIC2Prescaler>
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000db2:	e01b      	b.n	8000dec <TIM_PWMIConfig+0xb0>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	8859      	ldrh	r1, [r3, #2]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	889a      	ldrh	r2, [r3, #4]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	891b      	ldrh	r3, [r3, #8]
 8000dc0:	6878      	ldr	r0, [r7, #4]
 8000dc2:	f000 f9b1 	bl	8001128 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	88db      	ldrh	r3, [r3, #6]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f000 f8cd 	bl	8000f6c <TIM_SetIC2Prescaler>
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	891b      	ldrh	r3, [r3, #8]
 8000dd6:	89ba      	ldrh	r2, [r7, #12]
 8000dd8:	89f9      	ldrh	r1, [r7, #14]
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 f934 	bl	8001048 <TI1_Config>
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	88db      	ldrh	r3, [r3, #6]
 8000de4:	4619      	mov	r1, r3
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f000 f8a5 	bl	8000f36 <TIM_SetIC1Prescaler>
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e00:	78fb      	ldrb	r3, [r7, #3]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d008      	beq.n	8000e18 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	881b      	ldrh	r3, [r3, #0]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000e16:	e007      	b.n	8000e28 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	f023 0301 	bic.w	r3, r3, #1
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	801a      	strh	r2, [r3, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr

08000e32 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000e32:	b480      	push	{r7}
 8000e34:	b083      	sub	sp, #12
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
 8000e3a:	460b      	mov	r3, r1
 8000e3c:	807b      	strh	r3, [r7, #2]
 8000e3e:	4613      	mov	r3, r2
 8000e40:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e42:	787b      	ldrb	r3, [r7, #1]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d008      	beq.n	8000e5a <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	899b      	ldrh	r3, [r3, #12]
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	887b      	ldrh	r3, [r7, #2]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	b29a      	uxth	r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000e58:	e009      	b.n	8000e6e <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	899b      	ldrh	r3, [r3, #12]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4013      	ands	r3, r2
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	819a      	strh	r2, [r3, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <TIM_SelectInputTrigger>:
  *     @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *     @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
void TIM_SelectInputTrigger(TIM_TypeDef* TIMx, uint16_t TIM_InputTriggerSource)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpsmcr = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	891b      	ldrh	r3, [r3, #8]
 8000e8c:	81fb      	strh	r3, [r7, #14]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8000e8e:	89fb      	ldrh	r3, [r7, #14]
 8000e90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e94:	81fb      	strh	r3, [r7, #14]
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8000e96:	89fa      	ldrh	r2, [r7, #14]
 8000e98:	887b      	ldrh	r3, [r7, #2]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	89fa      	ldrh	r2, [r7, #14]
 8000ea2:	811a      	strh	r2, [r3, #8]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bc80      	pop	{r7}
 8000eac:	4770      	bx	lr

08000eae <TIM_SelectSlaveMode>:
  *     @arg TIM_SlaveMode_Trigger:   The counter starts at a rising edge of the trigger TRGI.
  *     @arg TIM_SlaveMode_External1: Rising edges of the selected trigger (TRGI) clock the counter.
  * @retval None
  */
void TIM_SelectSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_SlaveMode)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
 /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	891b      	ldrh	r3, [r3, #8]
 8000ebe:	b29b      	uxth	r3, r3
 8000ec0:	f023 0307 	bic.w	r3, r3, #7
 8000ec4:	b29a      	uxth	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	811a      	strh	r2, [r3, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	891b      	ldrh	r3, [r3, #8]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	887b      	ldrh	r3, [r7, #2]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	811a      	strh	r2, [r3, #8]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr

08000ee4 <TIM_SelectMasterSlaveMode>:
  *                                      and its slaves (through TRGO).
  *     @arg TIM_MasterSlaveMode_Disable: No action
  * @retval None
  */
void TIM_SelectMasterSlaveMode(TIM_TypeDef* TIMx, uint16_t TIM_MasterSlaveMode)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	891b      	ldrh	r3, [r3, #8]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	811a      	strh	r2, [r3, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	891b      	ldrh	r3, [r3, #8]
 8000f04:	b29a      	uxth	r2, r3
 8000f06:	887b      	ldrh	r3, [r7, #2]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	811a      	strh	r2, [r3, #8]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	460b      	mov	r3, r1
 8000f24:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	887a      	ldrh	r2, [r7, #2]
 8000f2a:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bc80      	pop	{r7}
 8000f34:	4770      	bx	lr

08000f36 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000f36:	b480      	push	{r7}
 8000f38:	b083      	sub	sp, #12
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
 8000f3e:	460b      	mov	r3, r1
 8000f40:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	8b1b      	ldrh	r3, [r3, #24]
 8000f46:	b29b      	uxth	r3, r3
 8000f48:	f023 030c 	bic.w	r3, r3, #12
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	8b1b      	ldrh	r3, [r3, #24]
 8000f56:	b29a      	uxth	r2, r3
 8000f58:	887b      	ldrh	r3, [r7, #2]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	831a      	strh	r2, [r3, #24]
}
 8000f62:	bf00      	nop
 8000f64:	370c      	adds	r7, #12
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bc80      	pop	{r7}
 8000f6a:	4770      	bx	lr

08000f6c <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	8b1b      	ldrh	r3, [r3, #24]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	8b1b      	ldrh	r3, [r3, #24]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	887b      	ldrh	r3, [r7, #2]
 8000f90:	021b      	lsls	r3, r3, #8
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4313      	orrs	r3, r2
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	831a      	strh	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bc80      	pop	{r7}
 8000fa4:	4770      	bx	lr

08000fa6 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000fb2:	b29b      	uxth	r3, r3
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bc80      	pop	{r7}
 8000fbc:	4770      	bx	lr

08000fbe <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000fca:	b29b      	uxth	r3, r3
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b085      	sub	sp, #20
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	81bb      	strh	r3, [r7, #12]
 8000fea:	2300      	movs	r3, #0
 8000fec:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	8a1b      	ldrh	r3, [r3, #16]
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	887b      	ldrh	r3, [r7, #2]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	899b      	ldrh	r3, [r3, #12]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	887b      	ldrh	r3, [r7, #2]
 8001002:	4013      	ands	r3, r2
 8001004:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001006:	89bb      	ldrh	r3, [r7, #12]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d005      	beq.n	8001018 <TIM_GetITStatus+0x42>
 800100c:	897b      	ldrh	r3, [r7, #10]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d002      	beq.n	8001018 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
 8001016:	e001      	b.n	800101c <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800101c:	7bfb      	ldrb	r3, [r7, #15]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	43db      	mvns	r3, r3
 8001038:	b29a      	uxth	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	821a      	strh	r2, [r3, #16]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	4608      	mov	r0, r1
 8001052:	4611      	mov	r1, r2
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	817b      	strh	r3, [r7, #10]
 800105a:	460b      	mov	r3, r1
 800105c:	813b      	strh	r3, [r7, #8]
 800105e:	4613      	mov	r3, r2
 8001060:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	82bb      	strh	r3, [r7, #20]
 8001066:	2300      	movs	r3, #0
 8001068:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	8c1b      	ldrh	r3, [r3, #32]
 800106e:	b29b      	uxth	r3, r3
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	b29a      	uxth	r2, r3
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	8b1b      	ldrh	r3, [r3, #24]
 800107e:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	8c1b      	ldrh	r3, [r3, #32]
 8001084:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001086:	8abb      	ldrh	r3, [r7, #20]
 8001088:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800108c:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	011b      	lsls	r3, r3, #4
 8001092:	b29a      	uxth	r2, r3
 8001094:	893b      	ldrh	r3, [r7, #8]
 8001096:	4313      	orrs	r3, r2
 8001098:	b29a      	uxth	r2, r3
 800109a:	8abb      	ldrh	r3, [r7, #20]
 800109c:	4313      	orrs	r3, r2
 800109e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	4a1c      	ldr	r2, [pc, #112]	; (8001114 <TI1_Config+0xcc>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d013      	beq.n	80010d0 <TI1_Config+0x88>
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4a1b      	ldr	r2, [pc, #108]	; (8001118 <TI1_Config+0xd0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d00f      	beq.n	80010d0 <TI1_Config+0x88>
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b6:	d00b      	beq.n	80010d0 <TI1_Config+0x88>
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4a18      	ldr	r2, [pc, #96]	; (800111c <TI1_Config+0xd4>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d007      	beq.n	80010d0 <TI1_Config+0x88>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <TI1_Config+0xd8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d003      	beq.n	80010d0 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <TI1_Config+0xdc>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d10b      	bne.n	80010e8 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 80010d0:	8afb      	ldrh	r3, [r7, #22]
 80010d2:	f023 0302 	bic.w	r3, r3, #2
 80010d6:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80010d8:	897a      	ldrh	r2, [r7, #10]
 80010da:	8afb      	ldrh	r3, [r7, #22]
 80010dc:	4313      	orrs	r3, r2
 80010de:	b29b      	uxth	r3, r3
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	82fb      	strh	r3, [r7, #22]
 80010e6:	e00a      	b.n	80010fe <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80010e8:	8afb      	ldrh	r3, [r7, #22]
 80010ea:	f023 030a 	bic.w	r3, r3, #10
 80010ee:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80010f0:	897a      	ldrh	r2, [r7, #10]
 80010f2:	8afb      	ldrh	r3, [r7, #22]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	8aba      	ldrh	r2, [r7, #20]
 8001102:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	8afa      	ldrh	r2, [r7, #22]
 8001108:	841a      	strh	r2, [r3, #32]
}
 800110a:	bf00      	nop
 800110c:	371c      	adds	r7, #28
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr
 8001114:	40012c00 	.word	0x40012c00
 8001118:	40013400 	.word	0x40013400
 800111c:	40000400 	.word	0x40000400
 8001120:	40000800 	.word	0x40000800
 8001124:	40000c00 	.word	0x40000c00

08001128 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001128:	b480      	push	{r7}
 800112a:	b087      	sub	sp, #28
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4603      	mov	r3, r0
 8001138:	817b      	strh	r3, [r7, #10]
 800113a:	460b      	mov	r3, r1
 800113c:	813b      	strh	r3, [r7, #8]
 800113e:	4613      	mov	r3, r2
 8001140:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	82bb      	strh	r3, [r7, #20]
 8001146:	2300      	movs	r3, #0
 8001148:	82fb      	strh	r3, [r7, #22]
 800114a:	2300      	movs	r3, #0
 800114c:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	8c1b      	ldrh	r3, [r3, #32]
 8001152:	b29b      	uxth	r3, r3
 8001154:	f023 0310 	bic.w	r3, r3, #16
 8001158:	b29a      	uxth	r2, r3
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	8b1b      	ldrh	r3, [r3, #24]
 8001162:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	8c1b      	ldrh	r3, [r3, #32]
 8001168:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 800116a:	897b      	ldrh	r3, [r7, #10]
 800116c:	011b      	lsls	r3, r3, #4
 800116e:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001170:	8abb      	ldrh	r3, [r7, #20]
 8001172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001176:	051b      	lsls	r3, r3, #20
 8001178:	0d1b      	lsrs	r3, r3, #20
 800117a:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	031b      	lsls	r3, r3, #12
 8001180:	b29a      	uxth	r2, r3
 8001182:	8abb      	ldrh	r3, [r7, #20]
 8001184:	4313      	orrs	r3, r2
 8001186:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001188:	893b      	ldrh	r3, [r7, #8]
 800118a:	021b      	lsls	r3, r3, #8
 800118c:	b29a      	uxth	r2, r3
 800118e:	8abb      	ldrh	r3, [r7, #20]
 8001190:	4313      	orrs	r3, r2
 8001192:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4a1c      	ldr	r2, [pc, #112]	; (8001208 <TI2_Config+0xe0>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d013      	beq.n	80011c4 <TI2_Config+0x9c>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4a1b      	ldr	r2, [pc, #108]	; (800120c <TI2_Config+0xe4>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d00f      	beq.n	80011c4 <TI2_Config+0x9c>
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011aa:	d00b      	beq.n	80011c4 <TI2_Config+0x9c>
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4a18      	ldr	r2, [pc, #96]	; (8001210 <TI2_Config+0xe8>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d007      	beq.n	80011c4 <TI2_Config+0x9c>
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <TI2_Config+0xec>)
 80011b8:	4293      	cmp	r3, r2
 80011ba:	d003      	beq.n	80011c4 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4a16      	ldr	r2, [pc, #88]	; (8001218 <TI2_Config+0xf0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d10b      	bne.n	80011dc <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 80011c4:	8afb      	ldrh	r3, [r7, #22]
 80011c6:	f023 0320 	bic.w	r3, r3, #32
 80011ca:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80011cc:	8a7a      	ldrh	r2, [r7, #18]
 80011ce:	8afb      	ldrh	r3, [r7, #22]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	f043 0310 	orr.w	r3, r3, #16
 80011d8:	82fb      	strh	r3, [r7, #22]
 80011da:	e00a      	b.n	80011f2 <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80011dc:	8afb      	ldrh	r3, [r7, #22]
 80011de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80011e2:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 80011e4:	897a      	ldrh	r2, [r7, #10]
 80011e6:	8afb      	ldrh	r3, [r7, #22]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	f043 0310 	orr.w	r3, r3, #16
 80011f0:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8aba      	ldrh	r2, [r7, #20]
 80011f6:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	8afa      	ldrh	r2, [r7, #22]
 80011fc:	841a      	strh	r2, [r3, #32]
}
 80011fe:	bf00      	nop
 8001200:	371c      	adds	r7, #28
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	40012c00 	.word	0x40012c00
 800120c:	40013400 	.word	0x40013400
 8001210:	40000400 	.word	0x40000400
 8001214:	40000800 	.word	0x40000800
 8001218:	40000c00 	.word	0x40000c00

0800121c <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  // SYS CLK Init 
  BSP_RCC_Init();
 8001220:	f7fe ffa6 	bl	8000170 <BSP_RCC_Init>

  /** Config SWJ Reamp 
    *   If using the PA15、PA14、PA13、PB4、PB3 for Remapping Pin, these Clock Must be Config before SWJ REMAP config Function!
    */
  sys_SWJ_REMAP_Config(SWJ_ENABLE);
 8001224:	2000      	movs	r0, #0
 8001226:	f7ff f8c9 	bl	80003bc <sys_SWJ_REMAP_Config>

  BSP_PWM_INPUT_Init();
 800122a:	f7ff f817 	bl	800025c <BSP_PWM_INPUT_Init>


  while (1)
 800122e:	e7fe      	b.n	800122e <main+0x12>

08001230 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001240:	e7fe      	b.n	8001240 <HardFault_Handler+0x4>

08001242 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001246:	e7fe      	b.n	8001246 <MemManage_Handler+0x4>

08001248 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800124c:	e7fe      	b.n	800124c <BusFault_Handler+0x4>

0800124e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001252:	e7fe      	b.n	8001252 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	bc80      	pop	{r7}
 8001276:	4770      	bx	lr

08001278 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr

08001284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001284:	480d      	ldr	r0, [pc, #52]	; (80012bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001288:	f7ff f8c6 	bl	8000418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800128c:	480c      	ldr	r0, [pc, #48]	; (80012c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800128e:	490d      	ldr	r1, [pc, #52]	; (80012c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001290:	4a0d      	ldr	r2, [pc, #52]	; (80012c8 <LoopForever+0xe>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012a4:	4c0a      	ldr	r4, [pc, #40]	; (80012d0 <LoopForever+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012b2:	f000 f811 	bl	80012d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7ff ffb1 	bl	800121c <main>

080012ba <LoopForever>:

LoopForever:
  b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   r0, =_estack
 80012bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80012c8:	08001340 	.word	0x08001340
  ldr r2, =_sbss
 80012cc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80012d0:	20000070 	.word	0x20000070

080012d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_2_IRQHandler>
	...

080012d8 <__libc_init_array>:
 80012d8:	b570      	push	{r4, r5, r6, lr}
 80012da:	2600      	movs	r6, #0
 80012dc:	4d0c      	ldr	r5, [pc, #48]	; (8001310 <__libc_init_array+0x38>)
 80012de:	4c0d      	ldr	r4, [pc, #52]	; (8001314 <__libc_init_array+0x3c>)
 80012e0:	1b64      	subs	r4, r4, r5
 80012e2:	10a4      	asrs	r4, r4, #2
 80012e4:	42a6      	cmp	r6, r4
 80012e6:	d109      	bne.n	80012fc <__libc_init_array+0x24>
 80012e8:	f000 f81a 	bl	8001320 <_init>
 80012ec:	2600      	movs	r6, #0
 80012ee:	4d0a      	ldr	r5, [pc, #40]	; (8001318 <__libc_init_array+0x40>)
 80012f0:	4c0a      	ldr	r4, [pc, #40]	; (800131c <__libc_init_array+0x44>)
 80012f2:	1b64      	subs	r4, r4, r5
 80012f4:	10a4      	asrs	r4, r4, #2
 80012f6:	42a6      	cmp	r6, r4
 80012f8:	d105      	bne.n	8001306 <__libc_init_array+0x2e>
 80012fa:	bd70      	pop	{r4, r5, r6, pc}
 80012fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001300:	4798      	blx	r3
 8001302:	3601      	adds	r6, #1
 8001304:	e7ee      	b.n	80012e4 <__libc_init_array+0xc>
 8001306:	f855 3b04 	ldr.w	r3, [r5], #4
 800130a:	4798      	blx	r3
 800130c:	3601      	adds	r6, #1
 800130e:	e7f2      	b.n	80012f6 <__libc_init_array+0x1e>
 8001310:	08001338 	.word	0x08001338
 8001314:	08001338 	.word	0x08001338
 8001318:	08001338 	.word	0x08001338
 800131c:	0800133c 	.word	0x0800133c

08001320 <_init>:
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001322:	bf00      	nop
 8001324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001326:	bc08      	pop	{r3}
 8001328:	469e      	mov	lr, r3
 800132a:	4770      	bx	lr

0800132c <_fini>:
 800132c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800132e:	bf00      	nop
 8001330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001332:	bc08      	pop	{r3}
 8001334:	469e      	mov	lr, r3
 8001336:	4770      	bx	lr
