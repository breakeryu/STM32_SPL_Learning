
SPL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001020  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001150  08001150  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001150  08001150  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001150  08001150  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001150  08001150  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001150  08001150  00011150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001154  08001154  00011154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  2000002c  08001184  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  08001184  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000530f  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000111b  00000000  00000000  00025364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000710  00000000  00000000  00026480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000648  00000000  00000000  00026b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003279  00000000  00000000  000271d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007649  00000000  00000000  0002a451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00054815  00000000  00000000  00031a9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000862af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c88  00000000  00000000  00086300  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001138 	.word	0x08001138

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08001138 	.word	0x08001138

08000170 <BSP_GPIO_SetCfg>:
  *     @arg GPIO_Speed_2MHz
  *     @arg GPIO_Speed_50MHz
  * @retval None
  */
void BSP_GPIO_SetCfg(GPIO_TypeDef *gp, uint16_t index,GPIOSpeed_TypeDef speed, GPIOMode_TypeDef mode)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	4608      	mov	r0, r1
 800017a:	4611      	mov	r1, r2
 800017c:	461a      	mov	r2, r3
 800017e:	4603      	mov	r3, r0
 8000180:	807b      	strh	r3, [r7, #2]
 8000182:	460b      	mov	r3, r1
 8000184:	707b      	strb	r3, [r7, #1]
 8000186:	4613      	mov	r3, r2
 8000188:	703b      	strb	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = index;
 800018a:	887b      	ldrh	r3, [r7, #2]
 800018c:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Speed = speed;
 800018e:	787b      	ldrb	r3, [r7, #1]
 8000190:	73bb      	strb	r3, [r7, #14]
    GPIO_InitStructure.GPIO_Mode = mode;
 8000192:	783b      	ldrb	r3, [r7, #0]
 8000194:	73fb      	strb	r3, [r7, #15]
    GPIO_Init(gp, &GPIO_InitStructure);
 8000196:	f107 030c 	add.w	r3, r7, #12
 800019a:	4619      	mov	r1, r3
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f000 faa7 	bl	80006f0 <GPIO_Init>

}
 80001a2:	bf00      	nop
 80001a4:	3710      	adds	r7, #16
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
	...

080001ac <BSP_RCC_Init>:




void BSP_RCC_Init(void)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  SystemInit();
 80001b0:	f000 f956 	bl	8000460 <SystemInit>

  /* Configure the System Peripheral clock prescalers */
  BSP_RCC_Periph_Clock_Init();
 80001b4:	f000 f80c 	bl	80001d0 <BSP_RCC_Periph_Clock_Init>

  //Update SystemCoreClock variable according to Clock Register Values
  SystemCoreClockUpdate();
 80001b8:	f000 f986 	bl	80004c8 <SystemCoreClockUpdate>

  /* This function fills the RCC_ClockFreq structure with the current
  frequencies of different on chip clocks (for debug purpose) */
  RCC_GetClocksFreq(&RCC_ClockFreq);
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <BSP_RCC_Init+0x20>)
 80001be:	f000 fc5f 	bl	8000a80 <RCC_GetClocksFreq>

  /* NVIC configuration ------------------------------------------------------*/
  //BSP_RCC_NVIC_Configuration();

  delay_init(72);
 80001c2:	2048      	movs	r0, #72	; 0x48
 80001c4:	f000 f8fc 	bl	80003c0 <delay_init>

  // _mcu_rev_id = DBGMCU_GetREVID();
  // _mcu_dev_id = DBGMCU_GetDEVID();

}
 80001c8:	bf00      	nop
 80001ca:	bd80      	pop	{r7, pc}
 80001cc:	20000048 	.word	0x20000048

080001d0 <BSP_RCC_Periph_Clock_Init>:


void BSP_RCC_Periph_Clock_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0



  //ADC CLK Prescaler, ADC CLK = 72 / 6 = 12 Mhz
  RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 80001d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80001d8:	f000 fbf4 	bl	80009c4 <RCC_ADCCLKConfig>
  //USB OTG CLK FS Prescaler, when PLL = 72Mhz, OTGFSPRE = 0
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 80001dc:	2000      	movs	r0, #0
 80001de:	f000 fbe3 	bl	80009a8 <RCC_USBCLKConfig>
  //MCO 
  RCC_MCOConfig(RCC_MCO_NoClock);
 80001e2:	2000      	movs	r0, #0
 80001e4:	f000 fd5c 	bl	8000ca0 <RCC_MCOConfig>


  //Clear Clock interrupt register
  RCC->CIR = 0;
 80001e8:	4b0f      	ldr	r3, [pc, #60]	; (8000228 <BSP_RCC_Periph_Clock_Init+0x58>)
 80001ea:	2200      	movs	r2, #0
 80001ec:	609a      	str	r2, [r3, #8]

  //Reset APB2 and APB1 Peripheral
  RCC->APB2RSTR = 0;
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <BSP_RCC_Periph_Clock_Init+0x58>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	60da      	str	r2, [r3, #12]
  RCC->APB1RSTR = 0;
 80001f4:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <BSP_RCC_Periph_Clock_Init+0x58>)
 80001f6:	2200      	movs	r2, #0
 80001f8:	611a      	str	r2, [r3, #16]

  //AHB Peripheral CLK Enable
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SRAM  | RCC_AHBPeriph_FLITF , ENABLE);
 80001fa:	2101      	movs	r1, #1
 80001fc:	2014      	movs	r0, #20
 80001fe:	f000 fcf5 	bl	8000bec <RCC_AHBPeriphClockCmd>
  

  //APB2 Peripheral CLK Enable
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA  |
 8000202:	2101      	movs	r1, #1
 8000204:	201d      	movs	r0, #29
 8000206:	f000 fd0f 	bl	8000c28 <RCC_APB2PeriphClockCmd>
                          RCC_APB2Periph_GPIOB  | RCC_APB2Periph_GPIOC,
                        ENABLE);

  //APB1 Peripheral CLK Enable
  RCC->APB1ENR = 0;
 800020a:	4b07      	ldr	r3, [pc, #28]	; (8000228 <BSP_RCC_Periph_Clock_Init+0x58>)
 800020c:	2200      	movs	r2, #0
 800020e:	61da      	str	r2, [r3, #28]
  
  //RTC CLK
  RCC_LSEConfig(RCC_LSE_ON);
 8000210:	2001      	movs	r0, #1
 8000212:	f000 fbf3 	bl	80009fc <RCC_LSEConfig>
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 8000216:	f44f 7000 	mov.w	r0, #512	; 0x200
 800021a:	f000 fc0f 	bl	8000a3c <RCC_RTCCLKConfig>
  RCC_RTCCLKCmd(ENABLE);
 800021e:	2001      	movs	r0, #1
 8000220:	f000 fc1e 	bl	8000a60 <RCC_RTCCLKCmd>




}
 8000224:	bf00      	nop
 8000226:	bd80      	pop	{r7, pc}
 8000228:	40021000 	.word	0x40021000

0800022c <BSP_PWM_Init>:

/* Private variables ---------------------------------------------------------*/
uint16_t capture = 0;

void BSP_PWM_Init(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b088      	sub	sp, #32
 8000230:	af00      	add	r7, sp, #0

  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  TIM_OCInitTypeDef  TIM_OCInitStructure;

  /* TIM4 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000232:	2101      	movs	r1, #1
 8000234:	2004      	movs	r0, #4
 8000236:	f000 fd15 	bl	8000c64 <RCC_APB1PeriphClockCmd>

  /* Remap TIM4_CH3 on PB7 pin */
  GPIO_PinRemapConfig(GPIO_Remap_TIM4, DISABLE);
 800023a:	2100      	movs	r1, #0
 800023c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000240:	f000 fb42 	bl	80008c8 <GPIO_PinRemapConfig>

  /* GPIOB clock enable In BSP_RCC*/

  //Configure the TIM4 Ouput Channel 3 as alternate function push-pull 

  BSP_GPIO_SetCfg(GPIOB, GPIO_Pin_8, GPIO_Speed_50MHz, GPIO_Mode_AF_PP);
 8000244:	2318      	movs	r3, #24
 8000246:	2203      	movs	r2, #3
 8000248:	f44f 7180 	mov.w	r1, #256	; 0x100
 800024c:	481d      	ldr	r0, [pc, #116]	; (80002c4 <BSP_PWM_Init+0x98>)
 800024e:	f7ff ff8f 	bl	8000170 <BSP_GPIO_SetCfg>
    TIM4 Channel3 duty cycle = (TIM4_CCR3/ TIM4_ARR)* 100 = 25%
    TIM4 Channel3 duty cycle = (TIM4_CCR3/ TIM4_ARR)* 100 = 12.5%
  ----------------------------------------------------------------------- */

  /* Compute the prescaler value */
  PrescalerValue = (uint16_t) (SystemCoreClock / 24000000) - 1;
 8000252:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <BSP_PWM_Init+0x9c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4a1d      	ldr	r2, [pc, #116]	; (80002cc <BSP_PWM_Init+0xa0>)
 8000258:	fba2 2303 	umull	r2, r3, r2, r3
 800025c:	0d5b      	lsrs	r3, r3, #21
 800025e:	b29b      	uxth	r3, r3
 8000260:	3b01      	subs	r3, #1
 8000262:	b29a      	uxth	r2, r3
 8000264:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <BSP_PWM_Init+0xa4>)
 8000266:	801a      	strh	r2, [r3, #0]
  /* Time base configuration */
  TIM_TimeBaseStructure.TIM_Period = 665;
 8000268:	f240 2399 	movw	r3, #665	; 0x299
 800026c:	833b      	strh	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = PrescalerValue;
 800026e:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <BSP_PWM_Init+0xa4>)
 8000270:	881b      	ldrh	r3, [r3, #0]
 8000272:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
 8000274:	2300      	movs	r3, #0
 8000276:	837b      	strh	r3, [r7, #26]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000278:	2300      	movs	r3, #0
 800027a:	82fb      	strh	r3, [r7, #22]

  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
 800027c:	f107 0314 	add.w	r3, r7, #20
 8000280:	4619      	mov	r1, r3
 8000282:	4814      	ldr	r0, [pc, #80]	; (80002d4 <BSP_PWM_Init+0xa8>)
 8000284:	f000 fd1c 	bl	8000cc0 <TIM_TimeBaseInit>

  /* PWM Mode configuration: Channel3 */
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000288:	2360      	movs	r3, #96	; 0x60
 800028a:	80bb      	strh	r3, [r7, #4]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800028c:	2301      	movs	r3, #1
 800028e:	80fb      	strh	r3, [r7, #6]
  TIM_OCInitStructure.TIM_Pulse = CCR3_Val;
 8000290:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <BSP_PWM_Init+0xac>)
 8000292:	881b      	ldrh	r3, [r3, #0]
 8000294:	817b      	strh	r3, [r7, #10]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
 8000296:	2300      	movs	r3, #0
 8000298:	81bb      	strh	r3, [r7, #12]

  TIM_OC3Init(TIM4, &TIM_OCInitStructure);
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4619      	mov	r1, r3
 800029e:	480d      	ldr	r0, [pc, #52]	; (80002d4 <BSP_PWM_Init+0xa8>)
 80002a0:	f000 fd8a 	bl	8000db8 <TIM_OC3Init>

  TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
 80002a4:	2108      	movs	r1, #8
 80002a6:	480b      	ldr	r0, [pc, #44]	; (80002d4 <BSP_PWM_Init+0xa8>)
 80002a8:	f000 fe4a 	bl	8000f40 <TIM_OC3PreloadConfig>



  TIM_ARRPreloadConfig(TIM4, ENABLE);
 80002ac:	2101      	movs	r1, #1
 80002ae:	4809      	ldr	r0, [pc, #36]	; (80002d4 <BSP_PWM_Init+0xa8>)
 80002b0:	f000 fe27 	bl	8000f02 <TIM_ARRPreloadConfig>

  /* TIM4 enable counter */
  TIM_Cmd(TIM4, ENABLE);
 80002b4:	2101      	movs	r1, #1
 80002b6:	4807      	ldr	r0, [pc, #28]	; (80002d4 <BSP_PWM_Init+0xa8>)
 80002b8:	f000 fe04 	bl	8000ec4 <TIM_Cmd>


}
 80002bc:	bf00      	nop
 80002be:	3720      	adds	r7, #32
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	40010c00 	.word	0x40010c00
 80002c8:	20000004 	.word	0x20000004
 80002cc:	165e9f81 	.word	0x165e9f81
 80002d0:	2000005c 	.word	0x2000005c
 80002d4:	40000800 	.word	0x40000800
 80002d8:	20000000 	.word	0x20000000

080002dc <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM4, TIM_IT_CC1) != RESET)
 80002e0:	2102      	movs	r1, #2
 80002e2:	4815      	ldr	r0, [pc, #84]	; (8000338 <TIM4_IRQHandler+0x5c>)
 80002e4:	f000 fe6d 	bl	8000fc2 <TIM_GetITStatus>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d021      	beq.n	8000332 <TIM4_IRQHandler+0x56>
  {
    TIM_ClearITPendingBit(TIM4, TIM_IT_CC1);
 80002ee:	2102      	movs	r1, #2
 80002f0:	4811      	ldr	r0, [pc, #68]	; (8000338 <TIM4_IRQHandler+0x5c>)
 80002f2:	f000 fe8f 	bl	8001014 <TIM_ClearITPendingBit>

    /* Pin PC.06 toggling with frequency = 500 Hz */
    GPIO_WriteBit(GPIOB, GPIO_Pin_6, (BitAction)(1 - GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_6)));
 80002f6:	2140      	movs	r1, #64	; 0x40
 80002f8:	4810      	ldr	r0, [pc, #64]	; (800033c <TIM4_IRQHandler+0x60>)
 80002fa:	f000 fab5 	bl	8000868 <GPIO_ReadOutputDataBit>
 80002fe:	4603      	mov	r3, r0
 8000300:	f1c3 0301 	rsb	r3, r3, #1
 8000304:	b2db      	uxtb	r3, r3
 8000306:	461a      	mov	r2, r3
 8000308:	2140      	movs	r1, #64	; 0x40
 800030a:	480c      	ldr	r0, [pc, #48]	; (800033c <TIM4_IRQHandler+0x60>)
 800030c:	f000 fac5 	bl	800089a <GPIO_WriteBit>

    
    capture = TIM_GetCapture1(TIM4);
 8000310:	4809      	ldr	r0, [pc, #36]	; (8000338 <TIM4_IRQHandler+0x5c>)
 8000312:	f000 fe3e 	bl	8000f92 <TIM_GetCapture1>
 8000316:	4603      	mov	r3, r0
 8000318:	461a      	mov	r2, r3
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <TIM4_IRQHandler+0x64>)
 800031c:	801a      	strh	r2, [r3, #0]
    TIM_SetCompare1(TIM4, capture + CCR1_Val);
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <TIM4_IRQHandler+0x64>)
 8000320:	881a      	ldrh	r2, [r3, #0]
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <TIM4_IRQHandler+0x68>)
 8000324:	881b      	ldrh	r3, [r3, #0]
 8000326:	4413      	add	r3, r2
 8000328:	b29b      	uxth	r3, r3
 800032a:	4619      	mov	r1, r3
 800032c:	4802      	ldr	r0, [pc, #8]	; (8000338 <TIM4_IRQHandler+0x5c>)
 800032e:	f000 fe22 	bl	8000f76 <TIM_SetCompare1>
  }

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	40000800 	.word	0x40000800
 800033c:	40010c00 	.word	0x40010c00
 8000340:	2000005e 	.word	0x2000005e
 8000344:	20000002 	.word	0x20000002

08000348 <TIM5_IRQHandler>:
  * @brief  This function handles TIM5 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM5_IRQHandler(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
 /* Clear TIM3 Capture compare interrupt pending bit */
  TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
 800034c:	2102      	movs	r1, #2
 800034e:	4817      	ldr	r0, [pc, #92]	; (80003ac <TIM5_IRQHandler+0x64>)
 8000350:	f000 fe60 	bl	8001014 <TIM_ClearITPendingBit>

  /* Get the Input Capture value */
  IC1Value = TIM_GetCapture1(TIM5);
 8000354:	4815      	ldr	r0, [pc, #84]	; (80003ac <TIM5_IRQHandler+0x64>)
 8000356:	f000 fe1c 	bl	8000f92 <TIM_GetCapture1>
 800035a:	4603      	mov	r3, r0
 800035c:	461a      	mov	r2, r3
 800035e:	4b14      	ldr	r3, [pc, #80]	; (80003b0 <TIM5_IRQHandler+0x68>)
 8000360:	801a      	strh	r2, [r3, #0]

  if (IC1Value != 0)
 8000362:	4b13      	ldr	r3, [pc, #76]	; (80003b0 <TIM5_IRQHandler+0x68>)
 8000364:	881b      	ldrh	r3, [r3, #0]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d017      	beq.n	800039a <TIM5_IRQHandler+0x52>
  {
    /* Duty cycle computation */
    DutyCycle = ( TIM_GetCapture2(TIM5) * 100) / IC1Value;
 800036a:	4810      	ldr	r0, [pc, #64]	; (80003ac <TIM5_IRQHandler+0x64>)
 800036c:	f000 fe1d 	bl	8000faa <TIM_GetCapture2>
 8000370:	4603      	mov	r3, r0
 8000372:	461a      	mov	r2, r3
 8000374:	2364      	movs	r3, #100	; 0x64
 8000376:	fb02 f303 	mul.w	r3, r2, r3
 800037a:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <TIM5_IRQHandler+0x68>)
 800037c:	8812      	ldrh	r2, [r2, #0]
 800037e:	fb93 f3f2 	sdiv	r3, r3, r2
 8000382:	b29a      	uxth	r2, r3
 8000384:	4b0b      	ldr	r3, [pc, #44]	; (80003b4 <TIM5_IRQHandler+0x6c>)
 8000386:	801a      	strh	r2, [r3, #0]

    /* Frequency computation */
    Frequency = SystemCoreClock / IC1Value;
 8000388:	4b0b      	ldr	r3, [pc, #44]	; (80003b8 <TIM5_IRQHandler+0x70>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <TIM5_IRQHandler+0x68>)
 800038e:	8812      	ldrh	r2, [r2, #0]
 8000390:	fbb3 f3f2 	udiv	r3, r3, r2
 8000394:	4a09      	ldr	r2, [pc, #36]	; (80003bc <TIM5_IRQHandler+0x74>)
 8000396:	6013      	str	r3, [r2, #0]
  {
    DutyCycle = 0;
    Frequency = 0;
  }

}
 8000398:	e005      	b.n	80003a6 <TIM5_IRQHandler+0x5e>
    DutyCycle = 0;
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <TIM5_IRQHandler+0x6c>)
 800039c:	2200      	movs	r2, #0
 800039e:	801a      	strh	r2, [r3, #0]
    Frequency = 0;
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <TIM5_IRQHandler+0x74>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40000c00 	.word	0x40000c00
 80003b0:	20000060 	.word	0x20000060
 80003b4:	20000062 	.word	0x20000062
 80003b8:	20000004 	.word	0x20000004
 80003bc:	20000064 	.word	0x20000064

080003c0 <delay_init>:
//初始化延迟函数
//当使用OS的时候,此函数会初始化OS的时钟节拍
//SYSTICK的时钟固定为AHB时钟的1/8
//SYSCLK:系统时钟频率
void delay_init(u8 SYSCLK)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	4603      	mov	r3, r0
 80003c8:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
 80003ca:	f06f 0004 	mvn.w	r0, #4
 80003ce:	f000 f973 	bl	80006b8 <SysTick_CLKSourceConfig>
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	08db      	lsrs	r3, r3, #3
 80003d6:	b2da      	uxtb	r2, r3
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <delay_init+0x3c>)
 80003da:	701a      	strb	r2, [r3, #0]
	fac_ms=1000/delay_ostickspersec;		//代表OS可以延时的最少单位	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; 	//开启SYSTICK    
#else
	fac_ms=(u16)fac_us*1000;				//非OS下,代表每个ms需要的systick时钟数   
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <delay_init+0x3c>)
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	b29b      	uxth	r3, r3
 80003e2:	461a      	mov	r2, r3
 80003e4:	0152      	lsls	r2, r2, #5
 80003e6:	1ad2      	subs	r2, r2, r3
 80003e8:	0092      	lsls	r2, r2, #2
 80003ea:	4413      	add	r3, r2
 80003ec:	00db      	lsls	r3, r3, #3
 80003ee:	b29a      	uxth	r2, r3
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <delay_init+0x40>)
 80003f2:	801a      	strh	r2, [r3, #0]
#endif
}								    
 80003f4:	bf00      	nop
 80003f6:	3708      	adds	r7, #8
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000068 	.word	0x20000068
 8000400:	2000006a 	.word	0x2000006a

08000404 <sys_SWJ_REMAP_Config>:
  *     @arg SWJ_NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  *     @arg SWJ_DISABLE: Full SWJ Disabled (JTAG-DP + SW-DP)
  * @retval None
  */
void sys_SWJ_REMAP_Config(uint8_t SWJ_REMAP)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	4603      	mov	r3, r0
 800040c:	71fb      	strb	r3, [r7, #7]

    switch (SWJ_REMAP)
 800040e:	79fb      	ldrb	r3, [r7, #7]
 8000410:	2b03      	cmp	r3, #3
 8000412:	d81a      	bhi.n	800044a <sys_SWJ_REMAP_Config+0x46>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <sys_SWJ_REMAP_Config+0x18>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	0800044b 	.word	0x0800044b
 8000420:	0800042d 	.word	0x0800042d
 8000424:	08000437 	.word	0x08000437
 8000428:	08000441 	.word	0x08000441
        /* Full SWJ Enable (JTAG-DP + SW-DP) */
        break;

    case SWJ_NONJTRST:
        /* Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_NoJTRST, ENABLE);
 800042c:	2101      	movs	r1, #1
 800042e:	4809      	ldr	r0, [pc, #36]	; (8000454 <sys_SWJ_REMAP_Config+0x50>)
 8000430:	f000 fa4a 	bl	80008c8 <GPIO_PinRemapConfig>
        break;
 8000434:	e00a      	b.n	800044c <sys_SWJ_REMAP_Config+0x48>

    case SWJ_NOJTAG:
        /* JTAG-DP Disabled and SW-DP Enabled */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 8000436:	2101      	movs	r1, #1
 8000438:	4807      	ldr	r0, [pc, #28]	; (8000458 <sys_SWJ_REMAP_Config+0x54>)
 800043a:	f000 fa45 	bl	80008c8 <GPIO_PinRemapConfig>
    break;
 800043e:	e005      	b.n	800044c <sys_SWJ_REMAP_Config+0x48>

    case SWJ_DISABLE:
        /* Full SWJ Disabled (JTAG-DP + SW-DP) */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
 8000440:	2101      	movs	r1, #1
 8000442:	4806      	ldr	r0, [pc, #24]	; (800045c <sys_SWJ_REMAP_Config+0x58>)
 8000444:	f000 fa40 	bl	80008c8 <GPIO_PinRemapConfig>
    break;
 8000448:	e000      	b.n	800044c <sys_SWJ_REMAP_Config+0x48>

    default:
        break;
 800044a:	bf00      	nop
    }

}
 800044c:	bf00      	nop
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}
 8000454:	00300100 	.word	0x00300100
 8000458:	00300200 	.word	0x00300200
 800045c:	00300400 	.word	0x00300400

08000460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000464:	4b15      	ldr	r3, [pc, #84]	; (80004bc <SystemInit+0x5c>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4a14      	ldr	r2, [pc, #80]	; (80004bc <SystemInit+0x5c>)
 800046a:	f043 0301 	orr.w	r3, r3, #1
 800046e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000470:	4b12      	ldr	r3, [pc, #72]	; (80004bc <SystemInit+0x5c>)
 8000472:	685a      	ldr	r2, [r3, #4]
 8000474:	4911      	ldr	r1, [pc, #68]	; (80004bc <SystemInit+0x5c>)
 8000476:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <SystemInit+0x60>)
 8000478:	4013      	ands	r3, r2
 800047a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800047c:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <SystemInit+0x5c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <SystemInit+0x5c>)
 8000482:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800048a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800048c:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <SystemInit+0x5c>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a0a      	ldr	r2, [pc, #40]	; (80004bc <SystemInit+0x5c>)
 8000492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000496:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000498:	4b08      	ldr	r3, [pc, #32]	; (80004bc <SystemInit+0x5c>)
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4a07      	ldr	r2, [pc, #28]	; (80004bc <SystemInit+0x5c>)
 800049e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004a2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <SystemInit+0x5c>)
 80004a6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80004aa:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80004ac:	f000 f87e 	bl	80005ac <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <SystemInit+0x64>)
 80004b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b6:	609a      	str	r2, [r3, #8]
#endif 
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}
 80004bc:	40021000 	.word	0x40021000
 80004c0:	f8ff0000 	.word	0xf8ff0000
 80004c4:	e000ed00 	.word	0xe000ed00

080004c8 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	60fb      	str	r3, [r7, #12]
 80004d2:	2300      	movs	r3, #0
 80004d4:	60bb      	str	r3, [r7, #8]
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80004da:	4b2f      	ldr	r3, [pc, #188]	; (8000598 <SystemCoreClockUpdate+0xd0>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	f003 030c 	and.w	r3, r3, #12
 80004e2:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	2b08      	cmp	r3, #8
 80004e8:	d011      	beq.n	800050e <SystemCoreClockUpdate+0x46>
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	2b08      	cmp	r3, #8
 80004ee:	d83a      	bhi.n	8000566 <SystemCoreClockUpdate+0x9e>
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d003      	beq.n	80004fe <SystemCoreClockUpdate+0x36>
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2b04      	cmp	r3, #4
 80004fa:	d004      	beq.n	8000506 <SystemCoreClockUpdate+0x3e>
 80004fc:	e033      	b.n	8000566 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80004fe:	4b27      	ldr	r3, [pc, #156]	; (800059c <SystemCoreClockUpdate+0xd4>)
 8000500:	4a27      	ldr	r2, [pc, #156]	; (80005a0 <SystemCoreClockUpdate+0xd8>)
 8000502:	601a      	str	r2, [r3, #0]
      break;
 8000504:	e033      	b.n	800056e <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <SystemCoreClockUpdate+0xd4>)
 8000508:	4a25      	ldr	r2, [pc, #148]	; (80005a0 <SystemCoreClockUpdate+0xd8>)
 800050a:	601a      	str	r2, [r3, #0]
      break;
 800050c:	e02f      	b.n	800056e <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 800050e:	4b22      	ldr	r3, [pc, #136]	; (8000598 <SystemCoreClockUpdate+0xd0>)
 8000510:	685b      	ldr	r3, [r3, #4]
 8000512:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000516:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000518:	4b1f      	ldr	r3, [pc, #124]	; (8000598 <SystemCoreClockUpdate+0xd0>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000520:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	0c9b      	lsrs	r3, r3, #18
 8000526:	3302      	adds	r3, #2
 8000528:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d106      	bne.n	800053e <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	4a1c      	ldr	r2, [pc, #112]	; (80005a4 <SystemCoreClockUpdate+0xdc>)
 8000534:	fb02 f303 	mul.w	r3, r2, r3
 8000538:	4a18      	ldr	r2, [pc, #96]	; (800059c <SystemCoreClockUpdate+0xd4>)
 800053a:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800053c:	e017      	b.n	800056e <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <SystemCoreClockUpdate+0xd0>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000546:	2b00      	cmp	r3, #0
 8000548:	d006      	beq.n	8000558 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 800054a:	68bb      	ldr	r3, [r7, #8]
 800054c:	4a15      	ldr	r2, [pc, #84]	; (80005a4 <SystemCoreClockUpdate+0xdc>)
 800054e:	fb02 f303 	mul.w	r3, r2, r3
 8000552:	4a12      	ldr	r2, [pc, #72]	; (800059c <SystemCoreClockUpdate+0xd4>)
 8000554:	6013      	str	r3, [r2, #0]
      break;
 8000556:	e00a      	b.n	800056e <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000558:	68bb      	ldr	r3, [r7, #8]
 800055a:	4a11      	ldr	r2, [pc, #68]	; (80005a0 <SystemCoreClockUpdate+0xd8>)
 800055c:	fb02 f303 	mul.w	r3, r2, r3
 8000560:	4a0e      	ldr	r2, [pc, #56]	; (800059c <SystemCoreClockUpdate+0xd4>)
 8000562:	6013      	str	r3, [r2, #0]
      break;
 8000564:	e003      	b.n	800056e <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <SystemCoreClockUpdate+0xd4>)
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <SystemCoreClockUpdate+0xd8>)
 800056a:	601a      	str	r2, [r3, #0]
      break;
 800056c:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800056e:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <SystemCoreClockUpdate+0xd0>)
 8000570:	685b      	ldr	r3, [r3, #4]
 8000572:	091b      	lsrs	r3, r3, #4
 8000574:	f003 030f 	and.w	r3, r3, #15
 8000578:	4a0b      	ldr	r2, [pc, #44]	; (80005a8 <SystemCoreClockUpdate+0xe0>)
 800057a:	5cd3      	ldrb	r3, [r2, r3]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <SystemCoreClockUpdate+0xd4>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	fa22 f303 	lsr.w	r3, r2, r3
 800058a:	4a04      	ldr	r2, [pc, #16]	; (800059c <SystemCoreClockUpdate+0xd4>)
 800058c:	6013      	str	r3, [r2, #0]
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	40021000 	.word	0x40021000
 800059c:	20000004 	.word	0x20000004
 80005a0:	007a1200 	.word	0x007a1200
 80005a4:	003d0900 	.word	0x003d0900
 80005a8:	20000008 	.word	0x20000008

080005ac <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80005b0:	f000 f802 	bl	80005b8 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	2300      	movs	r3, #0
 80005c4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80005c6:	4b3a      	ldr	r3, [pc, #232]	; (80006b0 <SetSysClockTo72+0xf8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a39      	ldr	r2, [pc, #228]	; (80006b0 <SetSysClockTo72+0xf8>)
 80005cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005d0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80005d2:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <SetSysClockTo72+0xf8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005da:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3301      	adds	r3, #1
 80005e0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <SetSysClockTo72+0x38>
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80005ee:	d1f0      	bne.n	80005d2 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80005f0:	4b2f      	ldr	r3, [pc, #188]	; (80006b0 <SetSysClockTo72+0xf8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80005fc:	2301      	movs	r3, #1
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	e001      	b.n	8000606 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000602:	2300      	movs	r3, #0
 8000604:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000606:	683b      	ldr	r3, [r7, #0]
 8000608:	2b01      	cmp	r3, #1
 800060a:	d14b      	bne.n	80006a4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800060c:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <SetSysClockTo72+0xfc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a28      	ldr	r2, [pc, #160]	; (80006b4 <SetSysClockTo72+0xfc>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SetSysClockTo72+0xfc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <SetSysClockTo72+0xfc>)
 800061e:	f023 0307 	bic.w	r3, r3, #7
 8000622:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SetSysClockTo72+0xfc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a22      	ldr	r2, [pc, #136]	; (80006b4 <SetSysClockTo72+0xfc>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000638:	4b1d      	ldr	r3, [pc, #116]	; (80006b0 <SetSysClockTo72+0xf8>)
 800063a:	4a1d      	ldr	r2, [pc, #116]	; (80006b0 <SetSysClockTo72+0xf8>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <SetSysClockTo72+0xf8>)
 800064e:	685b      	ldr	r3, [r3, #4]
 8000650:	4a17      	ldr	r2, [pc, #92]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000652:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000656:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <SetSysClockTo72+0xf8>)
 800065a:	685b      	ldr	r3, [r3, #4]
 800065c:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <SetSysClockTo72+0xf8>)
 800065e:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000662:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <SetSysClockTo72+0xf8>)
 800066a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800066e:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000670:	bf00      	nop
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f9      	beq.n	8000672 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	4a0b      	ldr	r2, [pc, #44]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000684:	f023 0303 	bic.w	r3, r3, #3
 8000688:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <SetSysClockTo72+0xf8>)
 800068c:	685b      	ldr	r3, [r3, #4]
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <SetSysClockTo72+0xf8>)
 8000690:	f043 0302 	orr.w	r3, r3, #2
 8000694:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000696:	bf00      	nop
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <SetSysClockTo72+0xf8>)
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	f003 030c 	and.w	r3, r3, #12
 80006a0:	2b08      	cmp	r3, #8
 80006a2:	d1f9      	bne.n	8000698 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40022000 	.word	0x40022000

080006b8 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b04      	cmp	r3, #4
 80006c4:	d106      	bne.n	80006d4 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <SysTick_CLKSourceConfig+0x34>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <SysTick_CLKSourceConfig+0x34>)
 80006cc:	f043 0304 	orr.w	r3, r3, #4
 80006d0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 80006d2:	e005      	b.n	80006e0 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <SysTick_CLKSourceConfig+0x34>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a04      	ldr	r2, [pc, #16]	; (80006ec <SysTick_CLKSourceConfig+0x34>)
 80006da:	f023 0304 	bic.w	r3, r3, #4
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bc80      	pop	{r7}
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	e000e010 	.word	0xe000e010

080006f0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b089      	sub	sp, #36	; 0x24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000712:	683b      	ldr	r3, [r7, #0]
 8000714:	78db      	ldrb	r3, [r3, #3]
 8000716:	f003 030f 	and.w	r3, r3, #15
 800071a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	78db      	ldrb	r3, [r3, #3]
 8000720:	f003 0310 	and.w	r3, r3, #16
 8000724:	2b00      	cmp	r3, #0
 8000726:	d005      	beq.n	8000734 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	789b      	ldrb	r3, [r3, #2]
 800072c:	461a      	mov	r2, r3
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	4313      	orrs	r3, r2
 8000732:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d044      	beq.n	80007c8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000744:	2300      	movs	r3, #0
 8000746:	61bb      	str	r3, [r7, #24]
 8000748:	e038      	b.n	80007bc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800074a:	2201      	movs	r2, #1
 800074c:	69bb      	ldr	r3, [r7, #24]
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	881b      	ldrh	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	4013      	ands	r3, r2
 800075e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000760:	693a      	ldr	r2, [r7, #16]
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	429a      	cmp	r2, r3
 8000766:	d126      	bne.n	80007b6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000768:	69bb      	ldr	r3, [r7, #24]
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800076e:	220f      	movs	r2, #15
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	43db      	mvns	r3, r3
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	4013      	ands	r3, r2
 8000780:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000782:	69fa      	ldr	r2, [r7, #28]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	697a      	ldr	r2, [r7, #20]
 800078c:	4313      	orrs	r3, r2
 800078e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	78db      	ldrb	r3, [r3, #3]
 8000794:	2b28      	cmp	r3, #40	; 0x28
 8000796:	d105      	bne.n	80007a4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000798:	2201      	movs	r2, #1
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	409a      	lsls	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	615a      	str	r2, [r3, #20]
 80007a2:	e008      	b.n	80007b6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	78db      	ldrb	r3, [r3, #3]
 80007a8:	2b48      	cmp	r3, #72	; 0x48
 80007aa:	d104      	bne.n	80007b6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80007ac:	2201      	movs	r2, #1
 80007ae:	69bb      	ldr	r3, [r7, #24]
 80007b0:	409a      	lsls	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	3301      	adds	r3, #1
 80007ba:	61bb      	str	r3, [r7, #24]
 80007bc:	69bb      	ldr	r3, [r7, #24]
 80007be:	2b07      	cmp	r3, #7
 80007c0:	d9c3      	bls.n	800074a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	881b      	ldrh	r3, [r3, #0]
 80007cc:	2bff      	cmp	r3, #255	; 0xff
 80007ce:	d946      	bls.n	800085e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	61bb      	str	r3, [r7, #24]
 80007da:	e03a      	b.n	8000852 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	3308      	adds	r3, #8
 80007e0:	2201      	movs	r2, #1
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80007f4:	693a      	ldr	r2, [r7, #16]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d127      	bne.n	800084c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80007fc:	69bb      	ldr	r3, [r7, #24]
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000802:	220f      	movs	r2, #15
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	43db      	mvns	r3, r3
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	4013      	ands	r3, r2
 8000814:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000816:	69fa      	ldr	r2, [r7, #28]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	697a      	ldr	r2, [r7, #20]
 8000820:	4313      	orrs	r3, r2
 8000822:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	78db      	ldrb	r3, [r3, #3]
 8000828:	2b28      	cmp	r3, #40	; 0x28
 800082a:	d105      	bne.n	8000838 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800082c:	69bb      	ldr	r3, [r7, #24]
 800082e:	3308      	adds	r3, #8
 8000830:	2201      	movs	r2, #1
 8000832:	409a      	lsls	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	78db      	ldrb	r3, [r3, #3]
 800083c:	2b48      	cmp	r3, #72	; 0x48
 800083e:	d105      	bne.n	800084c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000840:	69bb      	ldr	r3, [r7, #24]
 8000842:	3308      	adds	r3, #8
 8000844:	2201      	movs	r2, #1
 8000846:	409a      	lsls	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800084c:	69bb      	ldr	r3, [r7, #24]
 800084e:	3301      	adds	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	2b07      	cmp	r3, #7
 8000856:	d9c1      	bls.n	80007dc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	605a      	str	r2, [r3, #4]
  }
}
 800085e:	bf00      	nop
 8000860:	3724      	adds	r7, #36	; 0x24
 8000862:	46bd      	mov	sp, r7
 8000864:	bc80      	pop	{r7}
 8000866:	4770      	bx	lr

08000868 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	460b      	mov	r3, r1
 8000872:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68da      	ldr	r2, [r3, #12]
 800087c:	887b      	ldrh	r3, [r7, #2]
 800087e:	4013      	ands	r3, r2
 8000880:	2b00      	cmp	r3, #0
 8000882:	d002      	beq.n	800088a <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000884:	2301      	movs	r3, #1
 8000886:	73fb      	strb	r3, [r7, #15]
 8000888:	e001      	b.n	800088e <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800088e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3714      	adds	r7, #20
 8000894:	46bd      	mov	sp, r7
 8000896:	bc80      	pop	{r7}
 8000898:	4770      	bx	lr

0800089a <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	807b      	strh	r3, [r7, #2]
 80008a6:	4613      	mov	r3, r2
 80008a8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80008aa:	787b      	ldrb	r3, [r7, #1]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d003      	beq.n	80008b8 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80008b0:	887a      	ldrh	r2, [r7, #2]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80008b6:	e002      	b.n	80008be <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 80008b8:	887a      	ldrh	r2, [r7, #2]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	615a      	str	r2, [r3, #20]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b087      	sub	sp, #28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]
 80008d8:	2300      	movs	r3, #0
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da03      	bge.n	80008f2 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80008ea:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <GPIO_PinRemapConfig+0xdc>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	617b      	str	r3, [r7, #20]
 80008f0:	e002      	b.n	80008f8 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 80008f2:	4b2c      	ldr	r3, [pc, #176]	; (80009a4 <GPIO_PinRemapConfig+0xdc>)
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	0c1b      	lsrs	r3, r3, #16
 80008fc:	f003 030f 	and.w	r3, r3, #15
 8000900:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	b29b      	uxth	r3, r3
 8000906:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800090e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000912:	d10a      	bne.n	800092a <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800091a:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <GPIO_PinRemapConfig+0xdc>)
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <GPIO_PinRemapConfig+0xdc>)
 8000922:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000926:	6053      	str	r3, [r2, #4]
 8000928:	e021      	b.n	800096e <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00e      	beq.n	8000952 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000934:	2203      	movs	r2, #3
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	fa02 f303 	lsl.w	r3, r2, r3
 800093c:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	43db      	mvns	r3, r3
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	4013      	ands	r3, r2
 8000946:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	e00d      	b.n	800096e <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	0d5b      	lsrs	r3, r3, #21
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	fa02 f303 	lsl.w	r3, r2, r3
 800095e:	43db      	mvns	r3, r3
 8000960:	697a      	ldr	r2, [r7, #20]
 8000962:	4013      	ands	r3, r2
 8000964:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000966:	697b      	ldr	r3, [r7, #20]
 8000968:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800096c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800096e:	78fb      	ldrb	r3, [r7, #3]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d008      	beq.n	8000986 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	0d5b      	lsrs	r3, r3, #21
 8000978:	011b      	lsls	r3, r3, #4
 800097a:	693a      	ldr	r2, [r7, #16]
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	697a      	ldr	r2, [r7, #20]
 8000982:	4313      	orrs	r3, r2
 8000984:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	2b00      	cmp	r3, #0
 800098a:	da03      	bge.n	8000994 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <GPIO_PinRemapConfig+0xdc>)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 8000992:	e002      	b.n	800099a <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8000994:	4a03      	ldr	r2, [pc, #12]	; (80009a4 <GPIO_PinRemapConfig+0xdc>)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	6053      	str	r3, [r2, #4]
}
 800099a:	bf00      	nop
 800099c:	371c      	adds	r7, #28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40010000 	.word	0x40010000

080009a8 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80009b0:	4a03      	ldr	r2, [pc, #12]	; (80009c0 <RCC_USBCLKConfig+0x18>)
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	6013      	str	r3, [r2, #0]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	424200d8 	.word	0x424200d8

080009c4 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <RCC_ADCCLKConfig+0x34>)
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80009dc:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80009e6:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <RCC_ADCCLKConfig+0x34>)
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	6053      	str	r3, [r2, #4]
}
 80009ec:	bf00      	nop
 80009ee:	3714      	adds	r7, #20
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bc80      	pop	{r7}
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <RCC_LSEConfig+0x3c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <RCC_LSEConfig+0x3c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 8000a12:	79fb      	ldrb	r3, [r7, #7]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d002      	beq.n	8000a1e <RCC_LSEConfig+0x22>
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d004      	beq.n	8000a26 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8000a1c:	e007      	b.n	8000a2e <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <RCC_LSEConfig+0x3c>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
      break;
 8000a24:	e003      	b.n	8000a2e <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <RCC_LSEConfig+0x3c>)
 8000a28:	2205      	movs	r2, #5
 8000a2a:	701a      	strb	r2, [r3, #0]
      break;            
 8000a2c:	bf00      	nop
  }
}
 8000a2e:	bf00      	nop
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr
 8000a38:	40021020 	.word	0x40021020

08000a3c <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <RCC_RTCCLKConfig+0x20>)
 8000a46:	6a1a      	ldr	r2, [r3, #32]
 8000a48:	4904      	ldr	r1, [pc, #16]	; (8000a5c <RCC_RTCCLKConfig+0x20>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	620b      	str	r3, [r1, #32]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	40021000 	.word	0x40021000

08000a60 <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <RCC_RTCCLKCmd+0x1c>)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	6013      	str	r3, [r2, #0]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr
 8000a7a:	bf00      	nop
 8000a7c:	4242043c 	.word	0x4242043c

08000a80 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b087      	sub	sp, #28
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8000a98:	4b4f      	ldr	r3, [pc, #316]	; (8000bd8 <RCC_GetClocksFreq+0x158>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 030c 	and.w	r3, r3, #12
 8000aa0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	2b08      	cmp	r3, #8
 8000aa6:	d011      	beq.n	8000acc <RCC_GetClocksFreq+0x4c>
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	2b08      	cmp	r3, #8
 8000aac:	d83a      	bhi.n	8000b24 <RCC_GetClocksFreq+0xa4>
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d003      	beq.n	8000abc <RCC_GetClocksFreq+0x3c>
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	2b04      	cmp	r3, #4
 8000ab8:	d004      	beq.n	8000ac4 <RCC_GetClocksFreq+0x44>
 8000aba:	e033      	b.n	8000b24 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a47      	ldr	r2, [pc, #284]	; (8000bdc <RCC_GetClocksFreq+0x15c>)
 8000ac0:	601a      	str	r2, [r3, #0]
      break;
 8000ac2:	e033      	b.n	8000b2c <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a45      	ldr	r2, [pc, #276]	; (8000bdc <RCC_GetClocksFreq+0x15c>)
 8000ac8:	601a      	str	r2, [r3, #0]
      break;
 8000aca:	e02f      	b.n	8000b2c <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000acc:	4b42      	ldr	r3, [pc, #264]	; (8000bd8 <RCC_GetClocksFreq+0x158>)
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000ad4:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8000ad6:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <RCC_GetClocksFreq+0x158>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ade:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	0c9b      	lsrs	r3, r3, #18
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d106      	bne.n	8000afc <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4a3b      	ldr	r2, [pc, #236]	; (8000be0 <RCC_GetClocksFreq+0x160>)
 8000af2:	fb03 f202 	mul.w	r2, r3, r2
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000afa:	e017      	b.n	8000b2c <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8000afc:	4b36      	ldr	r3, [pc, #216]	; (8000bd8 <RCC_GetClocksFreq+0x158>)
 8000afe:	685b      	ldr	r3, [r3, #4]
 8000b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d006      	beq.n	8000b16 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	4a35      	ldr	r2, [pc, #212]	; (8000be0 <RCC_GetClocksFreq+0x160>)
 8000b0c:	fb03 f202 	mul.w	r2, r3, r2
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	601a      	str	r2, [r3, #0]
      break;
 8000b14:	e00a      	b.n	8000b2c <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8000b16:	693b      	ldr	r3, [r7, #16]
 8000b18:	4a30      	ldr	r2, [pc, #192]	; (8000bdc <RCC_GetClocksFreq+0x15c>)
 8000b1a:	fb03 f202 	mul.w	r2, r3, r2
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	601a      	str	r2, [r3, #0]
      break;
 8000b22:	e003      	b.n	8000b2c <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a2d      	ldr	r2, [pc, #180]	; (8000bdc <RCC_GetClocksFreq+0x15c>)
 8000b28:	601a      	str	r2, [r3, #0]
      break;
 8000b2a:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	; (8000bd8 <RCC_GetClocksFreq+0x158>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b34:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	091b      	lsrs	r3, r3, #4
 8000b3a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000b3c:	4a29      	ldr	r2, [pc, #164]	; (8000be4 <RCC_GetClocksFreq+0x164>)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	4413      	add	r3, r2
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681a      	ldr	r2, [r3, #0]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	40da      	lsrs	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8000b54:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <RCC_GetClocksFreq+0x158>)
 8000b56:	685b      	ldr	r3, [r3, #4]
 8000b58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b5c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	0a1b      	lsrs	r3, r3, #8
 8000b62:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000b64:	4a1f      	ldr	r2, [pc, #124]	; (8000be4 <RCC_GetClocksFreq+0x164>)
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	4413      	add	r3, r2
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	b2db      	uxtb	r3, r3
 8000b6e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	40da      	lsrs	r2, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000b7c:	4b16      	ldr	r3, [pc, #88]	; (8000bd8 <RCC_GetClocksFreq+0x158>)
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b84:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	0adb      	lsrs	r3, r3, #11
 8000b8a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000b8c:	4a15      	ldr	r2, [pc, #84]	; (8000be4 <RCC_GetClocksFreq+0x164>)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	40da      	lsrs	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <RCC_GetClocksFreq+0x158>)
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bac:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	0b9b      	lsrs	r3, r3, #14
 8000bb2:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8000bb4:	4a0c      	ldr	r2, [pc, #48]	; (8000be8 <RCC_GetClocksFreq+0x168>)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4413      	add	r3, r2
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	68da      	ldr	r2, [r3, #12]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	fbb2 f2f3 	udiv	r2, r2, r3
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	611a      	str	r2, [r3, #16]
}
 8000bce:	bf00      	nop
 8000bd0:	371c      	adds	r7, #28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	007a1200 	.word	0x007a1200
 8000be0:	003d0900 	.word	0x003d0900
 8000be4:	20000018 	.word	0x20000018
 8000be8:	20000028 	.word	0x20000028

08000bec <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bf8:	78fb      	ldrb	r3, [r7, #3]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <RCC_AHBPeriphClockCmd+0x38>)
 8000c00:	695a      	ldr	r2, [r3, #20]
 8000c02:	4908      	ldr	r1, [pc, #32]	; (8000c24 <RCC_AHBPeriphClockCmd+0x38>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000c0a:	e006      	b.n	8000c1a <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <RCC_AHBPeriphClockCmd+0x38>)
 8000c0e:	695a      	ldr	r2, [r3, #20]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	43db      	mvns	r3, r3
 8000c14:	4903      	ldr	r1, [pc, #12]	; (8000c24 <RCC_AHBPeriphClockCmd+0x38>)
 8000c16:	4013      	ands	r3, r2
 8000c18:	614b      	str	r3, [r1, #20]
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr
 8000c24:	40021000 	.word	0x40021000

08000c28 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c34:	78fb      	ldrb	r3, [r7, #3]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d006      	beq.n	8000c48 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c3a:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <RCC_APB2PeriphClockCmd+0x38>)
 8000c3c:	699a      	ldr	r2, [r3, #24]
 8000c3e:	4908      	ldr	r1, [pc, #32]	; (8000c60 <RCC_APB2PeriphClockCmd+0x38>)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4313      	orrs	r3, r2
 8000c44:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c46:	e006      	b.n	8000c56 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <RCC_APB2PeriphClockCmd+0x38>)
 8000c4a:	699a      	ldr	r2, [r3, #24]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	43db      	mvns	r3, r3
 8000c50:	4903      	ldr	r1, [pc, #12]	; (8000c60 <RCC_APB2PeriphClockCmd+0x38>)
 8000c52:	4013      	ands	r3, r2
 8000c54:	618b      	str	r3, [r1, #24]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000

08000c64 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d006      	beq.n	8000c84 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <RCC_APB1PeriphClockCmd+0x38>)
 8000c78:	69da      	ldr	r2, [r3, #28]
 8000c7a:	4908      	ldr	r1, [pc, #32]	; (8000c9c <RCC_APB1PeriphClockCmd+0x38>)
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000c82:	e006      	b.n	8000c92 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <RCC_APB1PeriphClockCmd+0x38>)
 8000c86:	69da      	ldr	r2, [r3, #28]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	4903      	ldr	r1, [pc, #12]	; (8000c9c <RCC_APB1PeriphClockCmd+0x38>)
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61cb      	str	r3, [r1, #28]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 8000caa:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <RCC_MCOConfig+0x1c>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	7013      	strb	r3, [r2, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	40021007 	.word	0x40021007

08000cc0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	881b      	ldrh	r3, [r3, #0]
 8000cd2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	4a2e      	ldr	r2, [pc, #184]	; (8000d90 <TIM_TimeBaseInit+0xd0>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d013      	beq.n	8000d04 <TIM_TimeBaseInit+0x44>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a2d      	ldr	r2, [pc, #180]	; (8000d94 <TIM_TimeBaseInit+0xd4>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d00f      	beq.n	8000d04 <TIM_TimeBaseInit+0x44>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cea:	d00b      	beq.n	8000d04 <TIM_TimeBaseInit+0x44>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a2a      	ldr	r2, [pc, #168]	; (8000d98 <TIM_TimeBaseInit+0xd8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d007      	beq.n	8000d04 <TIM_TimeBaseInit+0x44>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <TIM_TimeBaseInit+0xdc>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d003      	beq.n	8000d04 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a28      	ldr	r2, [pc, #160]	; (8000da0 <TIM_TimeBaseInit+0xe0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d108      	bne.n	8000d16 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000d04:	89fb      	ldrh	r3, [r7, #14]
 8000d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d0a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	885a      	ldrh	r2, [r3, #2]
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <TIM_TimeBaseInit+0xe4>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d00c      	beq.n	8000d38 <TIM_TimeBaseInit+0x78>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a21      	ldr	r2, [pc, #132]	; (8000da8 <TIM_TimeBaseInit+0xe8>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d008      	beq.n	8000d38 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000d26:	89fb      	ldrh	r3, [r7, #14]
 8000d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d2c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	88da      	ldrh	r2, [r3, #6]
 8000d32:	89fb      	ldrh	r3, [r7, #14]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	89fa      	ldrh	r2, [r7, #14]
 8000d3c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	889a      	ldrh	r2, [r3, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	881a      	ldrh	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a0f      	ldr	r2, [pc, #60]	; (8000d90 <TIM_TimeBaseInit+0xd0>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00f      	beq.n	8000d76 <TIM_TimeBaseInit+0xb6>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a0e      	ldr	r2, [pc, #56]	; (8000d94 <TIM_TimeBaseInit+0xd4>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d00b      	beq.n	8000d76 <TIM_TimeBaseInit+0xb6>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a12      	ldr	r2, [pc, #72]	; (8000dac <TIM_TimeBaseInit+0xec>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d007      	beq.n	8000d76 <TIM_TimeBaseInit+0xb6>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <TIM_TimeBaseInit+0xf0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d003      	beq.n	8000d76 <TIM_TimeBaseInit+0xb6>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <TIM_TimeBaseInit+0xf4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d104      	bne.n	8000d80 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	7a1b      	ldrb	r3, [r3, #8]
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	829a      	strh	r2, [r3, #20]
}
 8000d86:	bf00      	nop
 8000d88:	3714      	adds	r7, #20
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40012c00 	.word	0x40012c00
 8000d94:	40013400 	.word	0x40013400
 8000d98:	40000400 	.word	0x40000400
 8000d9c:	40000800 	.word	0x40000800
 8000da0:	40000c00 	.word	0x40000c00
 8000da4:	40001000 	.word	0x40001000
 8000da8:	40001400 	.word	0x40001400
 8000dac:	40014000 	.word	0x40014000
 8000db0:	40014400 	.word	0x40014400
 8000db4:	40014800 	.word	0x40014800

08000db8 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	817b      	strh	r3, [r7, #10]
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	81fb      	strh	r3, [r7, #14]
 8000dca:	2300      	movs	r3, #0
 8000dcc:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	8c1b      	ldrh	r3, [r3, #32]
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	8c1b      	ldrh	r3, [r3, #32]
 8000de2:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	889b      	ldrh	r3, [r3, #4]
 8000de8:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	8b9b      	ldrh	r3, [r3, #28]
 8000dee:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8000df0:	897b      	ldrh	r3, [r7, #10]
 8000df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000df6:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8000df8:	897b      	ldrh	r3, [r7, #10]
 8000dfa:	f023 0303 	bic.w	r3, r3, #3
 8000dfe:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	881a      	ldrh	r2, [r3, #0]
 8000e04:	897b      	ldrh	r3, [r7, #10]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000e0a:	89fb      	ldrh	r3, [r7, #14]
 8000e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e10:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	891b      	ldrh	r3, [r3, #8]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b29a      	uxth	r2, r3
 8000e1a:	89fb      	ldrh	r3, [r7, #14]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	885b      	ldrh	r3, [r3, #2]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b29a      	uxth	r2, r3
 8000e28:	89fb      	ldrh	r3, [r7, #14]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a22      	ldr	r2, [pc, #136]	; (8000ebc <TIM_OC3Init+0x104>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d003      	beq.n	8000e3e <TIM_OC3Init+0x86>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <TIM_OC3Init+0x108>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d12b      	bne.n	8000e96 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8000e3e:	89fb      	ldrh	r3, [r7, #14]
 8000e40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000e44:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	895b      	ldrh	r3, [r3, #10]
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	89fb      	ldrh	r3, [r7, #14]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e5a:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	889b      	ldrh	r3, [r3, #4]
 8000e60:	021b      	lsls	r3, r3, #8
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	89fb      	ldrh	r3, [r7, #14]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8000e6a:	89bb      	ldrh	r3, [r7, #12]
 8000e6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e70:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8000e72:	89bb      	ldrh	r3, [r7, #12]
 8000e74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e78:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	899b      	ldrh	r3, [r3, #12]
 8000e7e:	011b      	lsls	r3, r3, #4
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	89bb      	ldrh	r3, [r7, #12]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	89db      	ldrh	r3, [r3, #14]
 8000e8c:	011b      	lsls	r3, r3, #4
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	89bb      	ldrh	r3, [r7, #12]
 8000e92:	4313      	orrs	r3, r2
 8000e94:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	89ba      	ldrh	r2, [r7, #12]
 8000e9a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	897a      	ldrh	r2, [r7, #10]
 8000ea0:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	88da      	ldrh	r2, [r3, #6]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	89fa      	ldrh	r2, [r7, #14]
 8000eae:	841a      	strh	r2, [r3, #32]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bc80      	pop	{r7}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40012c00 	.word	0x40012c00
 8000ec0:	40013400 	.word	0x40013400

08000ec4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	460b      	mov	r3, r1
 8000ece:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ed0:	78fb      	ldrb	r3, [r7, #3]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d008      	beq.n	8000ee8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	881b      	ldrh	r3, [r3, #0]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000ee6:	e007      	b.n	8000ef8 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	881b      	ldrh	r3, [r3, #0]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	f023 0301 	bic.w	r3, r3, #1
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	801a      	strh	r2, [r3, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr

08000f02 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f0e:	78fb      	ldrb	r3, [r7, #3]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d008      	beq.n	8000f26 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
  }
}
 8000f24:	e007      	b.n	8000f36 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	801a      	strh	r2, [r3, #0]
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr

08000f40 <TIM_OC3PreloadConfig>:
  *     @arg TIM_OCPreload_Enable
  *     @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  tmpccmr2 = TIMx->CCMR2;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	8b9b      	ldrh	r3, [r3, #28]
 8000f54:	81fb      	strh	r3, [r7, #14]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000f56:	89fb      	ldrh	r3, [r7, #14]
 8000f58:	f023 0308 	bic.w	r3, r3, #8
 8000f5c:	81fb      	strh	r3, [r7, #14]
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000f5e:	89fa      	ldrh	r2, [r7, #14]
 8000f60:	887b      	ldrh	r3, [r7, #2]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	81fb      	strh	r3, [r7, #14]
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	89fa      	ldrh	r2, [r7, #14]
 8000f6a:	839a      	strh	r2, [r3, #28]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr

08000f76 <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 8000f76:	b480      	push	{r7}
 8000f78:	b083      	sub	sp, #12
 8000f7a:	af00      	add	r7, sp, #0
 8000f7c:	6078      	str	r0, [r7, #4]
 8000f7e:	460b      	mov	r3, r1
 8000f80:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	887a      	ldrh	r2, [r7, #2]
 8000f86:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000f9e:	b29b      	uxth	r3, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bc80      	pop	{r7}
 8000fa8:	4770      	bx	lr

08000faa <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8000fb6:	b29b      	uxth	r3, r3
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr

08000fc2 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b085      	sub	sp, #20
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	81bb      	strh	r3, [r7, #12]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	8a1b      	ldrh	r3, [r3, #16]
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	899b      	ldrh	r3, [r3, #12]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000ff2:	89bb      	ldrh	r3, [r7, #12]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d005      	beq.n	8001004 <TIM_GetITStatus+0x42>
 8000ff8:	897b      	ldrh	r3, [r7, #10]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d002      	beq.n	8001004 <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e001      	b.n	8001008 <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001004:	2300      	movs	r3, #0
 8001006:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001008:	7bfb      	ldrb	r3, [r7, #15]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3714      	adds	r7, #20
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	43db      	mvns	r3, r3
 8001024:	b29a      	uxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	821a      	strh	r2, [r3, #16]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0

  // SYS CLK Init 
  BSP_RCC_Init();
 8001038:	f7ff f8b8 	bl	80001ac <BSP_RCC_Init>

  /** Config SWJ Reamp 
    *   If using the PA15、PA14、PA13、PB4、PB3 for Remapping Pin, these Clock Must be Config before SWJ REMAP config Function!
    */
  sys_SWJ_REMAP_Config(SWJ_ENABLE);
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff f9e1 	bl	8000404 <sys_SWJ_REMAP_Config>

  //BSP_PWM_INPUT_Init();

  // BSP_Timer_Init();

  BSP_PWM_Init();
 8001042:	f7ff f8f3 	bl	800022c <BSP_PWM_Init>

  while (1)
 8001046:	e7fe      	b.n	8001046 <main+0x12>

08001048 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001058:	e7fe      	b.n	8001058 <HardFault_Handler+0x4>

0800105a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800105e:	e7fe      	b.n	800105e <MemManage_Handler+0x4>

08001060 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001064:	e7fe      	b.n	8001064 <BusFault_Handler+0x4>

08001066 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800106a:	e7fe      	b.n	800106a <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr

08001078 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800109c:	480d      	ldr	r0, [pc, #52]	; (80010d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800109e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010a0:	f7ff f9de 	bl	8000460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010a4:	480c      	ldr	r0, [pc, #48]	; (80010d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80010a6:	490d      	ldr	r1, [pc, #52]	; (80010dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <LoopForever+0xe>)
  movs r3, #0
 80010aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010ac:	e002      	b.n	80010b4 <LoopCopyDataInit>

080010ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010b2:	3304      	adds	r3, #4

080010b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010b8:	d3f9      	bcc.n	80010ae <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ba:	4a0a      	ldr	r2, [pc, #40]	; (80010e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010bc:	4c0a      	ldr	r4, [pc, #40]	; (80010e8 <LoopForever+0x16>)
  movs r3, #0
 80010be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c0:	e001      	b.n	80010c6 <LoopFillZerobss>

080010c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010c4:	3204      	adds	r2, #4

080010c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010c8:	d3fb      	bcc.n	80010c2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010ca:	f000 f811 	bl	80010f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ce:	f7ff ffb1 	bl	8001034 <main>

080010d2 <LoopForever>:

LoopForever:
  b LoopForever
 80010d2:	e7fe      	b.n	80010d2 <LoopForever>
  ldr   r0, =_estack
 80010d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010dc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80010e0:	08001158 	.word	0x08001158
  ldr r2, =_sbss
 80010e4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80010e8:	2000006c 	.word	0x2000006c

080010ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010ec:	e7fe      	b.n	80010ec <ADC1_2_IRQHandler>
	...

080010f0 <__libc_init_array>:
 80010f0:	b570      	push	{r4, r5, r6, lr}
 80010f2:	2600      	movs	r6, #0
 80010f4:	4d0c      	ldr	r5, [pc, #48]	; (8001128 <__libc_init_array+0x38>)
 80010f6:	4c0d      	ldr	r4, [pc, #52]	; (800112c <__libc_init_array+0x3c>)
 80010f8:	1b64      	subs	r4, r4, r5
 80010fa:	10a4      	asrs	r4, r4, #2
 80010fc:	42a6      	cmp	r6, r4
 80010fe:	d109      	bne.n	8001114 <__libc_init_array+0x24>
 8001100:	f000 f81a 	bl	8001138 <_init>
 8001104:	2600      	movs	r6, #0
 8001106:	4d0a      	ldr	r5, [pc, #40]	; (8001130 <__libc_init_array+0x40>)
 8001108:	4c0a      	ldr	r4, [pc, #40]	; (8001134 <__libc_init_array+0x44>)
 800110a:	1b64      	subs	r4, r4, r5
 800110c:	10a4      	asrs	r4, r4, #2
 800110e:	42a6      	cmp	r6, r4
 8001110:	d105      	bne.n	800111e <__libc_init_array+0x2e>
 8001112:	bd70      	pop	{r4, r5, r6, pc}
 8001114:	f855 3b04 	ldr.w	r3, [r5], #4
 8001118:	4798      	blx	r3
 800111a:	3601      	adds	r6, #1
 800111c:	e7ee      	b.n	80010fc <__libc_init_array+0xc>
 800111e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001122:	4798      	blx	r3
 8001124:	3601      	adds	r6, #1
 8001126:	e7f2      	b.n	800110e <__libc_init_array+0x1e>
 8001128:	08001150 	.word	0x08001150
 800112c:	08001150 	.word	0x08001150
 8001130:	08001150 	.word	0x08001150
 8001134:	08001154 	.word	0x08001154

08001138 <_init>:
 8001138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113a:	bf00      	nop
 800113c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800113e:	bc08      	pop	{r3}
 8001140:	469e      	mov	lr, r3
 8001142:	4770      	bx	lr

08001144 <_fini>:
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	bf00      	nop
 8001148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800114a:	bc08      	pop	{r3}
 800114c:	469e      	mov	lr, r3
 800114e:	4770      	bx	lr
