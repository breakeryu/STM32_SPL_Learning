
SPL_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ac4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08001bf4  08001bf4  00011bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bfc  08001bfc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bfc  08001bfc  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bfc  08001bfc  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bfc  08001bfc  00011bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c00  08001c00  00011c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08001c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  2000002c  08001c30  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08001c30  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000079ab  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019cc  00000000  00000000  00027a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  000293d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f8  00000000  00000000  00029cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c35  00000000  00000000  0002a4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ce2  00000000  00000000  0002e0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055392  00000000  00000000  00037ddf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008d171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002440  00000000  00000000  0008d1c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000002c 	.word	0x2000002c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001bdc 	.word	0x08001bdc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000030 	.word	0x20000030
 800016c:	08001bdc 	.word	0x08001bdc

08000170 <BSP_CAN_Init>:
#include "bsp_can.h"



void BSP_CAN_Init(CAN_TypeDef *CAN)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    BSP_CAN_ClkEn(CAN);
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f000 f80d 	bl	8000198 <BSP_CAN_ClkEn>
    BSP_CAN_IoCfg(CAN);
 800017e:	6878      	ldr	r0, [r7, #4]
 8000180:	f000 f820 	bl	80001c4 <BSP_CAN_IoCfg>
    BSP_CAN_IrqEn(CAN);
 8000184:	6878      	ldr	r0, [r7, #4]
 8000186:	f000 f843 	bl	8000210 <BSP_CAN_IrqEn>
    BSP_CAN_ModeCfg(CAN);
 800018a:	6878      	ldr	r0, [r7, #4]
 800018c:	f000 f856 	bl	800023c <BSP_CAN_ModeCfg>

}
 8000190:	bf00      	nop
 8000192:	3708      	adds	r7, #8
 8000194:	46bd      	mov	sp, r7
 8000196:	bd80      	pop	{r7, pc}

08000198 <BSP_CAN_ClkEn>:


void BSP_CAN_ClkEn(CAN_TypeDef *CAN)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b082      	sub	sp, #8
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)CAN)
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	4a07      	ldr	r2, [pc, #28]	; (80001c0 <BSP_CAN_ClkEn+0x28>)
 80001a4:	4293      	cmp	r3, r2
 80001a6:	d105      	bne.n	80001b4 <BSP_CAN_ClkEn+0x1c>
    {
    case (uint32_t)CAN1:
        {
            RCC_APB1PeriphClockCmd(RCC_APB1Periph_CAN1, ENABLE);
 80001a8:	2101      	movs	r1, #1
 80001aa:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80001ae:	f001 fbef 	bl	8001990 <RCC_APB1PeriphClockCmd>
        }
        break;
 80001b2:	e000      	b.n	80001b6 <BSP_CAN_ClkEn+0x1e>
        break;

#endif

    default:
        break;
 80001b4:	bf00      	nop
    }
}
 80001b6:	bf00      	nop
 80001b8:	3708      	adds	r7, #8
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bd80      	pop	{r7, pc}
 80001be:	bf00      	nop
 80001c0:	40006400 	.word	0x40006400

080001c4 <BSP_CAN_IoCfg>:

void BSP_CAN_IoCfg(CAN_TypeDef *CAN)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)CAN)
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	4a0e      	ldr	r2, [pc, #56]	; (8000208 <BSP_CAN_IoCfg+0x44>)
 80001d0:	4293      	cmp	r3, r2
 80001d2:	d113      	bne.n	80001fc <BSP_CAN_IoCfg+0x38>
#if defined     CAN_REMAP_CAN1_PB8_PB9  
        GPIO_PinRemapConfig(GPIO_Remap1_CAN1, ENABLE);
        BSP_GPIO_SetCfg(GPIOB, GPIO_Pin_8, GPIO_Speed_50MHz, GPIO_Mode_IPU);
        BSP_GPIO_SetCfg(GPIOB, GPIO_Pin_9, GPIO_Speed_50MHz, GPIO_Mode_AF_PP);
#elif defined   CAN_REMAP_CAN1_PA11_PA12
        GPIO_PinRemapConfig(GPIO_Remap1_CAN1, DISABLE);
 80001d4:	2100      	movs	r1, #0
 80001d6:	f44f 10ea 	mov.w	r0, #1916928	; 0x1d4000
 80001da:	f001 fa0b 	bl	80015f4 <GPIO_PinRemapConfig>
        BSP_GPIO_SetCfg(GPIOA, GPIO_Pin_11, GPIO_Speed_50MHz, GPIO_Mode_IPU);
 80001de:	2348      	movs	r3, #72	; 0x48
 80001e0:	2203      	movs	r2, #3
 80001e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001e6:	4809      	ldr	r0, [pc, #36]	; (800020c <BSP_CAN_IoCfg+0x48>)
 80001e8:	f000 f8ea 	bl	80003c0 <BSP_GPIO_SetCfg>
        BSP_GPIO_SetCfg(GPIOA, GPIO_Pin_12, GPIO_Speed_50MHz, GPIO_Mode_AF_PP);
 80001ec:	2318      	movs	r3, #24
 80001ee:	2203      	movs	r2, #3
 80001f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001f4:	4805      	ldr	r0, [pc, #20]	; (800020c <BSP_CAN_IoCfg+0x48>)
 80001f6:	f000 f8e3 	bl	80003c0 <BSP_GPIO_SetCfg>
        GPIO_PinRemapConfig(GPIO_Remap2_CAN1, ENABLE);
        BSP_GPIO_SetCfg(GPIOD, GPIO_Pin_0, GPIO_Speed_50MHz, GPIO_Mode_IPU);
        BSP_GPIO_SetCfg(GPIOD, GPIO_Pin_1, GPIO_Speed_50MHz, GPIO_Mode_AF_PP);
#endif
        }
        break;
 80001fa:	e000      	b.n	80001fe <BSP_CAN_IoCfg+0x3a>
        }
        break;
#endif

    default:
        break;
 80001fc:	bf00      	nop
    }
}
 80001fe:	bf00      	nop
 8000200:	3708      	adds	r7, #8
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	40006400 	.word	0x40006400
 800020c:	40010800 	.word	0x40010800

08000210 <BSP_CAN_IrqEn>:



void BSP_CAN_IrqEn(CAN_TypeDef *CAN)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)CAN)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	4a07      	ldr	r2, [pc, #28]	; (8000238 <BSP_CAN_IrqEn+0x28>)
 800021c:	4293      	cmp	r3, r2
 800021e:	d106      	bne.n	800022e <BSP_CAN_IrqEn+0x1e>
    {
    case (uint32_t)CAN1:
        {
            BSP_NVIC_Init(1,0,USB_LP_CAN1_RX0_IRQn,2);
 8000220:	2302      	movs	r3, #2
 8000222:	2214      	movs	r2, #20
 8000224:	2100      	movs	r1, #0
 8000226:	2001      	movs	r0, #1
 8000228:	f000 f8e7 	bl	80003fa <BSP_NVIC_Init>
        }
        break;
 800022c:	e000      	b.n	8000230 <BSP_CAN_IrqEn+0x20>
        }
        break;
#endif

    default:
        break;
 800022e:	bf00      	nop
    }
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40006400 	.word	0x40006400

0800023c <BSP_CAN_ModeCfg>:



void BSP_CAN_ModeCfg(CAN_TypeDef *CAN)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b08a      	sub	sp, #40	; 0x28
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
    CAN_InitTypeDef		CAN_InitStructure;
	CAN_FilterInitTypeDef	CAN_FilterInitStructure;

    switch ((uint32_t)CAN)
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	4a24      	ldr	r2, [pc, #144]	; (80002d8 <BSP_CAN_ModeCfg+0x9c>)
 8000248:	4293      	cmp	r3, r2
 800024a:	d140      	bne.n	80002ce <BSP_CAN_ModeCfg+0x92>
    {
    case (uint32_t)CAN1:
        {
            /* 配置CAN参数 */
            CAN_InitStructure.CAN_TTCM = DISABLE;	/* 禁止时间触发模式（不生成时间戳), T  */
 800024c:	2300      	movs	r3, #0
 800024e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
            CAN_InitStructure.CAN_ABOM = DISABLE;	/* 禁止自动总线关闭管理 */
 8000252:	2300      	movs	r3, #0
 8000254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CAN_InitStructure.CAN_AWUM = DISABLE;	/* 禁止自动唤醒模式 */
 8000258:	2300      	movs	r3, #0
 800025a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            CAN_InitStructure.CAN_NART = ENABLE;	/* 使能仲裁丢失或出错后的自动重传功能 */
 800025e:	2301      	movs	r3, #1
 8000260:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            CAN_InitStructure.CAN_RFLM = DISABLE;	/* 禁止接收FIFO加锁模式 */
 8000264:	2300      	movs	r3, #0
 8000266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            CAN_InitStructure.CAN_TXFP = DISABLE;	/* 禁止传输FIFO优先级 */
 800026a:	2300      	movs	r3, #0
 800026c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            CAN_InitStructure.CAN_Mode = CAN_Mode_Normal;	/* 设置CAN模式 */
 8000270:	2300      	movs	r3, #0
 8000272:	77bb      	strb	r3, [r7, #30]

            /* 配置CAN波特率 = 1MBps(36MHz/4/(1+3+5)) */
            CAN_InitStructure.CAN_SJW = CAN_SJW_1tq;
 8000274:	2300      	movs	r3, #0
 8000276:	77fb      	strb	r3, [r7, #31]
            CAN_InitStructure.CAN_BS1 = CAN_BS1_3tq;
 8000278:	2302      	movs	r3, #2
 800027a:	f887 3020 	strb.w	r3, [r7, #32]
            CAN_InitStructure.CAN_BS2 = CAN_BS2_5tq;
 800027e:	2304      	movs	r3, #4
 8000280:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            CAN_InitStructure.CAN_Prescaler = 4;
 8000284:	2304      	movs	r3, #4
 8000286:	83bb      	strh	r3, [r7, #28]
            CAN_Init(CAN1, &CAN_InitStructure);
 8000288:	f107 031c 	add.w	r3, r7, #28
 800028c:	4619      	mov	r1, r3
 800028e:	4812      	ldr	r0, [pc, #72]	; (80002d8 <BSP_CAN_ModeCfg+0x9c>)
 8000290:	f000 fd06 	bl	8000ca0 <CAN_Init>

            /* CAN过滤配置 */
            CAN_FilterInitStructure.CAN_FilterNumber = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	75bb      	strb	r3, [r7, #22]
            CAN_FilterInitStructure.CAN_FilterMode = CAN_FilterMode_IdMask;
 8000298:	2300      	movs	r3, #0
 800029a:	75fb      	strb	r3, [r7, #23]
            CAN_FilterInitStructure.CAN_FilterScale = CAN_FilterScale_32bit;
 800029c:	2301      	movs	r3, #1
 800029e:	763b      	strb	r3, [r7, #24]
            CAN_FilterInitStructure.CAN_FilterIdHigh = 0x0000;
 80002a0:	2300      	movs	r3, #0
 80002a2:	81bb      	strh	r3, [r7, #12]
            CAN_FilterInitStructure.CAN_FilterIdLow = 0x0000;
 80002a4:	2300      	movs	r3, #0
 80002a6:	81fb      	strh	r3, [r7, #14]
            CAN_FilterInitStructure.CAN_FilterMaskIdHigh = 0x0000;
 80002a8:	2300      	movs	r3, #0
 80002aa:	823b      	strh	r3, [r7, #16]
            CAN_FilterInitStructure.CAN_FilterMaskIdLow = 0x0000;
 80002ac:	2300      	movs	r3, #0
 80002ae:	827b      	strh	r3, [r7, #18]
            CAN_FilterInitStructure.CAN_FilterFIFOAssignment = CAN_Filter_FIFO0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	82bb      	strh	r3, [r7, #20]
            CAN_FilterInitStructure.CAN_FilterActivation = ENABLE;
 80002b4:	2301      	movs	r3, #1
 80002b6:	767b      	strb	r3, [r7, #25]
            CAN_FilterInit(&CAN_FilterInitStructure);
 80002b8:	f107 030c 	add.w	r3, r7, #12
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fdbf 	bl	8000e40 <CAN_FilterInit>

            /* 使能中断 */
            CAN_ITConfig(CAN1, CAN_IT_FMP0, ENABLE);	//使能FIFO0挂号中断
 80002c2:	2201      	movs	r2, #1
 80002c4:	2102      	movs	r1, #2
 80002c6:	4804      	ldr	r0, [pc, #16]	; (80002d8 <BSP_CAN_ModeCfg+0x9c>)
 80002c8:	f001 f88b 	bl	80013e2 <CAN_ITConfig>
        }
        break;
 80002cc:	e000      	b.n	80002d0 <BSP_CAN_ModeCfg+0x94>
        break;

#endif

    default:
        break;
 80002ce:	bf00      	nop
    }
}
 80002d0:	bf00      	nop
 80002d2:	3728      	adds	r7, #40	; 0x28
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40006400 	.word	0x40006400

080002dc <USB_LP_CAN_RX0_IRQHandler>:
  * @功	能	CAN1中断接收
  * @参	数	无
  * @返	回	无
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b086      	sub	sp, #24
 80002e0:	af00      	add	r7, sp, #0
	CanRxMsg RxMsg;

	/* 从FIFO中接收数据包 */
	CAN_Receive(CAN1, CAN_FIFO0, &RxMsg);
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	461a      	mov	r2, r3
 80002e6:	2100      	movs	r1, #0
 80002e8:	4803      	ldr	r0, [pc, #12]	; (80002f8 <USB_LP_CAN_RX0_IRQHandler+0x1c>)
 80002ea:	f000 ffbd 	bl	8001268 <CAN_Receive>
	
	/* 数据包传入协议层进行解析 */
	// canDispatch(&RxMsg);
}
 80002ee:	bf00      	nop
 80002f0:	3718      	adds	r7, #24
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40006400 	.word	0x40006400

080002fc <CAN1_Send_Msg>:
  *			len：要发送的数据长度
  * @返	回	0：发送成功
  *			其他：发送失败
  */
uint8_t CAN1_Send_Msg(uint8_t ID, uint8_t* msg, uint8_t len)
{	
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b088      	sub	sp, #32
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	6039      	str	r1, [r7, #0]
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
	uint8_t mbox;
	uint16_t i=0;
 800030c:	2300      	movs	r3, #0
 800030e:	83fb      	strh	r3, [r7, #30]
	CanTxMsg TxMessage;
	
	TxMessage.StdId=ID;	 	// 标准标识符为0
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	60bb      	str	r3, [r7, #8]
	TxMessage.ExtId=ID;	 	// 设置扩展标示符（29位）
 8000314:	79fb      	ldrb	r3, [r7, #7]
 8000316:	60fb      	str	r3, [r7, #12]
	TxMessage.IDE=0;		// 使用扩展标识符
 8000318:	2300      	movs	r3, #0
 800031a:	743b      	strb	r3, [r7, #16]
	TxMessage.RTR=0;		// 消息类型为数据帧，一帧8位
 800031c:	2300      	movs	r3, #0
 800031e:	747b      	strb	r3, [r7, #17]
	TxMessage.DLC=len;		// 数据长度
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	74bb      	strb	r3, [r7, #18]
	for(i=0;i<len;i++)		// 装载发送数据
 8000324:	2300      	movs	r3, #0
 8000326:	83fb      	strh	r3, [r7, #30]
 8000328:	e00b      	b.n	8000342 <CAN1_Send_Msg+0x46>
		TxMessage.Data[i]=msg[i];	
 800032a:	8bfb      	ldrh	r3, [r7, #30]
 800032c:	683a      	ldr	r2, [r7, #0]
 800032e:	441a      	add	r2, r3
 8000330:	8bfb      	ldrh	r3, [r7, #30]
 8000332:	7812      	ldrb	r2, [r2, #0]
 8000334:	3320      	adds	r3, #32
 8000336:	443b      	add	r3, r7
 8000338:	f803 2c0d 	strb.w	r2, [r3, #-13]
	for(i=0;i<len;i++)		// 装载发送数据
 800033c:	8bfb      	ldrh	r3, [r7, #30]
 800033e:	3301      	adds	r3, #1
 8000340:	83fb      	strh	r3, [r7, #30]
 8000342:	79bb      	ldrb	r3, [r7, #6]
 8000344:	b29b      	uxth	r3, r3
 8000346:	8bfa      	ldrh	r2, [r7, #30]
 8000348:	429a      	cmp	r2, r3
 800034a:	d3ee      	bcc.n	800032a <CAN1_Send_Msg+0x2e>
		
	i=0xFFF;
 800034c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000350:	83fb      	strh	r3, [r7, #30]
	do
		mbox= CAN_Transmit(CAN1, &TxMessage);   		//发送数据，返回使用的邮箱
 8000352:	f107 0308 	add.w	r3, r7, #8
 8000356:	4619      	mov	r1, r3
 8000358:	4818      	ldr	r0, [pc, #96]	; (80003bc <CAN1_Send_Msg+0xc0>)
 800035a:	f000 fe33 	bl	8000fc4 <CAN_Transmit>
 800035e:	4603      	mov	r3, r0
 8000360:	777b      	strb	r3, [r7, #29]
	while((mbox == CAN_TxStatus_NoMailBox) && (i--));	//若邮箱已满，则超时重发
 8000362:	7f7b      	ldrb	r3, [r7, #29]
 8000364:	2b04      	cmp	r3, #4
 8000366:	d104      	bne.n	8000372 <CAN1_Send_Msg+0x76>
 8000368:	8bfb      	ldrh	r3, [r7, #30]
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	83fa      	strh	r2, [r7, #30]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d1ef      	bne.n	8000352 <CAN1_Send_Msg+0x56>
	
	if(mbox == CAN_TxStatus_NoMailBox)	return 2;		//邮箱始终满载，发送失败
 8000372:	7f7b      	ldrb	r3, [r7, #29]
 8000374:	2b04      	cmp	r3, #4
 8000376:	d101      	bne.n	800037c <CAN1_Send_Msg+0x80>
 8000378:	2302      	movs	r3, #2
 800037a:	e01a      	b.n	80003b2 <CAN1_Send_Msg+0xb6>
	
	i = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	83fb      	strh	r3, [r7, #30]
	while((CAN_TransmitStatus(CAN1, mbox)==CAN_TxStatus_Failed)&&(i<0XFFF))	i++;//等待发送结束
 8000380:	e002      	b.n	8000388 <CAN1_Send_Msg+0x8c>
 8000382:	8bfb      	ldrh	r3, [r7, #30]
 8000384:	3301      	adds	r3, #1
 8000386:	83fb      	strh	r3, [r7, #30]
 8000388:	7f7b      	ldrb	r3, [r7, #29]
 800038a:	4619      	mov	r1, r3
 800038c:	480b      	ldr	r0, [pc, #44]	; (80003bc <CAN1_Send_Msg+0xc0>)
 800038e:	f000 fee9 	bl	8001164 <CAN_TransmitStatus>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d104      	bne.n	80003a2 <CAN1_Send_Msg+0xa6>
 8000398:	8bfb      	ldrh	r3, [r7, #30]
 800039a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800039e:	4293      	cmp	r3, r2
 80003a0:	d9ef      	bls.n	8000382 <CAN1_Send_Msg+0x86>
	if(i>=0XFFF)	return 1;	//发送超时返回
 80003a2:	8bfb      	ldrh	r3, [r7, #30]
 80003a4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d901      	bls.n	80003b0 <CAN1_Send_Msg+0xb4>
 80003ac:	2301      	movs	r3, #1
 80003ae:	e000      	b.n	80003b2 <CAN1_Send_Msg+0xb6>
	return 0;		
 80003b0:	2300      	movs	r3, #0
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3720      	adds	r7, #32
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40006400 	.word	0x40006400

080003c0 <BSP_GPIO_SetCfg>:
  *     @arg GPIO_Speed_2MHz
  *     @arg GPIO_Speed_50MHz
  * @retval None
  */
void BSP_GPIO_SetCfg(GPIO_TypeDef *gp, uint16_t index,GPIOSpeed_TypeDef speed, GPIOMode_TypeDef mode)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
 80003c8:	4608      	mov	r0, r1
 80003ca:	4611      	mov	r1, r2
 80003cc:	461a      	mov	r2, r3
 80003ce:	4603      	mov	r3, r0
 80003d0:	807b      	strh	r3, [r7, #2]
 80003d2:	460b      	mov	r3, r1
 80003d4:	707b      	strb	r3, [r7, #1]
 80003d6:	4613      	mov	r3, r2
 80003d8:	703b      	strb	r3, [r7, #0]
    GPIO_InitTypeDef GPIO_InitStructure;

    GPIO_InitStructure.GPIO_Pin = index;
 80003da:	887b      	ldrh	r3, [r7, #2]
 80003dc:	81bb      	strh	r3, [r7, #12]
    GPIO_InitStructure.GPIO_Speed = speed;
 80003de:	787b      	ldrb	r3, [r7, #1]
 80003e0:	73bb      	strb	r3, [r7, #14]
    GPIO_InitStructure.GPIO_Mode = mode;
 80003e2:	783b      	ldrb	r3, [r7, #0]
 80003e4:	73fb      	strb	r3, [r7, #15]
    GPIO_Init(gp, &GPIO_InitStructure);
 80003e6:	f107 030c 	add.w	r3, r7, #12
 80003ea:	4619      	mov	r1, r3
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f001 f815 	bl	800141c <GPIO_Init>

}
 80003f2:	bf00      	nop
 80003f4:	3710      	adds	r7, #16
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}

080003fa <BSP_NVIC_Init>:
  * subprio：低优先级
  * channel：IRQ通道
  * group：中断组
 **********************************************************************************/
void BSP_NVIC_Init(uint8_t preprio, uint8_t subprio, uint8_t channel, uint32_t group)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b084      	sub	sp, #16
 80003fe:	af00      	add	r7, sp, #0
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
 8000406:	460b      	mov	r3, r1
 8000408:	71bb      	strb	r3, [r7, #6]
 800040a:	4613      	mov	r3, r2
 800040c:	717b      	strb	r3, [r7, #5]
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_PriorityGroupConfig(group);
 800040e:	6838      	ldr	r0, [r7, #0]
 8000410:	f000 fbb6 	bl	8000b80 <NVIC_PriorityGroupConfig>
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = preprio;
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	737b      	strb	r3, [r7, #13]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = subprio;
 8000418:	79bb      	ldrb	r3, [r7, #6]
 800041a:	73bb      	strb	r3, [r7, #14]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800041c:	2301      	movs	r3, #1
 800041e:	73fb      	strb	r3, [r7, #15]
    NVIC_InitStructure.NVIC_IRQChannel = channel;
 8000420:	797b      	ldrb	r3, [r7, #5]
 8000422:	733b      	strb	r3, [r7, #12]

    NVIC_Init(&NVIC_InitStructure);
 8000424:	f107 030c 	add.w	r3, r7, #12
 8000428:	4618      	mov	r0, r3
 800042a:	f000 fbbb 	bl	8000ba4 <NVIC_Init>

}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <BSP_RCC_Init>:




void BSP_RCC_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	af00      	add	r7, sp, #0
  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  SystemInit();
 800043c:	f000 fa74 	bl	8000928 <SystemInit>

  /* Configure the System Peripheral clock prescalers */
  BSP_RCC_Periph_Clock_Init();
 8000440:	f000 f80c 	bl	800045c <BSP_RCC_Periph_Clock_Init>

  //Update SystemCoreClock variable according to Clock Register Values
  SystemCoreClockUpdate();
 8000444:	f000 faa4 	bl	8000990 <SystemCoreClockUpdate>

  /* This function fills the RCC_ClockFreq structure with the current
  frequencies of different on chip clocks (for debug purpose) */
  RCC_GetClocksFreq(&RCC_ClockFreq);
 8000448:	4803      	ldr	r0, [pc, #12]	; (8000458 <BSP_RCC_Init+0x20>)
 800044a:	f001 f9af 	bl	80017ac <RCC_GetClocksFreq>

  /* NVIC configuration ------------------------------------------------------*/
  //BSP_RCC_NVIC_Configuration();

  delay_init(72);
 800044e:	2048      	movs	r0, #72	; 0x48
 8000450:	f000 f9b4 	bl	80007bc <delay_init>

  // _mcu_rev_id = DBGMCU_GetREVID();
  // _mcu_dev_id = DBGMCU_GetDEVID();

}
 8000454:	bf00      	nop
 8000456:	bd80      	pop	{r7, pc}
 8000458:	20000048 	.word	0x20000048

0800045c <BSP_RCC_Periph_Clock_Init>:


void BSP_RCC_Periph_Clock_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0



  //ADC CLK Prescaler, ADC CLK = 72 / 6 = 12 Mhz
  RCC_ADCCLKConfig(RCC_PCLK2_Div6);
 8000460:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000464:	f001 f944 	bl	80016f0 <RCC_ADCCLKConfig>
  //USB OTG CLK FS Prescaler, when PLL = 72Mhz, OTGFSPRE = 0
  RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
 8000468:	2000      	movs	r0, #0
 800046a:	f001 f933 	bl	80016d4 <RCC_USBCLKConfig>
  //MCO 
  RCC_MCOConfig(RCC_MCO_NoClock);
 800046e:	2000      	movs	r0, #0
 8000470:	f001 faac 	bl	80019cc <RCC_MCOConfig>


  //Clear Clock interrupt register
  RCC->CIR = 0;
 8000474:	4b0f      	ldr	r3, [pc, #60]	; (80004b4 <BSP_RCC_Periph_Clock_Init+0x58>)
 8000476:	2200      	movs	r2, #0
 8000478:	609a      	str	r2, [r3, #8]

  //Reset APB2 and APB1 Peripheral
  RCC->APB2RSTR = 0;
 800047a:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <BSP_RCC_Periph_Clock_Init+0x58>)
 800047c:	2200      	movs	r2, #0
 800047e:	60da      	str	r2, [r3, #12]
  RCC->APB1RSTR = 0;
 8000480:	4b0c      	ldr	r3, [pc, #48]	; (80004b4 <BSP_RCC_Periph_Clock_Init+0x58>)
 8000482:	2200      	movs	r2, #0
 8000484:	611a      	str	r2, [r3, #16]

  //AHB Peripheral CLK Enable
  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SRAM  | RCC_AHBPeriph_FLITF , ENABLE);
 8000486:	2101      	movs	r1, #1
 8000488:	2014      	movs	r0, #20
 800048a:	f001 fa45 	bl	8001918 <RCC_AHBPeriphClockCmd>
  

  //APB2 Peripheral CLK Enable
  RCC_APB2PeriphClockCmd( RCC_APB2Periph_AFIO | RCC_APB2Periph_GPIOA  |
 800048e:	2101      	movs	r1, #1
 8000490:	203d      	movs	r0, #61	; 0x3d
 8000492:	f001 fa5f 	bl	8001954 <RCC_APB2PeriphClockCmd>
                          RCC_APB2Periph_GPIOB  | RCC_APB2Periph_GPIOC |
                          RCC_APB2Periph_GPIOD,
                        ENABLE);

  //APB1 Peripheral CLK Enable
  RCC->APB1ENR = 0;
 8000496:	4b07      	ldr	r3, [pc, #28]	; (80004b4 <BSP_RCC_Periph_Clock_Init+0x58>)
 8000498:	2200      	movs	r2, #0
 800049a:	61da      	str	r2, [r3, #28]
  
  //RTC CLK
  RCC_LSEConfig(RCC_LSE_ON);
 800049c:	2001      	movs	r0, #1
 800049e:	f001 f943 	bl	8001728 <RCC_LSEConfig>
  RCC_RTCCLKConfig(RCC_RTCCLKSource_LSI);
 80004a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80004a6:	f001 f95f 	bl	8001768 <RCC_RTCCLKConfig>
  RCC_RTCCLKCmd(ENABLE);
 80004aa:	2001      	movs	r0, #1
 80004ac:	f001 f96e 	bl	800178c <RCC_RTCCLKCmd>




}
 80004b0:	bf00      	nop
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000

080004b8 <TIM4_IRQHandler>:
  * @brief  This function handles TIM4 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM4_IRQHandler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  if (TIM_GetITStatus(TIM4, TIM_IT_CC1) != RESET)
 80004bc:	2102      	movs	r1, #2
 80004be:	4815      	ldr	r0, [pc, #84]	; (8000514 <TIM4_IRQHandler+0x5c>)
 80004c0:	f001 faba 	bl	8001a38 <TIM_GetITStatus>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d021      	beq.n	800050e <TIM4_IRQHandler+0x56>
  {
    TIM_ClearITPendingBit(TIM4, TIM_IT_CC1);
 80004ca:	2102      	movs	r1, #2
 80004cc:	4811      	ldr	r0, [pc, #68]	; (8000514 <TIM4_IRQHandler+0x5c>)
 80004ce:	f001 fadc 	bl	8001a8a <TIM_ClearITPendingBit>

    /* Pin PC.06 toggling with frequency = 500 Hz */
    GPIO_WriteBit(GPIOB, GPIO_Pin_6, (BitAction)(1 - GPIO_ReadOutputDataBit(GPIOB, GPIO_Pin_6)));
 80004d2:	2140      	movs	r1, #64	; 0x40
 80004d4:	4810      	ldr	r0, [pc, #64]	; (8000518 <TIM4_IRQHandler+0x60>)
 80004d6:	f001 f85d 	bl	8001594 <GPIO_ReadOutputDataBit>
 80004da:	4603      	mov	r3, r0
 80004dc:	f1c3 0301 	rsb	r3, r3, #1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	461a      	mov	r2, r3
 80004e4:	2140      	movs	r1, #64	; 0x40
 80004e6:	480c      	ldr	r0, [pc, #48]	; (8000518 <TIM4_IRQHandler+0x60>)
 80004e8:	f001 f86d 	bl	80015c6 <GPIO_WriteBit>

    
    capture = TIM_GetCapture1(TIM4);
 80004ec:	4809      	ldr	r0, [pc, #36]	; (8000514 <TIM4_IRQHandler+0x5c>)
 80004ee:	f001 fa8b 	bl	8001a08 <TIM_GetCapture1>
 80004f2:	4603      	mov	r3, r0
 80004f4:	461a      	mov	r2, r3
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <TIM4_IRQHandler+0x64>)
 80004f8:	801a      	strh	r2, [r3, #0]
    TIM_SetCompare1(TIM4, capture + CCR1_Val);
 80004fa:	4b08      	ldr	r3, [pc, #32]	; (800051c <TIM4_IRQHandler+0x64>)
 80004fc:	881a      	ldrh	r2, [r3, #0]
 80004fe:	4b08      	ldr	r3, [pc, #32]	; (8000520 <TIM4_IRQHandler+0x68>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	4413      	add	r3, r2
 8000504:	b29b      	uxth	r3, r3
 8000506:	4619      	mov	r1, r3
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <TIM4_IRQHandler+0x5c>)
 800050a:	f001 fa6f 	bl	80019ec <TIM_SetCompare1>
  }

}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40000800 	.word	0x40000800
 8000518:	40010c00 	.word	0x40010c00
 800051c:	2000005c 	.word	0x2000005c
 8000520:	20000000 	.word	0x20000000

08000524 <TIM5_IRQHandler>:
  * @brief  This function handles TIM5 global interrupt request.
  * @param  None
  * @retval None
  */
void TIM5_IRQHandler(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
 /* Clear TIM3 Capture compare interrupt pending bit */
  TIM_ClearITPendingBit(TIM5, TIM_IT_CC1);
 8000528:	2102      	movs	r1, #2
 800052a:	4817      	ldr	r0, [pc, #92]	; (8000588 <TIM5_IRQHandler+0x64>)
 800052c:	f001 faad 	bl	8001a8a <TIM_ClearITPendingBit>

  /* Get the Input Capture value */
  IC1Value = TIM_GetCapture1(TIM5);
 8000530:	4815      	ldr	r0, [pc, #84]	; (8000588 <TIM5_IRQHandler+0x64>)
 8000532:	f001 fa69 	bl	8001a08 <TIM_GetCapture1>
 8000536:	4603      	mov	r3, r0
 8000538:	461a      	mov	r2, r3
 800053a:	4b14      	ldr	r3, [pc, #80]	; (800058c <TIM5_IRQHandler+0x68>)
 800053c:	801a      	strh	r2, [r3, #0]

  if (IC1Value != 0)
 800053e:	4b13      	ldr	r3, [pc, #76]	; (800058c <TIM5_IRQHandler+0x68>)
 8000540:	881b      	ldrh	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d017      	beq.n	8000576 <TIM5_IRQHandler+0x52>
  {
    /* Duty cycle computation */
    DutyCycle = ( TIM_GetCapture2(TIM5) * 100) / IC1Value;
 8000546:	4810      	ldr	r0, [pc, #64]	; (8000588 <TIM5_IRQHandler+0x64>)
 8000548:	f001 fa6a 	bl	8001a20 <TIM_GetCapture2>
 800054c:	4603      	mov	r3, r0
 800054e:	461a      	mov	r2, r3
 8000550:	2364      	movs	r3, #100	; 0x64
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	4a0d      	ldr	r2, [pc, #52]	; (800058c <TIM5_IRQHandler+0x68>)
 8000558:	8812      	ldrh	r2, [r2, #0]
 800055a:	fb93 f3f2 	sdiv	r3, r3, r2
 800055e:	b29a      	uxth	r2, r3
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <TIM5_IRQHandler+0x6c>)
 8000562:	801a      	strh	r2, [r3, #0]

    /* Frequency computation */
    Frequency = SystemCoreClock / IC1Value;
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <TIM5_IRQHandler+0x70>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a08      	ldr	r2, [pc, #32]	; (800058c <TIM5_IRQHandler+0x68>)
 800056a:	8812      	ldrh	r2, [r2, #0]
 800056c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000570:	4a09      	ldr	r2, [pc, #36]	; (8000598 <TIM5_IRQHandler+0x74>)
 8000572:	6013      	str	r3, [r2, #0]
  {
    DutyCycle = 0;
    Frequency = 0;
  }

}
 8000574:	e005      	b.n	8000582 <TIM5_IRQHandler+0x5e>
    DutyCycle = 0;
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <TIM5_IRQHandler+0x6c>)
 8000578:	2200      	movs	r2, #0
 800057a:	801a      	strh	r2, [r3, #0]
    Frequency = 0;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <TIM5_IRQHandler+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40000c00 	.word	0x40000c00
 800058c:	2000005e 	.word	0x2000005e
 8000590:	20000060 	.word	0x20000060
 8000594:	20000004 	.word	0x20000004
 8000598:	20000064 	.word	0x20000064

0800059c <USART1_IrqRxCallBack>:

/**********************************************************************************
  * USART1接收中断函数
 **********************************************************************************/
void __attribute((weak)) USART1_IrqRxCallBack(uint16_t data)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]

}
 80005a6:	bf00      	nop
 80005a8:	370c      	adds	r7, #12
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bc80      	pop	{r7}
 80005ae:	4770      	bx	lr

080005b0 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	uint32_t st,cr;

	st = USART1->SR;
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <USART1_IRQHandler+0x5c>)
 80005b8:	881b      	ldrh	r3, [r3, #0]
 80005ba:	b29b      	uxth	r3, r3
 80005bc:	607b      	str	r3, [r7, #4]
	cr = USART1->CR1;
 80005be:	4b13      	ldr	r3, [pc, #76]	; (800060c <USART1_IRQHandler+0x5c>)
 80005c0:	899b      	ldrh	r3, [r3, #12]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	603b      	str	r3, [r7, #0]

	if(st & USART_FLAG_RXNE)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f003 0320 	and.w	r3, r3, #32
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d019      	beq.n	8000604 <USART1_IRQHandler+0x54>
	{
		if(cr & USART_WordLength_9b)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d008      	beq.n	80005ec <USART1_IRQHandler+0x3c>
		{
			USART1_valRx = (uint16_t)(USART1->DR & 0X1FF);
 80005da:	4b0c      	ldr	r3, [pc, #48]	; (800060c <USART1_IRQHandler+0x5c>)
 80005dc:	889b      	ldrh	r3, [r3, #4]
 80005de:	b29b      	uxth	r3, r3
 80005e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <USART1_IRQHandler+0x60>)
 80005e8:	801a      	strh	r2, [r3, #0]
 80005ea:	e006      	b.n	80005fa <USART1_IRQHandler+0x4a>
		}
		else
		{
			USART1_valRx = (uint16_t)(USART1->DR & 0XFF);
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <USART1_IRQHandler+0x5c>)
 80005ee:	889b      	ldrh	r3, [r3, #4]
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <USART1_IRQHandler+0x60>)
 80005f8:	801a      	strh	r2, [r3, #0]
		}

		USART1_IrqRxCallBack(USART1_valRx);
 80005fa:	4b05      	ldr	r3, [pc, #20]	; (8000610 <USART1_IRQHandler+0x60>)
 80005fc:	881b      	ldrh	r3, [r3, #0]
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff ffcc 	bl	800059c <USART1_IrqRxCallBack>
	}
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40013800 	.word	0x40013800
 8000610:	20000068 	.word	0x20000068

08000614 <USART2_IrqCallBack>:

/**********************************************************************************
  * USART2接收中断函数
 **********************************************************************************/
void __attribute((weak)) USART2_IrqCallBack(uint16_t data)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	80fb      	strh	r3, [r7, #6]

}
 800061e:	bf00      	nop
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	bc80      	pop	{r7}
 8000626:	4770      	bx	lr

08000628 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	if(USART2->CR1 & USART_WordLength_9b)
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <USART2_IRQHandler+0x40>)
 800062e:	899b      	ldrh	r3, [r3, #12]
 8000630:	b29b      	uxth	r3, r3
 8000632:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000636:	2b00      	cmp	r3, #0
 8000638:	d008      	beq.n	800064c <USART2_IRQHandler+0x24>
	{
		USART2_valRx = (uint16_t)(USART2->DR & 0X1FF);
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <USART2_IRQHandler+0x40>)
 800063c:	889b      	ldrh	r3, [r3, #4]
 800063e:	b29b      	uxth	r3, r3
 8000640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b09      	ldr	r3, [pc, #36]	; (800066c <USART2_IRQHandler+0x44>)
 8000648:	801a      	strh	r2, [r3, #0]
 800064a:	e006      	b.n	800065a <USART2_IRQHandler+0x32>
	}
	else
	{
		USART2_valRx = (uint16_t)(USART2->DR & 0XFF);
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <USART2_IRQHandler+0x40>)
 800064e:	889b      	ldrh	r3, [r3, #4]
 8000650:	b29b      	uxth	r3, r3
 8000652:	b2db      	uxtb	r3, r3
 8000654:	b29a      	uxth	r2, r3
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <USART2_IRQHandler+0x44>)
 8000658:	801a      	strh	r2, [r3, #0]
	}

	USART2_IrqCallBack(USART2_valRx);
 800065a:	4b04      	ldr	r3, [pc, #16]	; (800066c <USART2_IRQHandler+0x44>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff ffd8 	bl	8000614 <USART2_IrqCallBack>
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40004400 	.word	0x40004400
 800066c:	2000006a 	.word	0x2000006a

08000670 <USART3_IrqCallBack>:

/**********************************************************************************
  * USART3接收中断函数
 **********************************************************************************/
void __attribute((weak)) USART3_IrqCallBack(uint16_t data)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	4603      	mov	r3, r0
 8000678:	80fb      	strh	r3, [r7, #6]

}
 800067a:	bf00      	nop
 800067c:	370c      	adds	r7, #12
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	if(USART3->CR1 & USART_WordLength_9b)
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <USART3_IRQHandler+0x40>)
 800068a:	899b      	ldrh	r3, [r3, #12]
 800068c:	b29b      	uxth	r3, r3
 800068e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000692:	2b00      	cmp	r3, #0
 8000694:	d008      	beq.n	80006a8 <USART3_IRQHandler+0x24>
	{
		USART3_valRx = (uint16_t)(USART3->DR & 0X1FF);
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <USART3_IRQHandler+0x40>)
 8000698:	889b      	ldrh	r3, [r3, #4]
 800069a:	b29b      	uxth	r3, r3
 800069c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <USART3_IRQHandler+0x44>)
 80006a4:	801a      	strh	r2, [r3, #0]
 80006a6:	e006      	b.n	80006b6 <USART3_IRQHandler+0x32>
	}
	else
	{
		USART3_valRx = (uint16_t)(USART3->DR & 0XFF);
 80006a8:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <USART3_IRQHandler+0x40>)
 80006aa:	889b      	ldrh	r3, [r3, #4]
 80006ac:	b29b      	uxth	r3, r3
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <USART3_IRQHandler+0x44>)
 80006b4:	801a      	strh	r2, [r3, #0]
	}

	USART3_IrqCallBack(USART3_valRx);
 80006b6:	4b04      	ldr	r3, [pc, #16]	; (80006c8 <USART3_IRQHandler+0x44>)
 80006b8:	881b      	ldrh	r3, [r3, #0]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ffd8 	bl	8000670 <USART3_IrqCallBack>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	40004800 	.word	0x40004800
 80006c8:	2000006c 	.word	0x2000006c

080006cc <UART4_IrqRxCallBack>:

/**********************************************************************************
  * UART4接收中断函数
 **********************************************************************************/
void __attribute((weak)) UART4_IrqRxCallBack(uint16_t data)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]

}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <UART4_IRQHandler>:

void UART4_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint32_t st,cr;

	st = UART4->SR;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <UART4_IRQHandler+0x5c>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	b29b      	uxth	r3, r3
 80006ec:	607b      	str	r3, [r7, #4]
	cr = UART4->CR1;
 80006ee:	4b13      	ldr	r3, [pc, #76]	; (800073c <UART4_IRQHandler+0x5c>)
 80006f0:	899b      	ldrh	r3, [r3, #12]
 80006f2:	b29b      	uxth	r3, r3
 80006f4:	603b      	str	r3, [r7, #0]

	if(st & USART_FLAG_RXNE)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	f003 0320 	and.w	r3, r3, #32
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d019      	beq.n	8000734 <UART4_IRQHandler+0x54>
	{
		if(cr & USART_WordLength_9b)
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000706:	2b00      	cmp	r3, #0
 8000708:	d008      	beq.n	800071c <UART4_IRQHandler+0x3c>
		{
			UART4_valRx = (uint16_t)(UART4->DR & 0X1FF);
 800070a:	4b0c      	ldr	r3, [pc, #48]	; (800073c <UART4_IRQHandler+0x5c>)
 800070c:	889b      	ldrh	r3, [r3, #4]
 800070e:	b29b      	uxth	r3, r3
 8000710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000714:	b29a      	uxth	r2, r3
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <UART4_IRQHandler+0x60>)
 8000718:	801a      	strh	r2, [r3, #0]
 800071a:	e006      	b.n	800072a <UART4_IRQHandler+0x4a>
		}
		else
		{
			UART4_valRx = (uint16_t)(UART4->DR & 0XFF);
 800071c:	4b07      	ldr	r3, [pc, #28]	; (800073c <UART4_IRQHandler+0x5c>)
 800071e:	889b      	ldrh	r3, [r3, #4]
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	b29a      	uxth	r2, r3
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <UART4_IRQHandler+0x60>)
 8000728:	801a      	strh	r2, [r3, #0]
		}

		UART4_IrqRxCallBack(UART4_valRx);
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <UART4_IRQHandler+0x60>)
 800072c:	881b      	ldrh	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffcc 	bl	80006cc <UART4_IrqRxCallBack>
	}

}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40004c00 	.word	0x40004c00
 8000740:	2000006e 	.word	0x2000006e

08000744 <UART5_IrqRxCallBack>:

/**********************************************************************************
  * UART5接收中断函数
 **********************************************************************************/
void __attribute((weak)) UART5_IrqRxCallBack(uint16_t data)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	80fb      	strh	r3, [r7, #6]

}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <UART5_IRQHandler>:

void UART5_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
	uint32_t st,cr;

	st = UART5->SR;
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <UART5_IRQHandler+0x5c>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	b29b      	uxth	r3, r3
 8000764:	607b      	str	r3, [r7, #4]
	cr = UART5->CR1;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <UART5_IRQHandler+0x5c>)
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b29b      	uxth	r3, r3
 800076c:	603b      	str	r3, [r7, #0]

	if(st & USART_FLAG_RXNE)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f003 0320 	and.w	r3, r3, #32
 8000774:	2b00      	cmp	r3, #0
 8000776:	d019      	beq.n	80007ac <UART5_IRQHandler+0x54>
	{
		if(cr & USART_WordLength_9b)
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d008      	beq.n	8000794 <UART5_IRQHandler+0x3c>
		{
			UART5_valRx = (uint16_t)(UART5->DR & 0X1FF);
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <UART5_IRQHandler+0x5c>)
 8000784:	889b      	ldrh	r3, [r3, #4]
 8000786:	b29b      	uxth	r3, r3
 8000788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <UART5_IRQHandler+0x60>)
 8000790:	801a      	strh	r2, [r3, #0]
 8000792:	e006      	b.n	80007a2 <UART5_IRQHandler+0x4a>
		}
		else
		{
			UART5_valRx = (uint16_t)(UART5->DR & 0XFF);
 8000794:	4b07      	ldr	r3, [pc, #28]	; (80007b4 <UART5_IRQHandler+0x5c>)
 8000796:	889b      	ldrh	r3, [r3, #4]
 8000798:	b29b      	uxth	r3, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	b29a      	uxth	r2, r3
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <UART5_IRQHandler+0x60>)
 80007a0:	801a      	strh	r2, [r3, #0]
		}

		UART5_IrqRxCallBack(UART5_valRx);
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <UART5_IRQHandler+0x60>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffcc 	bl	8000744 <UART5_IrqRxCallBack>
	}

}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40005000 	.word	0x40005000
 80007b8:	20000070 	.word	0x20000070

080007bc <delay_init>:
//初始化延迟函数
//当使用OS的时候,此函数会初始化OS的时钟节拍
//SYSTICK的时钟固定为AHB时钟的1/8
//SYSCLK:系统时钟频率
void delay_init(u8 SYSCLK)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	71fb      	strb	r3, [r7, #7]
#if SYSTEM_SUPPORT_OS 						//如果需要支持OS.
	u32 reload;
#endif
 	SysTick_CLKSourceConfig(SysTick_CLKSource_HCLK_Div8); 
 80007c6:	f06f 0004 	mvn.w	r0, #4
 80007ca:	f000 fa4d 	bl	8000c68 <SysTick_CLKSourceConfig>
	fac_us=SYSCLK/8;						//不论是否使用OS,fac_us都需要使用
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	08db      	lsrs	r3, r3, #3
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <delay_init+0x3c>)
 80007d6:	701a      	strb	r2, [r3, #0]
	fac_ms=1000/delay_ostickspersec;		//代表OS可以延时的最少单位	   
	SysTick->CTRL|=SysTick_CTRL_TICKINT_Msk;   	//开启SYSTICK中断
	SysTick->LOAD=reload; 					//每1/delay_ostickspersec秒中断一次	
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk; 	//开启SYSTICK    
#else
	fac_ms=(u16)fac_us*1000;				//非OS下,代表每个ms需要的systick时钟数   
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <delay_init+0x3c>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	b29b      	uxth	r3, r3
 80007de:	461a      	mov	r2, r3
 80007e0:	0152      	lsls	r2, r2, #5
 80007e2:	1ad2      	subs	r2, r2, r3
 80007e4:	0092      	lsls	r2, r2, #2
 80007e6:	4413      	add	r3, r2
 80007e8:	00db      	lsls	r3, r3, #3
 80007ea:	b29a      	uxth	r2, r3
 80007ec:	4b03      	ldr	r3, [pc, #12]	; (80007fc <delay_init+0x40>)
 80007ee:	801a      	strh	r2, [r3, #0]
#endif
}								    
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000072 	.word	0x20000072
 80007fc:	20000074 	.word	0x20000074

08000800 <delay_xms>:
//SysTick->LOAD为24位寄存器,所以,最大延时为:
//nms<=0xffffff*8*1000/SYSCLK
//SYSCLK单位为Hz,nms单位为ms
//对168M条件下,nms<=798ms 
void delay_xms(u16 nms)
{	 		  	  
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	80fb      	strh	r3, [r7, #6]
	u32 temp;		   
	SysTick->LOAD=(u32)nms*fac_ms;			//时间加载(SysTick->LOAD为24bit)
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	4a15      	ldr	r2, [pc, #84]	; (8000864 <delay_xms+0x64>)
 800080e:	8812      	ldrh	r2, [r2, #0]
 8000810:	4611      	mov	r1, r2
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <delay_xms+0x68>)
 8000814:	fb01 f303 	mul.w	r3, r1, r3
 8000818:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           			//清空计数器
 800081a:	4b13      	ldr	r3, [pc, #76]	; (8000868 <delay_xms+0x68>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk ;          //开始倒数 
 8000820:	4b11      	ldr	r3, [pc, #68]	; (8000868 <delay_xms+0x68>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a10      	ldr	r2, [pc, #64]	; (8000868 <delay_xms+0x68>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 800082c:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <delay_xms+0x68>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	60fb      	str	r3, [r7, #12]
	}while((temp&0x01)&&!(temp&(1<<16)));	//等待时间到达   
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	2b00      	cmp	r3, #0
 800083a:	d004      	beq.n	8000846 <delay_xms+0x46>
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000842:	2b00      	cmp	r3, #0
 8000844:	d0f2      	beq.n	800082c <delay_xms+0x2c>
	SysTick->CTRL&=~SysTick_CTRL_ENABLE_Msk;       //关闭计数器
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <delay_xms+0x68>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <delay_xms+0x68>)
 800084c:	f023 0301 	bic.w	r3, r3, #1
 8000850:	6013      	str	r3, [r2, #0]
	SysTick->VAL =0X00;     		  		//清空计数器	  	    
 8000852:	4b05      	ldr	r3, [pc, #20]	; (8000868 <delay_xms+0x68>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
} 
 8000858:	bf00      	nop
 800085a:	3714      	adds	r7, #20
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000074 	.word	0x20000074
 8000868:	e000e010 	.word	0xe000e010

0800086c <delay_ms>:
//延时nms 
//nms:0~65535
void delay_ms(u16 nms)
{	 	 
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	4603      	mov	r3, r0
 8000874:	80fb      	strh	r3, [r7, #6]
	u8 repeat=nms/540;						//这里用540,是考虑到某些客户可能超频使用,
 8000876:	88fb      	ldrh	r3, [r7, #6]
 8000878:	4a13      	ldr	r2, [pc, #76]	; (80008c8 <delay_ms+0x5c>)
 800087a:	fba2 2303 	umull	r2, r3, r2, r3
 800087e:	0a5b      	lsrs	r3, r3, #9
 8000880:	b29b      	uxth	r3, r3
 8000882:	73fb      	strb	r3, [r7, #15]
											//比如超频到248M的时候,delay_xms最大只能延时541ms左右了
	u16 remain=nms%540;
 8000884:	88fb      	ldrh	r3, [r7, #6]
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <delay_ms+0x5c>)
 8000888:	fba2 1203 	umull	r1, r2, r2, r3
 800088c:	0a52      	lsrs	r2, r2, #9
 800088e:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8000892:	fb01 f202 	mul.w	r2, r1, r2
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	81bb      	strh	r3, [r7, #12]
	while(repeat)
 800089a:	e006      	b.n	80008aa <delay_ms+0x3e>
	{
		delay_xms(540);
 800089c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80008a0:	f7ff ffae 	bl	8000800 <delay_xms>
		repeat--;
 80008a4:	7bfb      	ldrb	r3, [r7, #15]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]
	while(repeat)
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1f5      	bne.n	800089c <delay_ms+0x30>
	}
	if(remain)delay_xms(remain);
 80008b0:	89bb      	ldrh	r3, [r7, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d003      	beq.n	80008be <delay_ms+0x52>
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ffa1 	bl	8000800 <delay_xms>
} 
 80008be:	bf00      	nop
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	f2b9d649 	.word	0xf2b9d649

080008cc <sys_SWJ_REMAP_Config>:
  *     @arg SWJ_NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  *     @arg SWJ_DISABLE: Full SWJ Disabled (JTAG-DP + SW-DP)
  * @retval None
  */
void sys_SWJ_REMAP_Config(uint8_t SWJ_REMAP)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]

    switch (SWJ_REMAP)
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	d81a      	bhi.n	8000912 <sys_SWJ_REMAP_Config+0x46>
 80008dc:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <sys_SWJ_REMAP_Config+0x18>)
 80008de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e2:	bf00      	nop
 80008e4:	08000913 	.word	0x08000913
 80008e8:	080008f5 	.word	0x080008f5
 80008ec:	080008ff 	.word	0x080008ff
 80008f0:	08000909 	.word	0x08000909
        /* Full SWJ Enable (JTAG-DP + SW-DP) */
        break;

    case SWJ_NONJTRST:
        /* Full SWJ Enabled (JTAG-DP + SW-DP) but without JTRST */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_NoJTRST, ENABLE);
 80008f4:	2101      	movs	r1, #1
 80008f6:	4809      	ldr	r0, [pc, #36]	; (800091c <sys_SWJ_REMAP_Config+0x50>)
 80008f8:	f000 fe7c 	bl	80015f4 <GPIO_PinRemapConfig>
        break;
 80008fc:	e00a      	b.n	8000914 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_NOJTAG:
        /* JTAG-DP Disabled and SW-DP Enabled */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);
 80008fe:	2101      	movs	r1, #1
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <sys_SWJ_REMAP_Config+0x54>)
 8000902:	f000 fe77 	bl	80015f4 <GPIO_PinRemapConfig>
    break;
 8000906:	e005      	b.n	8000914 <sys_SWJ_REMAP_Config+0x48>

    case SWJ_DISABLE:
        /* Full SWJ Disabled (JTAG-DP + SW-DP) */
        GPIO_PinRemapConfig(GPIO_Remap_SWJ_Disable, ENABLE);
 8000908:	2101      	movs	r1, #1
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <sys_SWJ_REMAP_Config+0x58>)
 800090c:	f000 fe72 	bl	80015f4 <GPIO_PinRemapConfig>
    break;
 8000910:	e000      	b.n	8000914 <sys_SWJ_REMAP_Config+0x48>

    default:
        break;
 8000912:	bf00      	nop
    }

}
 8000914:	bf00      	nop
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	00300100 	.word	0x00300100
 8000920:	00300200 	.word	0x00300200
 8000924:	00300400 	.word	0x00300400

08000928 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <SystemInit+0x5c>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <SystemInit+0x5c>)
 8000932:	f043 0301 	orr.w	r3, r3, #1
 8000936:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <SystemInit+0x5c>)
 800093a:	685a      	ldr	r2, [r3, #4]
 800093c:	4911      	ldr	r1, [pc, #68]	; (8000984 <SystemInit+0x5c>)
 800093e:	4b12      	ldr	r3, [pc, #72]	; (8000988 <SystemInit+0x60>)
 8000940:	4013      	ands	r3, r2
 8000942:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <SystemInit+0x5c>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <SystemInit+0x5c>)
 800094a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800094e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000952:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000954:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <SystemInit+0x5c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <SystemInit+0x5c>)
 800095a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800095e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <SystemInit+0x5c>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	4a07      	ldr	r2, [pc, #28]	; (8000984 <SystemInit+0x5c>)
 8000966:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800096a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 800096c:	4b05      	ldr	r3, [pc, #20]	; (8000984 <SystemInit+0x5c>)
 800096e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000972:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000974:	f000 f87e 	bl	8000a74 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <SystemInit+0x64>)
 800097a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800097e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40021000 	.word	0x40021000
 8000988:	f8ff0000 	.word	0xf8ff0000
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || (defined STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif /* STM32F10X_LD_VL or STM32F10X_MD_VL or STM32F10X_HD_VL */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80009a2:	4b2f      	ldr	r3, [pc, #188]	; (8000a60 <SystemCoreClockUpdate+0xd0>)
 80009a4:	685b      	ldr	r3, [r3, #4]
 80009a6:	f003 030c 	and.w	r3, r3, #12
 80009aa:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d011      	beq.n	80009d6 <SystemCoreClockUpdate+0x46>
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	2b08      	cmp	r3, #8
 80009b6:	d83a      	bhi.n	8000a2e <SystemCoreClockUpdate+0x9e>
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d003      	beq.n	80009c6 <SystemCoreClockUpdate+0x36>
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d004      	beq.n	80009ce <SystemCoreClockUpdate+0x3e>
 80009c4:	e033      	b.n	8000a2e <SystemCoreClockUpdate+0x9e>
  {
    case 0x00:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <SystemCoreClockUpdate+0xd4>)
 80009c8:	4a27      	ldr	r2, [pc, #156]	; (8000a68 <SystemCoreClockUpdate+0xd8>)
 80009ca:	601a      	str	r2, [r3, #0]
      break;
 80009cc:	e033      	b.n	8000a36 <SystemCoreClockUpdate+0xa6>
    case 0x04:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <SystemCoreClockUpdate+0xd4>)
 80009d0:	4a25      	ldr	r2, [pc, #148]	; (8000a68 <SystemCoreClockUpdate+0xd8>)
 80009d2:	601a      	str	r2, [r3, #0]
      break;
 80009d4:	e02f      	b.n	8000a36 <SystemCoreClockUpdate+0xa6>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80009d6:	4b22      	ldr	r3, [pc, #136]	; (8000a60 <SystemCoreClockUpdate+0xd0>)
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80009de:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <SystemCoreClockUpdate+0xd0>)
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009e8:	607b      	str	r3, [r7, #4]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80009ea:	68bb      	ldr	r3, [r7, #8]
 80009ec:	0c9b      	lsrs	r3, r3, #18
 80009ee:	3302      	adds	r3, #2
 80009f0:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d106      	bne.n	8000a06 <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4a1c      	ldr	r2, [pc, #112]	; (8000a6c <SystemCoreClockUpdate+0xdc>)
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <SystemCoreClockUpdate+0xd4>)
 8000a02:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8 ) + 2; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8000a04:	e017      	b.n	8000a36 <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000a06:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <SystemCoreClockUpdate+0xd0>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d006      	beq.n	8000a20 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1) * pllmull;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	4a15      	ldr	r2, [pc, #84]	; (8000a6c <SystemCoreClockUpdate+0xdc>)
 8000a16:	fb02 f303 	mul.w	r3, r2, r3
 8000a1a:	4a12      	ldr	r2, [pc, #72]	; (8000a64 <SystemCoreClockUpdate+0xd4>)
 8000a1c:	6013      	str	r3, [r2, #0]
      break;
 8000a1e:	e00a      	b.n	8000a36 <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <SystemCoreClockUpdate+0xd8>)
 8000a24:	fb02 f303 	mul.w	r3, r2, r3
 8000a28:	4a0e      	ldr	r2, [pc, #56]	; (8000a64 <SystemCoreClockUpdate+0xd4>)
 8000a2a:	6013      	str	r3, [r2, #0]
      break;
 8000a2c:	e003      	b.n	8000a36 <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <SystemCoreClockUpdate+0xd4>)
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <SystemCoreClockUpdate+0xd8>)
 8000a32:	601a      	str	r2, [r3, #0]
      break;
 8000a34:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <SystemCoreClockUpdate+0xd0>)
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	091b      	lsrs	r3, r3, #4
 8000a3c:	f003 030f 	and.w	r3, r3, #15
 8000a40:	4a0b      	ldr	r2, [pc, #44]	; (8000a70 <SystemCoreClockUpdate+0xe0>)
 8000a42:	5cd3      	ldrb	r3, [r2, r3]
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <SystemCoreClockUpdate+0xd4>)
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8000a52:	4a04      	ldr	r2, [pc, #16]	; (8000a64 <SystemCoreClockUpdate+0xd4>)
 8000a54:	6013      	str	r3, [r2, #0]
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	40021000 	.word	0x40021000
 8000a64:	20000004 	.word	0x20000004
 8000a68:	007a1200 	.word	0x007a1200
 8000a6c:	003d0900 	.word	0x003d0900
 8000a70:	20000008 	.word	0x20000008

08000a74 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000a78:	f000 f802 	bl	8000a80 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000a8e:	4b3a      	ldr	r3, [pc, #232]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a39      	ldr	r2, [pc, #228]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a98:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000a9a:	4b37      	ldr	r3, [pc, #220]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aa2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d103      	bne.n	8000ab8 <SetSysClockTo72+0x38>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ab6:	d1f0      	bne.n	8000a9a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ab8:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	e001      	b.n	8000ace <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d14b      	bne.n	8000b6c <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SetSysClockTo72+0xfc>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <SetSysClockTo72+0xfc>)
 8000ada:	f043 0310 	orr.w	r3, r3, #16
 8000ade:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SetSysClockTo72+0xfc>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a25      	ldr	r2, [pc, #148]	; (8000b7c <SetSysClockTo72+0xfc>)
 8000ae6:	f023 0307 	bic.w	r3, r3, #7
 8000aea:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000aec:	4b23      	ldr	r3, [pc, #140]	; (8000b7c <SetSysClockTo72+0xfc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <SetSysClockTo72+0xfc>)
 8000af2:	f043 0302 	orr.w	r3, r3, #2
 8000af6:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000afa:	4a1f      	ldr	r2, [pc, #124]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000b00:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b02:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a1a      	ldr	r2, [pc, #104]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b12:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000b14:	4b18      	ldr	r3, [pc, #96]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	4a17      	ldr	r2, [pc, #92]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b1a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000b1e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b26:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000b2a:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b36:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000b38:	bf00      	nop
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d0f9      	beq.n	8000b3a <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000b46:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b4c:	f023 0303 	bic.w	r3, r3, #3
 8000b50:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	4a08      	ldr	r2, [pc, #32]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b58:	f043 0302 	orr.w	r3, r3, #2
 8000b5c:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000b5e:	bf00      	nop
 8000b60:	4b05      	ldr	r3, [pc, #20]	; (8000b78 <SetSysClockTo72+0xf8>)
 8000b62:	685b      	ldr	r3, [r3, #4]
 8000b64:	f003 030c 	and.w	r3, r3, #12
 8000b68:	2b08      	cmp	r3, #8
 8000b6a:	d1f9      	bne.n	8000b60 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40022000 	.word	0x40022000

08000b80 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000b88:	4a05      	ldr	r2, [pc, #20]	; (8000ba0 <NVIC_PriorityGroupConfig+0x20>)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	60d3      	str	r3, [r2, #12]
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bc80      	pop	{r7}
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b087      	sub	sp, #28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	78db      	ldrb	r3, [r3, #3]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d03a      	beq.n	8000c36 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <NVIC_Init+0xbc>)
 8000bc2:	68db      	ldr	r3, [r3, #12]
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	0a1b      	lsrs	r3, r3, #8
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	f1c3 0304 	rsb	r3, r3, #4
 8000bd4:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	fa22 f303 	lsr.w	r3, r2, r3
 8000bde:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	785b      	ldrb	r3, [r3, #1]
 8000be4:	461a      	mov	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bec:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	789b      	ldrb	r3, [r3, #2]
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	697a      	ldr	r2, [r7, #20]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	011b      	lsls	r3, r3, #4
 8000c02:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000c04:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <NVIC_Init+0xc0>)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	6979      	ldr	r1, [r7, #20]
 8000c0c:	b2c9      	uxtb	r1, r1
 8000c0e:	4413      	add	r3, r2
 8000c10:	460a      	mov	r2, r1
 8000c12:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	781b      	ldrb	r3, [r3, #0]
 8000c1a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c1e:	4911      	ldr	r1, [pc, #68]	; (8000c64 <NVIC_Init+0xc0>)
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	7812      	ldrb	r2, [r2, #0]
 8000c24:	0952      	lsrs	r2, r2, #5
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c30:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000c34:	e00f      	b.n	8000c56 <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c3e:	4909      	ldr	r1, [pc, #36]	; (8000c64 <NVIC_Init+0xc0>)
 8000c40:	687a      	ldr	r2, [r7, #4]
 8000c42:	7812      	ldrb	r2, [r2, #0]
 8000c44:	0952      	lsrs	r2, r2, #5
 8000c46:	b2d2      	uxtb	r2, r2
 8000c48:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000c4e:	f100 0320 	add.w	r3, r0, #32
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c56:	bf00      	nop
 8000c58:	371c      	adds	r7, #28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	e000ed00 	.word	0xe000ed00
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <SysTick_CLKSourceConfig>:
  *     @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *     @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	2b04      	cmp	r3, #4
 8000c74:	d106      	bne.n	8000c84 <SysTick_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000c76:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <SysTick_CLKSourceConfig+0x34>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <SysTick_CLKSourceConfig+0x34>)
 8000c7c:	f043 0304 	orr.w	r3, r3, #4
 8000c80:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
  }
}
 8000c82:	e005      	b.n	8000c90 <SysTick_CLKSourceConfig+0x28>
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SysTick_CLKSourceConfig+0x34>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <SysTick_CLKSourceConfig+0x34>)
 8000c8a:	f023 0304 	bic.w	r3, r3, #4
 8000c8e:	6013      	str	r3, [r2, #0]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <CAN_Init>:
  *                         CAN peripheral.
  * @retval Constant indicates initialization succeed which will be 
  *         CAN_InitStatus_Failed or CAN_InitStatus_Success.
  */
uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	6039      	str	r1, [r7, #0]
  uint8_t InitStatus = CAN_InitStatus_Failed;
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
  uint32_t wait_ack = 0x00000000;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
  assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
  assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));

  /* Exit from sleep mode */
  CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f023 0202 	bic.w	r2, r3, #2
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	601a      	str	r2, [r3, #0]

  /* Request initialisation */
  CANx->MCR |= CAN_MCR_INRQ ;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f043 0201 	orr.w	r2, r3, #1
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]

  /* Wait the acknowledge */
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000cca:	e002      	b.n	8000cd2 <CAN_Init+0x32>
  {
    wait_ack++;
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	60bb      	str	r3, [r7, #8]
  while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d004      	beq.n	8000ce8 <CAN_Init+0x48>
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d1f1      	bne.n	8000ccc <CAN_Init+0x2c>
  }

  /* Check acknowledge */
  if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d002      	beq.n	8000cfa <CAN_Init+0x5a>
  {
    InitStatus = CAN_InitStatus_Failed;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]
 8000cf8:	e09c      	b.n	8000e34 <CAN_Init+0x194>
  }
  else 
  {
    /* Set the time triggered communication mode */
    if (CAN_InitStruct->CAN_TTCM == ENABLE)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	799b      	ldrb	r3, [r3, #6]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d106      	bne.n	8000d10 <CAN_Init+0x70>
    {
      CANx->MCR |= CAN_MCR_TTCM;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	e005      	b.n	8000d1c <CAN_Init+0x7c>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic bus-off management */
    if (CAN_InitStruct->CAN_ABOM == ENABLE)
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	79db      	ldrb	r3, [r3, #7]
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d106      	bne.n	8000d32 <CAN_Init+0x92>
    {
      CANx->MCR |= CAN_MCR_ABOM;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e005      	b.n	8000d3e <CAN_Init+0x9e>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	601a      	str	r2, [r3, #0]
    }

    /* Set the automatic wake-up mode */
    if (CAN_InitStruct->CAN_AWUM == ENABLE)
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	7a1b      	ldrb	r3, [r3, #8]
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d106      	bne.n	8000d54 <CAN_Init+0xb4>
    {
      CANx->MCR |= CAN_MCR_AWUM;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f043 0220 	orr.w	r2, r3, #32
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	e005      	b.n	8000d60 <CAN_Init+0xc0>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f023 0220 	bic.w	r2, r3, #32
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	601a      	str	r2, [r3, #0]
    }

    /* Set the no automatic retransmission */
    if (CAN_InitStruct->CAN_NART == ENABLE)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	7a5b      	ldrb	r3, [r3, #9]
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d106      	bne.n	8000d76 <CAN_Init+0xd6>
    {
      CANx->MCR |= CAN_MCR_NART;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f043 0210 	orr.w	r2, r3, #16
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e005      	b.n	8000d82 <CAN_Init+0xe2>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f023 0210 	bic.w	r2, r3, #16
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	601a      	str	r2, [r3, #0]
    }

    /* Set the receive FIFO locked mode */
    if (CAN_InitStruct->CAN_RFLM == ENABLE)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	7a9b      	ldrb	r3, [r3, #10]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d106      	bne.n	8000d98 <CAN_Init+0xf8>
    {
      CANx->MCR |= CAN_MCR_RFLM;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f043 0208 	orr.w	r2, r3, #8
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	e005      	b.n	8000da4 <CAN_Init+0x104>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f023 0208 	bic.w	r2, r3, #8
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	601a      	str	r2, [r3, #0]
    }

    /* Set the transmit FIFO priority */
    if (CAN_InitStruct->CAN_TXFP == ENABLE)
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	7adb      	ldrb	r3, [r3, #11]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d106      	bne.n	8000dba <CAN_Init+0x11a>
    {
      CANx->MCR |= CAN_MCR_TXFP;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f043 0204 	orr.w	r2, r3, #4
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	e005      	b.n	8000dc6 <CAN_Init+0x126>
    }
    else
    {
      CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f023 0204 	bic.w	r2, r3, #4
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	601a      	str	r2, [r3, #0]
    }

    /* Set the bit timing register */
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	789b      	ldrb	r3, [r3, #2]
 8000dca:	079a      	lsls	r2, r3, #30
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	78db      	ldrb	r3, [r3, #3]
 8000dd0:	061b      	lsls	r3, r3, #24
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000dd2:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	791b      	ldrb	r3, [r3, #4]
 8000dd8:	041b      	lsls	r3, r3, #16
                ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
 8000dda:	431a      	orrs	r2, r3
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	795b      	ldrb	r3, [r3, #5]
 8000de0:	051b      	lsls	r3, r3, #20
                ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
 8000de2:	431a      	orrs	r2, r3
               ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	3b01      	subs	r3, #1
                ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
 8000dea:	431a      	orrs	r2, r3
    CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	61da      	str	r2, [r3, #28]

    /* Request leave initialisation */
    CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f023 0201 	bic.w	r2, r3, #1
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	601a      	str	r2, [r3, #0]

   /* Wait the acknowledge */
   wait_ack = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60bb      	str	r3, [r7, #8]

   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000e00:	e002      	b.n	8000e08 <CAN_Init+0x168>
   {
     wait_ack++;
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	3301      	adds	r3, #1
 8000e06:	60bb      	str	r3, [r7, #8]
   while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d104      	bne.n	8000e1e <CAN_Init+0x17e>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d1f1      	bne.n	8000e02 <CAN_Init+0x162>
   }

    /* ...and check acknowledged */
    if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d102      	bne.n	8000e30 <CAN_Init+0x190>
    {
      InitStatus = CAN_InitStatus_Failed;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]
 8000e2e:	e001      	b.n	8000e34 <CAN_Init+0x194>
    }
    else
    {
      InitStatus = CAN_InitStatus_Success ;
 8000e30:	2301      	movs	r3, #1
 8000e32:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* At this step, return the status of initialization */
  return InitStatus;
 8000e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3714      	adds	r7, #20
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr

08000e40 <CAN_FilterInit>:
  *                               structure that contains the configuration 
  *                               information.
  * @retval None.
  */
void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
{
 8000e40:	b490      	push	{r4, r7}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t filter_number_bit_pos = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
  assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
  assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
  assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));

  filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	7a9b      	ldrb	r3, [r3, #10]
 8000e50:	461a      	mov	r2, r3
 8000e52:	2301      	movs	r3, #1
 8000e54:	4093      	lsls	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

  /* Initialisation mode for the filter */
  CAN1->FMR |= FMR_FINIT;
 8000e58:	4b59      	ldr	r3, [pc, #356]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000e5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e5e:	4a58      	ldr	r2, [pc, #352]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000e60:	f043 0301 	orr.w	r3, r3, #1
 8000e64:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  /* Filter Deactivation */
  CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
 8000e68:	4b55      	ldr	r3, [pc, #340]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000e6a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	43db      	mvns	r3, r3
 8000e72:	4953      	ldr	r1, [pc, #332]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000e74:	4013      	ands	r3, r2
 8000e76:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c

  /* Filter Scale */
  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	7b1b      	ldrb	r3, [r3, #12]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d129      	bne.n	8000ed6 <CAN_FilterInit+0x96>
  {
    /* 16-bit scale for the filter */
    CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
 8000e82:	4b4f      	ldr	r3, [pc, #316]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000e84:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	494c      	ldr	r1, [pc, #304]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000e8e:	4013      	ands	r3, r2
 8000e90:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c

    /* First 16-bit identifier and First 16-bit mask */
    /* Or First 16-bit identifier and Second 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	88db      	ldrh	r3, [r3, #6]
 8000e98:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	8852      	ldrh	r2, [r2, #2]
 8000e9e:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000ea0:	4947      	ldr	r1, [pc, #284]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	7a92      	ldrb	r2, [r2, #10]
 8000ea6:	4610      	mov	r0, r2
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
 8000ea8:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000eac:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000eb0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

    /* Second 16-bit identifier and Second 16-bit mask */
    /* Or Third 16-bit identifier and Fourth 16-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	889b      	ldrh	r3, [r3, #4]
 8000eb8:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	8812      	ldrh	r2, [r2, #0]
 8000ebe:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000ec0:	493f      	ldr	r1, [pc, #252]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	7a92      	ldrb	r2, [r2, #10]
 8000ec6:	4610      	mov	r0, r2
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000ec8:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000ecc:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	440b      	add	r3, r1
 8000ed4:	605a      	str	r2, [r3, #4]
  }

  if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	7b1b      	ldrb	r3, [r3, #12]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d128      	bne.n	8000f30 <CAN_FilterInit+0xf0>
  {
    /* 32-bit scale for the filter */
    CAN1->FS1R |= filter_number_bit_pos;
 8000ede:	4b38      	ldr	r3, [pc, #224]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000ee0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000ee4:	4936      	ldr	r1, [pc, #216]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
    /* 32-bit identifier or First 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	881b      	ldrh	r3, [r3, #0]
 8000ef2:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
 8000ef4:	687a      	ldr	r2, [r7, #4]
 8000ef6:	8852      	ldrh	r2, [r2, #2]
 8000ef8:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000efa:	4931      	ldr	r1, [pc, #196]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	7a92      	ldrb	r2, [r2, #10]
 8000f00:	4610      	mov	r0, r2
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
 8000f02:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
 8000f06:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000f0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    /* 32-bit mask or Second 32-bit identifier */
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	889b      	ldrh	r3, [r3, #4]
 8000f12:	041b      	lsls	r3, r3, #16
        (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	88d2      	ldrh	r2, [r2, #6]
 8000f18:	4614      	mov	r4, r2
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000f1a:	4929      	ldr	r1, [pc, #164]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	7a92      	ldrb	r2, [r2, #10]
 8000f20:	4610      	mov	r0, r2
    ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
 8000f22:	ea43 0204 	orr.w	r2, r3, r4
    CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
 8000f26:	f100 0348 	add.w	r3, r0, #72	; 0x48
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	440b      	add	r3, r1
 8000f2e:	605a      	str	r2, [r3, #4]
  }

  /* Filter Mode */
  if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	7adb      	ldrb	r3, [r3, #11]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d109      	bne.n	8000f4c <CAN_FilterInit+0x10c>
  {
    /*Id/Mask mode for the filter*/
    CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f3a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	491f      	ldr	r1, [pc, #124]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f44:	4013      	ands	r3, r2
 8000f46:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
 8000f4a:	e007      	b.n	8000f5c <CAN_FilterInit+0x11c>
  }
  else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
  {
    /*Identifier list mode for the filter*/
    CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f52:	491b      	ldr	r1, [pc, #108]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	f8c1 3204 	str.w	r3, [r1, #516]	; 0x204
  }

  /* Filter FIFO assignment */
  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	891b      	ldrh	r3, [r3, #8]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d108      	bne.n	8000f76 <CAN_FilterInit+0x136>
  {
    /* FIFO 0 assignation for the filter */
    CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f66:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	4914      	ldr	r1, [pc, #80]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f70:	4013      	ands	r3, r2
 8000f72:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }

  if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	891b      	ldrh	r3, [r3, #8]
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d107      	bne.n	8000f8e <CAN_FilterInit+0x14e>
  {
    /* FIFO 1 assignation for the filter */
    CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f84:	490e      	ldr	r1, [pc, #56]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	f8c1 3214 	str.w	r3, [r1, #532]	; 0x214
  }
  
  /* Filter activation */
  if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	7b5b      	ldrb	r3, [r3, #13]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d107      	bne.n	8000fa6 <CAN_FilterInit+0x166>
  {
    CAN1->FA1R |= filter_number_bit_pos;
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f98:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f9c:	4908      	ldr	r1, [pc, #32]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	f8c1 321c 	str.w	r3, [r1, #540]	; 0x21c
  }

  /* Leave the initialisation mode for the filter */
  CAN1->FMR &= ~FMR_FINIT;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000fa8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <CAN_FilterInit+0x180>)
 8000fae:	f023 0301 	bic.w	r3, r3, #1
 8000fb2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc90      	pop	{r4, r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40006400 	.word	0x40006400

08000fc4 <CAN_Transmit>:
  *                    DLC and CAN data.
  * @retval The number of the mailbox that is used for transmission
  *                    or CAN_TxStatus_NoMailBox if there is no empty mailbox.
  */
uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]
  uint8_t transmit_mailbox = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
  assert_param(IS_CAN_RTR(TxMessage->RTR));
  assert_param(IS_CAN_DLC(TxMessage->DLC));

  /* Select one empty transmit mailbox */
  if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000fda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8000fde:	d102      	bne.n	8000fe6 <CAN_Transmit+0x22>
  {
    transmit_mailbox = 0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e015      	b.n	8001012 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000fee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000ff2:	d102      	bne.n	8000ffa <CAN_Transmit+0x36>
  {
    transmit_mailbox = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e00b      	b.n	8001012 <CAN_Transmit+0x4e>
  }
  else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001006:	d102      	bne.n	800100e <CAN_Transmit+0x4a>
  {
    transmit_mailbox = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	73fb      	strb	r3, [r7, #15]
 800100c:	e001      	b.n	8001012 <CAN_Transmit+0x4e>
  }
  else
  {
    transmit_mailbox = CAN_TxStatus_NoMailBox;
 800100e:	2304      	movs	r3, #4
 8001010:	73fb      	strb	r3, [r7, #15]
  }

  if (transmit_mailbox != CAN_TxStatus_NoMailBox)
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	2b04      	cmp	r3, #4
 8001016:	f000 809f 	beq.w	8001158 <CAN_Transmit+0x194>
  {
    /* Set up the Id */
    CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	3318      	adds	r3, #24
 8001020:	011b      	lsls	r3, r3, #4
 8001022:	4413      	add	r3, r2
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	f002 0201 	and.w	r2, r2, #1
 800102c:	6879      	ldr	r1, [r7, #4]
 800102e:	3318      	adds	r3, #24
 8001030:	011b      	lsls	r3, r3, #4
 8001032:	440b      	add	r3, r1
 8001034:	601a      	str	r2, [r3, #0]
    if (TxMessage->IDE == CAN_Id_Standard)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	7a1b      	ldrb	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d113      	bne.n	8001066 <CAN_Transmit+0xa2>
    {
      assert_param(IS_CAN_STDID(TxMessage->StdId));  
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	3318      	adds	r3, #24
 8001044:	011b      	lsls	r3, r3, #4
 8001046:	4413      	add	r3, r2
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	055b      	lsls	r3, r3, #21
                                                  TxMessage->RTR);
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	7a52      	ldrb	r2, [r2, #9]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
 8001054:	431a      	orrs	r2, r3
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	430a      	orrs	r2, r1
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	3318      	adds	r3, #24
 800105e:	011b      	lsls	r3, r3, #4
 8001060:	440b      	add	r3, r1
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e015      	b.n	8001092 <CAN_Transmit+0xce>
    }
    else
    {
      assert_param(IS_CAN_EXTID(TxMessage->ExtId));
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001066:	7bfb      	ldrb	r3, [r7, #15]
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	3318      	adds	r3, #24
 800106c:	011b      	lsls	r3, r3, #4
 800106e:	4413      	add	r3, r2
 8001070:	6819      	ldr	r1, [r3, #0]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	00db      	lsls	r3, r3, #3
                                                  TxMessage->IDE | \
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	7a12      	ldrb	r2, [r2, #8]
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 800107c:	4313      	orrs	r3, r2
                                                  TxMessage->RTR);
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	7a52      	ldrb	r2, [r2, #9]
                                                  TxMessage->IDE | \
 8001082:	431a      	orrs	r2, r3
      CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	430a      	orrs	r2, r1
 8001088:	6879      	ldr	r1, [r7, #4]
 800108a:	3318      	adds	r3, #24
 800108c:	011b      	lsls	r3, r3, #4
 800108e:	440b      	add	r3, r1
 8001090:	601a      	str	r2, [r3, #0]
    }
    
    /* Set up the DLC */
    TxMessage->DLC &= (uint8_t)0x0000000F;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	7a9b      	ldrb	r3, [r3, #10]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	b2da      	uxtb	r2, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	729a      	strb	r2, [r3, #10]
    CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	3318      	adds	r3, #24
 80010a6:	011b      	lsls	r3, r3, #4
 80010a8:	4413      	add	r3, r2
 80010aa:	3304      	adds	r3, #4
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	7bfb      	ldrb	r3, [r7, #15]
 80010b0:	f022 020f 	bic.w	r2, r2, #15
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	3318      	adds	r3, #24
 80010b8:	011b      	lsls	r3, r3, #4
 80010ba:	440b      	add	r3, r1
 80010bc:	3304      	adds	r3, #4
 80010be:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	3318      	adds	r3, #24
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	4413      	add	r3, r2
 80010ca:	3304      	adds	r3, #4
 80010cc:	681a      	ldr	r2, [r3, #0]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	7a9b      	ldrb	r3, [r3, #10]
 80010d2:	4619      	mov	r1, r3
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	6879      	ldr	r1, [r7, #4]
 80010da:	3318      	adds	r3, #24
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	440b      	add	r3, r1
 80010e0:	3304      	adds	r3, #4
 80010e2:	601a      	str	r2, [r3, #0]

    /* Set up the data field */
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	7b9b      	ldrb	r3, [r3, #14]
 80010e8:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	7b5b      	ldrb	r3, [r3, #13]
 80010ee:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 80010f0:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	7b1b      	ldrb	r3, [r3, #12]
 80010f6:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[2] << 16) |
 80010f8:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[0]));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	7adb      	ldrb	r3, [r3, #11]
 80010fe:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001100:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[1] << 8) | 
 8001102:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
 8001104:	6879      	ldr	r1, [r7, #4]
 8001106:	011b      	lsls	r3, r3, #4
 8001108:	440b      	add	r3, r1
 800110a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800110e:	601a      	str	r2, [r3, #0]
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	7c9b      	ldrb	r3, [r3, #18]
 8001114:	061a      	lsls	r2, r3, #24
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	7c5b      	ldrb	r3, [r3, #17]
 800111a:	041b      	lsls	r3, r3, #16
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800111c:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	7c1b      	ldrb	r3, [r3, #16]
 8001122:	021b      	lsls	r3, r3, #8
                                             ((uint32_t)TxMessage->Data[6] << 16) |
 8001124:	431a      	orrs	r2, r3
                                             ((uint32_t)TxMessage->Data[4]));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	7bdb      	ldrb	r3, [r3, #15]
 800112a:	4619      	mov	r1, r3
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 800112c:	7bfb      	ldrb	r3, [r7, #15]
                                             ((uint32_t)TxMessage->Data[5] << 8) |
 800112e:	430a      	orrs	r2, r1
    CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	011b      	lsls	r3, r3, #4
 8001134:	440b      	add	r3, r1
 8001136:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800113a:	601a      	str	r2, [r3, #0]
    /* Request transmission */
    CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
 800113c:	7bfb      	ldrb	r3, [r7, #15]
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	3318      	adds	r3, #24
 8001142:	011b      	lsls	r3, r3, #4
 8001144:	4413      	add	r3, r2
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	f042 0201 	orr.w	r2, r2, #1
 800114e:	6879      	ldr	r1, [r7, #4]
 8001150:	3318      	adds	r3, #24
 8001152:	011b      	lsls	r3, r3, #4
 8001154:	440b      	add	r3, r1
 8001156:	601a      	str	r2, [r3, #0]
  }
  return transmit_mailbox;
 8001158:	7bfb      	ldrb	r3, [r7, #15]
}
 800115a:	4618      	mov	r0, r3
 800115c:	3714      	adds	r7, #20
 800115e:	46bd      	mov	sp, r7
 8001160:	bc80      	pop	{r7}
 8001162:	4770      	bx	lr

08001164 <CAN_TransmitStatus>:
  *                          transmission.
  * @retval CAN_TxStatus_Ok if the CAN driver transmits the message, CAN_TxStatus_Failed 
  *         in an other case.
  */
uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
 800116c:	460b      	mov	r3, r1
 800116e:	70fb      	strb	r3, [r7, #3]
  uint32_t state = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
 
  switch (TransmitMailbox)
 8001174:	78fb      	ldrb	r3, [r7, #3]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d012      	beq.n	80011a0 <CAN_TransmitStatus+0x3c>
 800117a:	2b02      	cmp	r3, #2
 800117c:	dc16      	bgt.n	80011ac <CAN_TransmitStatus+0x48>
 800117e:	2b00      	cmp	r3, #0
 8001180:	d002      	beq.n	8001188 <CAN_TransmitStatus+0x24>
 8001182:	2b01      	cmp	r3, #1
 8001184:	d006      	beq.n	8001194 <CAN_TransmitStatus+0x30>
 8001186:	e011      	b.n	80011ac <CAN_TransmitStatus+0x48>
  {
    case (CAN_TXMAILBOX_0): 
      state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	4b30      	ldr	r3, [pc, #192]	; (8001250 <CAN_TransmitStatus+0xec>)
 800118e:	4013      	ands	r3, r2
 8001190:	60fb      	str	r3, [r7, #12]
      break;
 8001192:	e00e      	b.n	80011b2 <CAN_TransmitStatus+0x4e>
    case (CAN_TXMAILBOX_1): 
      state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689a      	ldr	r2, [r3, #8]
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <CAN_TransmitStatus+0xf0>)
 800119a:	4013      	ands	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]
      break;
 800119e:	e008      	b.n	80011b2 <CAN_TransmitStatus+0x4e>
    case (CAN_TXMAILBOX_2): 
      state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <CAN_TransmitStatus+0xf4>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	60fb      	str	r3, [r7, #12]
      break;
 80011aa:	e002      	b.n	80011b2 <CAN_TransmitStatus+0x4e>
    default:
      state = CAN_TxStatus_Failed;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
      break;
 80011b0:	bf00      	nop
  }
  switch (state)
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4a28      	ldr	r2, [pc, #160]	; (8001258 <CAN_TransmitStatus+0xf4>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d03d      	beq.n	8001236 <CAN_TransmitStatus+0xd2>
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	4a26      	ldr	r2, [pc, #152]	; (8001258 <CAN_TransmitStatus+0xf4>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d83c      	bhi.n	800123c <CAN_TransmitStatus+0xd8>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4a25      	ldr	r2, [pc, #148]	; (800125c <CAN_TransmitStatus+0xf8>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d02c      	beq.n	8001224 <CAN_TransmitStatus+0xc0>
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	4a23      	ldr	r2, [pc, #140]	; (800125c <CAN_TransmitStatus+0xf8>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d834      	bhi.n	800123c <CAN_TransmitStatus+0xd8>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <CAN_TransmitStatus+0xf0>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d02a      	beq.n	8001230 <CAN_TransmitStatus+0xcc>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <CAN_TransmitStatus+0xf0>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d82c      	bhi.n	800123c <CAN_TransmitStatus+0xd8>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	4a1e      	ldr	r2, [pc, #120]	; (8001260 <CAN_TransmitStatus+0xfc>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <CAN_TransmitStatus+0xba>
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4a1c      	ldr	r2, [pc, #112]	; (8001260 <CAN_TransmitStatus+0xfc>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d824      	bhi.n	800123c <CAN_TransmitStatus+0xd8>
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	4a16      	ldr	r2, [pc, #88]	; (8001250 <CAN_TransmitStatus+0xec>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d017      	beq.n	800122a <CAN_TransmitStatus+0xc6>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4a14      	ldr	r2, [pc, #80]	; (8001250 <CAN_TransmitStatus+0xec>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d81c      	bhi.n	800123c <CAN_TransmitStatus+0xd8>
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d004      	beq.n	8001212 <CAN_TransmitStatus+0xae>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4a16      	ldr	r2, [pc, #88]	; (8001264 <CAN_TransmitStatus+0x100>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d003      	beq.n	8001218 <CAN_TransmitStatus+0xb4>
 8001210:	e014      	b.n	800123c <CAN_TransmitStatus+0xd8>
  {
      /* transmit pending  */
    case (0x0): state = CAN_TxStatus_Pending;
 8001212:	2302      	movs	r3, #2
 8001214:	60fb      	str	r3, [r7, #12]
      break;
 8001216:	e014      	b.n	8001242 <CAN_TransmitStatus+0xde>
      /* transmit failed  */
     case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
      break;
 800121c:	e011      	b.n	8001242 <CAN_TransmitStatus+0xde>
     case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
      break;
 8001222:	e00e      	b.n	8001242 <CAN_TransmitStatus+0xde>
     case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
      break;
 8001228:	e00b      	b.n	8001242 <CAN_TransmitStatus+0xde>
      /* transmit succeeded  */
    case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
 800122a:	2301      	movs	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
      break;
 800122e:	e008      	b.n	8001242 <CAN_TransmitStatus+0xde>
    case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
 8001230:	2301      	movs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
      break;
 8001234:	e005      	b.n	8001242 <CAN_TransmitStatus+0xde>
    case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
 8001236:	2301      	movs	r3, #1
 8001238:	60fb      	str	r3, [r7, #12]
      break;
 800123a:	e002      	b.n	8001242 <CAN_TransmitStatus+0xde>
    default: state = CAN_TxStatus_Failed;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
      break;
 8001240:	bf00      	nop
  }
  return (uint8_t) state;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	b2db      	uxtb	r3, r3
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	04000003 	.word	0x04000003
 8001254:	08000300 	.word	0x08000300
 8001258:	10030000 	.word	0x10030000
 800125c:	10010000 	.word	0x10010000
 8001260:	08000100 	.word	0x08000100
 8001264:	04000001 	.word	0x04000001

08001268 <CAN_Receive>:
  * @param  RxMessage:  pointer to a structure receive message which contains 
  *                     CAN Id, CAN DLC, CAN datas and FMI number.
  * @retval None.
  */
void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
{
 8001268:	b480      	push	{r7}
 800126a:	b085      	sub	sp, #20
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	460b      	mov	r3, r1
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	72fb      	strb	r3, [r7, #11]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_FIFO(FIFONumber));
  /* Get the Id */
  RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
 8001276:	7afb      	ldrb	r3, [r7, #11]
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	331b      	adds	r3, #27
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	b2da      	uxtb	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	721a      	strb	r2, [r3, #8]
  if (RxMessage->IDE == CAN_Id_Standard)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	7a1b      	ldrb	r3, [r3, #8]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10b      	bne.n	80012ae <CAN_Receive+0x46>
  {
    RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
 8001296:	7afb      	ldrb	r3, [r7, #11]
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	331b      	adds	r3, #27
 800129c:	011b      	lsls	r3, r3, #4
 800129e:	4413      	add	r3, r2
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	0d5b      	lsrs	r3, r3, #21
 80012a4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	e00a      	b.n	80012c4 <CAN_Receive+0x5c>
  }
  else
  {
    RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	331b      	adds	r3, #27
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	08db      	lsrs	r3, r3, #3
 80012bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	605a      	str	r2, [r3, #4]
  }
  
  RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
 80012c4:	7afb      	ldrb	r3, [r7, #11]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	331b      	adds	r3, #27
 80012ca:	011b      	lsls	r3, r3, #4
 80012cc:	4413      	add	r3, r2
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	725a      	strb	r2, [r3, #9]
  /* Get the DLC */
  RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	331b      	adds	r3, #27
 80012e2:	011b      	lsls	r3, r3, #4
 80012e4:	4413      	add	r3, r2
 80012e6:	3304      	adds	r3, #4
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	729a      	strb	r2, [r3, #10]
  /* Get the FMI */
  RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
 80012f6:	7afb      	ldrb	r3, [r7, #11]
 80012f8:	68fa      	ldr	r2, [r7, #12]
 80012fa:	331b      	adds	r3, #27
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	3304      	adds	r3, #4
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	b2da      	uxtb	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	74da      	strb	r2, [r3, #19]
  /* Get the data field */
  RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	011b      	lsls	r3, r3, #4
 8001312:	4413      	add	r3, r2
 8001314:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	72da      	strb	r2, [r3, #11]
  RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
 8001320:	7afb      	ldrb	r3, [r7, #11]
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	011b      	lsls	r3, r3, #4
 8001326:	4413      	add	r3, r2
 8001328:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	0a1b      	lsrs	r3, r3, #8
 8001330:	b2da      	uxtb	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	731a      	strb	r2, [r3, #12]
  RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
 8001336:	7afb      	ldrb	r3, [r7, #11]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	0c1b      	lsrs	r3, r3, #16
 8001346:	b2da      	uxtb	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	735a      	strb	r2, [r3, #13]
  RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	68fa      	ldr	r2, [r7, #12]
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	0e1b      	lsrs	r3, r3, #24
 800135c:	b2da      	uxtb	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	739a      	strb	r2, [r3, #14]
  RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	68fa      	ldr	r2, [r7, #12]
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	4413      	add	r3, r2
 800136a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b2da      	uxtb	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	73da      	strb	r2, [r3, #15]
  RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
 8001376:	7afb      	ldrb	r3, [r7, #11]
 8001378:	68fa      	ldr	r2, [r7, #12]
 800137a:	011b      	lsls	r3, r3, #4
 800137c:	4413      	add	r3, r2
 800137e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0a1b      	lsrs	r3, r3, #8
 8001386:	b2da      	uxtb	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	741a      	strb	r2, [r3, #16]
  RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4413      	add	r3, r2
 8001394:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	0c1b      	lsrs	r3, r3, #16
 800139c:	b2da      	uxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	745a      	strb	r2, [r3, #17]
  RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
 80013a2:	7afb      	ldrb	r3, [r7, #11]
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4413      	add	r3, r2
 80013aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0e1b      	lsrs	r3, r3, #24
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	749a      	strb	r2, [r3, #18]
  /* Release the FIFO */
  /* Release FIFO0 */
  if (FIFONumber == CAN_FIFO0)
 80013b8:	7afb      	ldrb	r3, [r7, #11]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d106      	bne.n	80013cc <CAN_Receive+0x164>
  {
    CANx->RF0R |= CAN_RF0R_RFOM0;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	f043 0220 	orr.w	r2, r3, #32
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	60da      	str	r2, [r3, #12]
  /* Release FIFO1 */
  else /* FIFONumber == CAN_FIFO1 */
  {
    CANx->RF1R |= CAN_RF1R_RFOM1;
  }
}
 80013ca:	e005      	b.n	80013d8 <CAN_Receive+0x170>
    CANx->RF1R |= CAN_RF1R_RFOM1;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	691b      	ldr	r3, [r3, #16]
 80013d0:	f043 0220 	orr.w	r2, r3, #32
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	611a      	str	r2, [r3, #16]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	bc80      	pop	{r7}
 80013e0:	4770      	bx	lr

080013e2 <CAN_ITConfig>:
  * @param  NewState: new state of the CAN interrupts.
  *                   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b085      	sub	sp, #20
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	4613      	mov	r3, r2
 80013ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_CAN_ALL_PERIPH(CANx));
  assert_param(IS_CAN_IT(CAN_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <CAN_ITConfig+0x22>
  {
    /* Enable the selected CANx interrupt */
    CANx->IER |= CAN_IT;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	431a      	orrs	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	615a      	str	r2, [r3, #20]
  else
  {
    /* Disable the selected CANx interrupt */
    CANx->IER &= ~CAN_IT;
  }
}
 8001402:	e006      	b.n	8001412 <CAN_ITConfig+0x30>
    CANx->IER &= ~CAN_IT;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	695a      	ldr	r2, [r3, #20]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	43db      	mvns	r3, r3
 800140c:	401a      	ands	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	615a      	str	r2, [r3, #20]
}
 8001412:	bf00      	nop
 8001414:	3714      	adds	r7, #20
 8001416:	46bd      	mov	sp, r7
 8001418:	bc80      	pop	{r7}
 800141a:	4770      	bx	lr

0800141c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800141c:	b480      	push	{r7}
 800141e:	b089      	sub	sp, #36	; 0x24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	2300      	movs	r3, #0
 800143c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	78db      	ldrb	r3, [r3, #3]
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	78db      	ldrb	r3, [r3, #3]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	789b      	ldrb	r3, [r3, #2]
 8001458:	461a      	mov	r2, r3
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	4313      	orrs	r3, r2
 800145e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	881b      	ldrh	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d044      	beq.n	80014f4 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001470:	2300      	movs	r3, #0
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	e038      	b.n	80014e8 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001476:	2201      	movs	r2, #1
 8001478:	69bb      	ldr	r3, [r7, #24]
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	429a      	cmp	r2, r3
 8001492:	d126      	bne.n	80014e2 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800149a:	220f      	movs	r2, #15
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	4013      	ands	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	697a      	ldr	r2, [r7, #20]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	78db      	ldrb	r3, [r3, #3]
 80014c0:	2b28      	cmp	r3, #40	; 0x28
 80014c2:	d105      	bne.n	80014d0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80014c4:	2201      	movs	r2, #1
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	409a      	lsls	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	e008      	b.n	80014e2 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	78db      	ldrb	r3, [r3, #3]
 80014d4:	2b48      	cmp	r3, #72	; 0x48
 80014d6:	d104      	bne.n	80014e2 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80014d8:	2201      	movs	r2, #1
 80014da:	69bb      	ldr	r3, [r7, #24]
 80014dc:	409a      	lsls	r2, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	3301      	adds	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]
 80014ea:	2b07      	cmp	r3, #7
 80014ec:	d9c3      	bls.n	8001476 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	881b      	ldrh	r3, [r3, #0]
 80014f8:	2bff      	cmp	r3, #255	; 0xff
 80014fa:	d946      	bls.n	800158a <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001502:	2300      	movs	r3, #0
 8001504:	61bb      	str	r3, [r7, #24]
 8001506:	e03a      	b.n	800157e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	3308      	adds	r3, #8
 800150c:	2201      	movs	r2, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	461a      	mov	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	429a      	cmp	r2, r3
 8001526:	d127      	bne.n	8001578 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800152e:	220f      	movs	r2, #15
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	43db      	mvns	r3, r3
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	4013      	ands	r3, r2
 8001540:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001542:	69fa      	ldr	r2, [r7, #28]
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	4313      	orrs	r3, r2
 800154e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	78db      	ldrb	r3, [r3, #3]
 8001554:	2b28      	cmp	r3, #40	; 0x28
 8001556:	d105      	bne.n	8001564 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	3308      	adds	r3, #8
 800155c:	2201      	movs	r2, #1
 800155e:	409a      	lsls	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	78db      	ldrb	r3, [r3, #3]
 8001568:	2b48      	cmp	r3, #72	; 0x48
 800156a:	d105      	bne.n	8001578 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	3308      	adds	r3, #8
 8001570:	2201      	movs	r2, #1
 8001572:	409a      	lsls	r2, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	3301      	adds	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b07      	cmp	r3, #7
 8001582:	d9c1      	bls.n	8001508 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	605a      	str	r2, [r3, #4]
  }
}
 800158a:	bf00      	nop
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	887b      	ldrh	r3, [r7, #2]
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80015b0:	2301      	movs	r3, #1
 80015b2:	73fb      	strb	r3, [r7, #15]
 80015b4:	e001      	b.n	80015ba <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr

080015c6 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80015c6:	b480      	push	{r7}
 80015c8:	b083      	sub	sp, #12
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
 80015ce:	460b      	mov	r3, r1
 80015d0:	807b      	strh	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80015d6:	787b      	ldrb	r3, [r7, #1]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015dc:	887a      	ldrh	r2, [r7, #2]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80015e2:	e002      	b.n	80015ea <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 80015e4:	887a      	ldrh	r2, [r7, #2]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	615a      	str	r2, [r3, #20]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr

080015f4 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	460b      	mov	r3, r1
 80015fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	da03      	bge.n	800161e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <GPIO_PinRemapConfig+0xdc>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	617b      	str	r3, [r7, #20]
 800161c:	e002      	b.n	8001624 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800161e:	4b2c      	ldr	r3, [pc, #176]	; (80016d0 <GPIO_PinRemapConfig+0xdc>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	0c1b      	lsrs	r3, r3, #16
 8001628:	f003 030f 	and.w	r3, r3, #15
 800162c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	b29b      	uxth	r3, r3
 8001632:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800163a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800163e:	d10a      	bne.n	8001656 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001646:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001648:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <GPIO_PinRemapConfig+0xdc>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <GPIO_PinRemapConfig+0xdc>)
 800164e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001652:	6053      	str	r3, [r2, #4]
 8001654:	e021      	b.n	800169a <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d00e      	beq.n	800167e <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8001660:	2203      	movs	r2, #3
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	43db      	mvns	r3, r3
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	4013      	ands	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00d      	b.n	800169a <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	0d5b      	lsrs	r3, r3, #21
 8001682:	011b      	lsls	r3, r3, #4
 8001684:	693a      	ldr	r2, [r7, #16]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43db      	mvns	r3, r3
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	4013      	ands	r3, r2
 8001690:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001698:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800169a:	78fb      	ldrb	r3, [r7, #3]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d008      	beq.n	80016b2 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	0d5b      	lsrs	r3, r3, #21
 80016a4:	011b      	lsls	r3, r3, #4
 80016a6:	693a      	ldr	r2, [r7, #16]
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	697a      	ldr	r2, [r7, #20]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da03      	bge.n	80016c0 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <GPIO_PinRemapConfig+0xdc>)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 80016be:	e002      	b.n	80016c6 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 80016c0:	4a03      	ldr	r2, [pc, #12]	; (80016d0 <GPIO_PinRemapConfig+0xdc>)
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	6053      	str	r3, [r2, #4]
}
 80016c6:	bf00      	nop
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr
 80016d0:	40010000 	.word	0x40010000

080016d4 <RCC_USBCLKConfig>:
  *                                     clock source
  *     @arg RCC_USBCLKSource_PLLCLK_Div1: PLL clock selected as USB clock source
  * @retval None
  */
void RCC_USBCLKConfig(uint32_t RCC_USBCLKSource)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_USBCLK_SOURCE(RCC_USBCLKSource));

  *(__IO uint32_t *) CFGR_USBPRE_BB = RCC_USBCLKSource;
 80016dc:	4a03      	ldr	r2, [pc, #12]	; (80016ec <RCC_USBCLKConfig+0x18>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bc80      	pop	{r7}
 80016ea:	4770      	bx	lr
 80016ec:	424200d8 	.word	0x424200d8

080016f0 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <RCC_ADCCLKConfig+0x34>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001708:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <RCC_ADCCLKConfig+0x34>)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6053      	str	r3, [r2, #4]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	bc80      	pop	{r7}
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000

08001728 <RCC_LSEConfig>:
  *     @arg RCC_LSE_ON: LSE oscillator ON
  *     @arg RCC_LSE_Bypass: LSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_LSEConfig(uint8_t RCC_LSE)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));
  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001732:	4b0c      	ldr	r3, [pc, #48]	; (8001764 <RCC_LSEConfig+0x3c>)
 8001734:	2200      	movs	r2, #0
 8001736:	701a      	strb	r2, [r3, #0]
  /* Reset LSEBYP bit */
  *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_OFF;
 8001738:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <RCC_LSEConfig+0x3c>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
  /* Configure LSE (RCC_LSE_OFF is already covered by the code section above) */
  switch(RCC_LSE)
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d002      	beq.n	800174a <RCC_LSEConfig+0x22>
 8001744:	2b04      	cmp	r3, #4
 8001746:	d004      	beq.n	8001752 <RCC_LSEConfig+0x2a>
      /* Set LSEBYP and LSEON bits */
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
      break;            
      
    default:
      break;      
 8001748:	e007      	b.n	800175a <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_ON;
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <RCC_LSEConfig+0x3c>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
      break;
 8001750:	e003      	b.n	800175a <RCC_LSEConfig+0x32>
      *(__IO uint8_t *) BDCR_ADDRESS = RCC_LSE_Bypass | RCC_LSE_ON;
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <RCC_LSEConfig+0x3c>)
 8001754:	2205      	movs	r2, #5
 8001756:	701a      	strb	r2, [r3, #0]
      break;            
 8001758:	bf00      	nop
  }
}
 800175a:	bf00      	nop
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	bc80      	pop	{r7}
 8001762:	4770      	bx	lr
 8001764:	40021020 	.word	0x40021020

08001768 <RCC_RTCCLKConfig>:
  *     @arg RCC_RTCCLKSource_LSI: LSI selected as RTC clock
  *     @arg RCC_RTCCLKSource_HSE_Div128: HSE clock divided by 128 selected as RTC clock
  * @retval None
  */
void RCC_RTCCLKConfig(uint32_t RCC_RTCCLKSource)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 8001770:	4b05      	ldr	r3, [pc, #20]	; (8001788 <RCC_RTCCLKConfig+0x20>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4904      	ldr	r1, [pc, #16]	; (8001788 <RCC_RTCCLKConfig+0x20>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4313      	orrs	r3, r2
 800177a:	620b      	str	r3, [r1, #32]
}
 800177c:	bf00      	nop
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000

0800178c <RCC_RTCCLKCmd>:
  * @note   This function must be used only after the RTC clock was selected using the RCC_RTCCLKConfig function.
  * @param  NewState: new state of the RTC clock. This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) BDCR_RTCEN_BB = (uint32_t)NewState;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <RCC_RTCCLKCmd+0x1c>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	4242043c 	.word	0x4242043c

080017ac <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b087      	sub	sp, #28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 80017c4:	4b4f      	ldr	r3, [pc, #316]	; (8001904 <RCC_GetClocksFreq+0x158>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d011      	beq.n	80017f8 <RCC_GetClocksFreq+0x4c>
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	2b08      	cmp	r3, #8
 80017d8:	d83a      	bhi.n	8001850 <RCC_GetClocksFreq+0xa4>
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d003      	beq.n	80017e8 <RCC_GetClocksFreq+0x3c>
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d004      	beq.n	80017f0 <RCC_GetClocksFreq+0x44>
 80017e6:	e033      	b.n	8001850 <RCC_GetClocksFreq+0xa4>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a47      	ldr	r2, [pc, #284]	; (8001908 <RCC_GetClocksFreq+0x15c>)
 80017ec:	601a      	str	r2, [r3, #0]
      break;
 80017ee:	e033      	b.n	8001858 <RCC_GetClocksFreq+0xac>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a45      	ldr	r2, [pc, #276]	; (8001908 <RCC_GetClocksFreq+0x15c>)
 80017f4:	601a      	str	r2, [r3, #0]
      break;
 80017f6:	e02f      	b.n	8001858 <RCC_GetClocksFreq+0xac>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80017f8:	4b42      	ldr	r3, [pc, #264]	; (8001904 <RCC_GetClocksFreq+0x158>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001800:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001802:	4b40      	ldr	r3, [pc, #256]	; (8001904 <RCC_GetClocksFreq+0x158>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800180a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	0c9b      	lsrs	r3, r3, #18
 8001810:	3302      	adds	r3, #2
 8001812:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d106      	bne.n	8001828 <RCC_GetClocksFreq+0x7c>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	4a3b      	ldr	r2, [pc, #236]	; (800190c <RCC_GetClocksFreq+0x160>)
 800181e:	fb03 f202 	mul.w	r2, r3, r2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001826:	e017      	b.n	8001858 <RCC_GetClocksFreq+0xac>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001828:	4b36      	ldr	r3, [pc, #216]	; (8001904 <RCC_GetClocksFreq+0x158>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d006      	beq.n	8001842 <RCC_GetClocksFreq+0x96>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	4a35      	ldr	r2, [pc, #212]	; (800190c <RCC_GetClocksFreq+0x160>)
 8001838:	fb03 f202 	mul.w	r2, r3, r2
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	601a      	str	r2, [r3, #0]
      break;
 8001840:	e00a      	b.n	8001858 <RCC_GetClocksFreq+0xac>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4a30      	ldr	r2, [pc, #192]	; (8001908 <RCC_GetClocksFreq+0x15c>)
 8001846:	fb03 f202 	mul.w	r2, r3, r2
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	601a      	str	r2, [r3, #0]
      break;
 800184e:	e003      	b.n	8001858 <RCC_GetClocksFreq+0xac>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a2d      	ldr	r2, [pc, #180]	; (8001908 <RCC_GetClocksFreq+0x15c>)
 8001854:	601a      	str	r2, [r3, #0]
      break;
 8001856:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001858:	4b2a      	ldr	r3, [pc, #168]	; (8001904 <RCC_GetClocksFreq+0x158>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001860:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001868:	4a29      	ldr	r2, [pc, #164]	; (8001910 <RCC_GetClocksFreq+0x164>)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	4413      	add	r3, r2
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	40da      	lsrs	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <RCC_GetClocksFreq+0x158>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001888:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001890:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <RCC_GetClocksFreq+0x164>)
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	40da      	lsrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80018a8:	4b16      	ldr	r3, [pc, #88]	; (8001904 <RCC_GetClocksFreq+0x158>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80018b0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	0adb      	lsrs	r3, r3, #11
 80018b6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80018b8:	4a15      	ldr	r2, [pc, #84]	; (8001910 <RCC_GetClocksFreq+0x164>)
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	4413      	add	r3, r2
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	40da      	lsrs	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <RCC_GetClocksFreq+0x158>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	0b9b      	lsrs	r3, r3, #14
 80018de:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80018e0:	4a0c      	ldr	r2, [pc, #48]	; (8001914 <RCC_GetClocksFreq+0x168>)
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	4413      	add	r3, r2
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	611a      	str	r2, [r3, #16]
}
 80018fa:	bf00      	nop
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000
 8001908:	007a1200 	.word	0x007a1200
 800190c:	003d0900 	.word	0x003d0900
 8001910:	20000018 	.word	0x20000018
 8001914:	20000028 	.word	0x20000028

08001918 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <RCC_AHBPeriphClockCmd+0x38>)
 800192c:	695a      	ldr	r2, [r3, #20]
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <RCC_AHBPeriphClockCmd+0x38>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4313      	orrs	r3, r2
 8001934:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8001936:	e006      	b.n	8001946 <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8001938:	4b05      	ldr	r3, [pc, #20]	; (8001950 <RCC_AHBPeriphClockCmd+0x38>)
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	43db      	mvns	r3, r3
 8001940:	4903      	ldr	r1, [pc, #12]	; (8001950 <RCC_AHBPeriphClockCmd+0x38>)
 8001942:	4013      	ands	r3, r2
 8001944:	614b      	str	r3, [r1, #20]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr
 8001950:	40021000 	.word	0x40021000

08001954 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001960:	78fb      	ldrb	r3, [r7, #3]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d006      	beq.n	8001974 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <RCC_APB2PeriphClockCmd+0x38>)
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <RCC_APB2PeriphClockCmd+0x38>)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4313      	orrs	r3, r2
 8001970:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001972:	e006      	b.n	8001982 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <RCC_APB2PeriphClockCmd+0x38>)
 8001976:	699a      	ldr	r2, [r3, #24]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	43db      	mvns	r3, r3
 800197c:	4903      	ldr	r1, [pc, #12]	; (800198c <RCC_APB2PeriphClockCmd+0x38>)
 800197e:	4013      	ands	r3, r2
 8001980:	618b      	str	r3, [r1, #24]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000

08001990 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d006      	beq.n	80019b0 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80019a2:	4b09      	ldr	r3, [pc, #36]	; (80019c8 <RCC_APB1PeriphClockCmd+0x38>)
 80019a4:	69da      	ldr	r2, [r3, #28]
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <RCC_APB1PeriphClockCmd+0x38>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80019ae:	e006      	b.n	80019be <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <RCC_APB1PeriphClockCmd+0x38>)
 80019b2:	69da      	ldr	r2, [r3, #28]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	4903      	ldr	r1, [pc, #12]	; (80019c8 <RCC_APB1PeriphClockCmd+0x38>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	61cb      	str	r3, [r1, #28]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	40021000 	.word	0x40021000

080019cc <RCC_MCOConfig>:
  *     @arg RCC_MCO_PLLCLK_Div2: PLL clock divided by 2 selected
  *   
  * @retval None
  */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCO));

  /* Perform Byte access to MCO bits to select the MCO source */
  *(__IO uint8_t *) CFGR_BYTE4_ADDRESS = RCC_MCO;
 80019d6:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <RCC_MCOConfig+0x1c>)
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	7013      	strb	r3, [r2, #0]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40021007 	.word	0x40021007

080019ec <TIM_SetCompare1>:
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @param  Compare1: specifies the Capture Compare1 register new value.
  * @retval None
  */
void TIM_SetCompare1(TIM_TypeDef* TIMx, uint16_t Compare1)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	869a      	strh	r2, [r3, #52]	; 0x34
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <TIM_GetCapture1>:
  * @brief  Gets the TIMx Input Capture 1 value.
  * @param  TIMx: where x can be 1 to 17 except 6 and 7 to select the TIM peripheral.
  * @retval Capture Compare 1 Register value.
  */
uint16_t TIM_GetCapture1(TIM_TypeDef* TIMx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001a14:	b29b      	uxth	r3, r3
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr

08001a20 <TIM_GetCapture2>:
  * @brief  Gets the TIMx Input Capture 2 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5, 8, 9, 12 or 15 to select the TIM peripheral.
  * @retval Capture Compare 2 Register value.
  */
uint16_t TIM_GetCapture2(TIM_TypeDef* TIMx)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001a2c:	b29b      	uxth	r3, r3
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr

08001a38 <TIM_GetITStatus>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.  
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	460b      	mov	r3, r1
 8001a42:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	81bb      	strh	r3, [r7, #12]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	817b      	strh	r3, [r7, #10]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	8a1b      	ldrh	r3, [r3, #16]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	887b      	ldrh	r3, [r7, #2]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	899b      	ldrh	r3, [r3, #12]
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	887b      	ldrh	r3, [r7, #2]
 8001a64:	4013      	ands	r3, r2
 8001a66:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8001a68:	89bb      	ldrh	r3, [r7, #12]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <TIM_GetITStatus+0x42>
 8001a6e:	897b      	ldrh	r3, [r7, #10]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8001a74:	2301      	movs	r3, #1
 8001a76:	73fb      	strb	r3, [r7, #15]
 8001a78:	e001      	b.n	8001a7e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bc80      	pop	{r7}
 8001a88:	4770      	bx	lr

08001a8a <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b083      	sub	sp, #12
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	b29a      	uxth	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	821a      	strh	r2, [r3, #16]
}
 8001aa0:	bf00      	nop
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <main>:
#endif



int main(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0

  // SYS CLK Init 
  BSP_RCC_Init();
 8001ab2:	f7fe fcc1 	bl	8000438 <BSP_RCC_Init>

  /** Config SWJ Reamp 
    *   If using the PA15、PA14、PA13、PB4、PB3 for Remapping Pin, these Clock Must be Config before SWJ REMAP config Function!
    */
  sys_SWJ_REMAP_Config(SWJ_ENABLE);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7fe ff08 	bl	80008cc <sys_SWJ_REMAP_Config>
  BSP_CAN_Init(CAN1);
 8001abc:	4809      	ldr	r0, [pc, #36]	; (8001ae4 <main+0x38>)
 8001abe:	f7fe fb57 	bl	8000170 <BSP_CAN_Init>
  uint8_t send_data[8] = {0x23, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF};
 8001ac2:	4a09      	ldr	r2, [pc, #36]	; (8001ae8 <main+0x3c>)
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aca:	e883 0003 	stmia.w	r3, {r0, r1}
  while (1)
  {
    CAN1_Send_Msg(0x01,send_data,8);
 8001ace:	463b      	mov	r3, r7
 8001ad0:	2208      	movs	r2, #8
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7fe fc11 	bl	80002fc <CAN1_Send_Msg>
    delay_ms(100);
 8001ada:	2064      	movs	r0, #100	; 0x64
 8001adc:	f7fe fec6 	bl	800086c <delay_ms>
    CAN1_Send_Msg(0x01,send_data,8);
 8001ae0:	e7f5      	b.n	8001ace <main+0x22>
 8001ae2:	bf00      	nop
 8001ae4:	40006400 	.word	0x40006400
 8001ae8:	08001bf4 	.word	0x08001bf4

08001aec <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr

08001af8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <HardFault_Handler+0x4>

08001afe <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <MemManage_Handler+0x4>

08001b04 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <BusFault_Handler+0x4>

08001b0a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <UsageFault_Handler+0x4>

08001b10 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr

08001b1c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
}
 8001b20:	bf00      	nop
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bc80      	pop	{r7}
 8001b26:	4770      	bx	lr

08001b28 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
}
 8001b2c:	bf00      	nop
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr

08001b34 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b40:	480d      	ldr	r0, [pc, #52]	; (8001b78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001b42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b44:	f7fe fef0 	bl	8000928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b48:	480c      	ldr	r0, [pc, #48]	; (8001b7c <LoopForever+0x6>)
  ldr r1, =_edata
 8001b4a:	490d      	ldr	r1, [pc, #52]	; (8001b80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b4c:	4a0d      	ldr	r2, [pc, #52]	; (8001b84 <LoopForever+0xe>)
  movs r3, #0
 8001b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b50:	e002      	b.n	8001b58 <LoopCopyDataInit>

08001b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b56:	3304      	adds	r3, #4

08001b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b5c:	d3f9      	bcc.n	8001b52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b5e:	4a0a      	ldr	r2, [pc, #40]	; (8001b88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b60:	4c0a      	ldr	r4, [pc, #40]	; (8001b8c <LoopForever+0x16>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b64:	e001      	b.n	8001b6a <LoopFillZerobss>

08001b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b68:	3204      	adds	r2, #4

08001b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b6c:	d3fb      	bcc.n	8001b66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b6e:	f000 f811 	bl	8001b94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b72:	f7ff ff9b 	bl	8001aac <main>

08001b76 <LoopForever>:

LoopForever:
  b LoopForever
 8001b76:	e7fe      	b.n	8001b76 <LoopForever>
  ldr   r0, =_estack
 8001b78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b80:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001b84:	08001c04 	.word	0x08001c04
  ldr r2, =_sbss
 8001b88:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001b8c:	20000078 	.word	0x20000078

08001b90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b90:	e7fe      	b.n	8001b90 <ADC1_2_IRQHandler>
	...

08001b94 <__libc_init_array>:
 8001b94:	b570      	push	{r4, r5, r6, lr}
 8001b96:	2600      	movs	r6, #0
 8001b98:	4d0c      	ldr	r5, [pc, #48]	; (8001bcc <__libc_init_array+0x38>)
 8001b9a:	4c0d      	ldr	r4, [pc, #52]	; (8001bd0 <__libc_init_array+0x3c>)
 8001b9c:	1b64      	subs	r4, r4, r5
 8001b9e:	10a4      	asrs	r4, r4, #2
 8001ba0:	42a6      	cmp	r6, r4
 8001ba2:	d109      	bne.n	8001bb8 <__libc_init_array+0x24>
 8001ba4:	f000 f81a 	bl	8001bdc <_init>
 8001ba8:	2600      	movs	r6, #0
 8001baa:	4d0a      	ldr	r5, [pc, #40]	; (8001bd4 <__libc_init_array+0x40>)
 8001bac:	4c0a      	ldr	r4, [pc, #40]	; (8001bd8 <__libc_init_array+0x44>)
 8001bae:	1b64      	subs	r4, r4, r5
 8001bb0:	10a4      	asrs	r4, r4, #2
 8001bb2:	42a6      	cmp	r6, r4
 8001bb4:	d105      	bne.n	8001bc2 <__libc_init_array+0x2e>
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
 8001bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bbc:	4798      	blx	r3
 8001bbe:	3601      	adds	r6, #1
 8001bc0:	e7ee      	b.n	8001ba0 <__libc_init_array+0xc>
 8001bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8001bc6:	4798      	blx	r3
 8001bc8:	3601      	adds	r6, #1
 8001bca:	e7f2      	b.n	8001bb2 <__libc_init_array+0x1e>
 8001bcc:	08001bfc 	.word	0x08001bfc
 8001bd0:	08001bfc 	.word	0x08001bfc
 8001bd4:	08001bfc 	.word	0x08001bfc
 8001bd8:	08001c00 	.word	0x08001c00

08001bdc <_init>:
 8001bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bde:	bf00      	nop
 8001be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001be2:	bc08      	pop	{r3}
 8001be4:	469e      	mov	lr, r3
 8001be6:	4770      	bx	lr

08001be8 <_fini>:
 8001be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bea:	bf00      	nop
 8001bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bee:	bc08      	pop	{r3}
 8001bf0:	469e      	mov	lr, r3
 8001bf2:	4770      	bx	lr
